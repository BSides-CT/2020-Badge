
NFCBadge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003db4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000050c  2000006c  00003e20  0002006c  2**2
                  ALLOC
  3 .stack        00000400  20000578  0000432c  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037b3c  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000517b  00000000  00000000  00057c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015672  00000000  00000000  0005cda4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f50  00000000  00000000  00072416  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001948  00000000  00000000  00073366  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018899  00000000  00000000  00074cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016437  00000000  00000000  0008d547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007ba37  00000000  00000000  000a397e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027fc  00000000  00000000  0011f3b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 09 00 20 a9 04 00 00 a5 04 00 00 a5 04 00 00     x.. ............
	...
      2c:	a5 04 00 00 00 00 00 00 00 00 00 00 a5 04 00 00     ................
      3c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................
      4c:	a5 04 00 00 a1 15 00 00 a5 04 00 00 a5 04 00 00     ................
      5c:	95 2c 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     .,..............
      6c:	a5 04 00 00 a5 04 00 00 a5 1b 00 00 a5 04 00 00     ................
      7c:	a5 04 00 00 a5 04 00 00 a5 04 00 00 a5 04 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000006c 	.word	0x2000006c
      ac:	00000000 	.word	0x00000000
      b0:	00003db4 	.word	0x00003db4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000070 	.word	0x20000070
      e0:	00003db4 	.word	0x00003db4
      e4:	00003db4 	.word	0x00003db4
      e8:	00000000 	.word	0x00000000

000000ec <CR95HF_extint>:
	{
		return CR95HF_CARD_NFC5;
	}

	CR95HF_stop();
	return CR95HF_CARD_NONE;
      ec:	4770      	bx	lr
	...

000000f0 <CR95HF_irqPulse>:
      f0:	b570      	push	{r4, r5, r6, lr}
      f2:	25c0      	movs	r5, #192	; 0xc0
      f4:	05ed      	lsls	r5, r5, #23
      f6:	2680      	movs	r6, #128	; 0x80
      f8:	01f6      	lsls	r6, r6, #7
      fa:	61ae      	str	r6, [r5, #24]
      fc:	2001      	movs	r0, #1
      fe:	4c04      	ldr	r4, [pc, #16]	; (110 <CR95HF_irqPulse+0x20>)
	delay_ms(1);
     100:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     102:	616e      	str	r6, [r5, #20]
	delay_ms(1);
     104:	2001      	movs	r0, #1
     106:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     108:	61ae      	str	r6, [r5, #24]
	delay_ms(10);
     10a:	200a      	movs	r0, #10
     10c:	47a0      	blx	r4
}
     10e:	bd70      	pop	{r4, r5, r6, pc}
     110:	0000097d 	.word	0x0000097d

00000114 <CR95HF_resetSPI>:
{
     114:	b510      	push	{r4, lr}
	delay_ms(1);
     116:	2001      	movs	r0, #1
     118:	4c07      	ldr	r4, [pc, #28]	; (138 <CR95HF_resetSPI+0x24>)
     11a:	47a0      	blx	r4
	SPI_start();
     11c:	4b07      	ldr	r3, [pc, #28]	; (13c <CR95HF_resetSPI+0x28>)
     11e:	4798      	blx	r3
	SPI_write(CR95HF_RESET);
     120:	2001      	movs	r0, #1
     122:	4b07      	ldr	r3, [pc, #28]	; (140 <CR95HF_resetSPI+0x2c>)
     124:	4798      	blx	r3
	SPI_end();
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <CR95HF_resetSPI+0x30>)
     128:	4798      	blx	r3
	delay_ms(3);
     12a:	2003      	movs	r0, #3
     12c:	47a0      	blx	r4
	CR95HF_irqPulse();
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <CR95HF_resetSPI+0x34>)
     130:	4798      	blx	r3
	delay_ms(10);
     132:	200a      	movs	r0, #10
     134:	47a0      	blx	r4
}
     136:	bd10      	pop	{r4, pc}
     138:	0000097d 	.word	0x0000097d
     13c:	00000429 	.word	0x00000429
     140:	00000331 	.word	0x00000331
     144:	00000435 	.word	0x00000435
     148:	000000f1 	.word	0x000000f1

0000014c <CR95HF_sendReceive>:
{
     14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     14e:	46ce      	mov	lr, r9
     150:	4647      	mov	r7, r8
     152:	b580      	push	{r7, lr}
     154:	4681      	mov	r9, r0
	SPI_start();
     156:	4b42      	ldr	r3, [pc, #264]	; (260 <CR95HF_sendReceive+0x114>)
     158:	4798      	blx	r3
	SPI_write(CR95HF_COMMAND_SEND);
     15a:	2000      	movs	r0, #0
     15c:	4b41      	ldr	r3, [pc, #260]	; (264 <CR95HF_sendReceive+0x118>)
     15e:	4798      	blx	r3
	if (data[CR95HF_COMMAND_OFFSET] == CR95HF_COMMAND_ECHO)
     160:	464b      	mov	r3, r9
     162:	781b      	ldrb	r3, [r3, #0]
     164:	2b55      	cmp	r3, #85	; 0x55
     166:	d04d      	beq.n	204 <CR95HF_sendReceive+0xb8>
		SPI_writeBuffer(data, data[CR95HF_LENGTH_OFFSET] + CR95HF_DATA_OFFSET);
     168:	464b      	mov	r3, r9
     16a:	7859      	ldrb	r1, [r3, #1]
     16c:	3102      	adds	r1, #2
     16e:	b2c9      	uxtb	r1, r1
     170:	4648      	mov	r0, r9
     172:	4b3d      	ldr	r3, [pc, #244]	; (268 <CR95HF_sendReceive+0x11c>)
     174:	4798      	blx	r3
	SPI_end();
     176:	4b3d      	ldr	r3, [pc, #244]	; (26c <CR95HF_sendReceive+0x120>)
     178:	4798      	blx	r3
	uint32_t start = millis();
     17a:	4b3d      	ldr	r3, [pc, #244]	; (270 <CR95HF_sendReceive+0x124>)
     17c:	4798      	blx	r3
     17e:	4680      	mov	r8, r0
	SPI_start();
     180:	4b37      	ldr	r3, [pc, #220]	; (260 <CR95HF_sendReceive+0x114>)
     182:	4798      	blx	r3
		delay_ms(2);
     184:	4f3b      	ldr	r7, [pc, #236]	; (274 <CR95HF_sendReceive+0x128>)
		status = SPI_transfer(CR95HF_COMMAND_POLLING);
     186:	4e3c      	ldr	r6, [pc, #240]	; (278 <CR95HF_sendReceive+0x12c>)
		if ((millis() - start) > 1000)
     188:	4d39      	ldr	r5, [pc, #228]	; (270 <CR95HF_sendReceive+0x124>)
		delay_ms(2);
     18a:	2002      	movs	r0, #2
     18c:	47b8      	blx	r7
		status = SPI_transfer(CR95HF_COMMAND_POLLING);
     18e:	2003      	movs	r0, #3
     190:	47b0      	blx	r6
		status &= CR95HF_FLAG_DATA_READY_MASK;
     192:	2408      	movs	r4, #8
     194:	4004      	ands	r4, r0
		if ((millis() - start) > 1000)
     196:	47a8      	blx	r5
     198:	4643      	mov	r3, r8
     19a:	1ac0      	subs	r0, r0, r3
     19c:	22fa      	movs	r2, #250	; 0xfa
     19e:	0092      	lsls	r2, r2, #2
     1a0:	4290      	cmp	r0, r2
     1a2:	d833      	bhi.n	20c <CR95HF_sendReceive+0xc0>
	while (status != CR95HF_FLAG_DATA_READY);
     1a4:	2c00      	cmp	r4, #0
     1a6:	d0f0      	beq.n	18a <CR95HF_sendReceive+0x3e>
	SPI_end();
     1a8:	4b30      	ldr	r3, [pc, #192]	; (26c <CR95HF_sendReceive+0x120>)
     1aa:	4798      	blx	r3
	SPI_start();
     1ac:	4b2c      	ldr	r3, [pc, #176]	; (260 <CR95HF_sendReceive+0x114>)
     1ae:	4798      	blx	r3
	SPI_write(CR95HF_COMMAND_RECEIVE);
     1b0:	2002      	movs	r0, #2
     1b2:	4b2c      	ldr	r3, [pc, #176]	; (264 <CR95HF_sendReceive+0x118>)
     1b4:	4798      	blx	r3
	rx_data[CR95HF_COMMAND_OFFSET] = SPI_read();
     1b6:	4b31      	ldr	r3, [pc, #196]	; (27c <CR95HF_sendReceive+0x130>)
     1b8:	4798      	blx	r3
     1ba:	4a31      	ldr	r2, [pc, #196]	; (280 <CR95HF_sendReceive+0x134>)
     1bc:	7010      	strb	r0, [r2, #0]
	if (rx_data[CR95HF_COMMAND_OFFSET] == CR95HF_COMMAND_ECHO ||
     1be:	2855      	cmp	r0, #85	; 0x55
     1c0:	d02e      	beq.n	220 <CR95HF_sendReceive+0xd4>
     1c2:	28ff      	cmp	r0, #255	; 0xff
     1c4:	d02c      	beq.n	220 <CR95HF_sendReceive+0xd4>
		rx_data[CR95HF_LENGTH_OFFSET] = SPI_read();
     1c6:	4b2d      	ldr	r3, [pc, #180]	; (27c <CR95HF_sendReceive+0x130>)
     1c8:	4798      	blx	r3
     1ca:	0001      	movs	r1, r0
     1cc:	482c      	ldr	r0, [pc, #176]	; (280 <CR95HF_sendReceive+0x134>)
     1ce:	7041      	strb	r1, [r0, #1]
		SPI_readBuffer(&rx_data[CR95HF_DATA_OFFSET], rx_data[CR95HF_LENGTH_OFFSET]);
     1d0:	3002      	adds	r0, #2
     1d2:	4b2c      	ldr	r3, [pc, #176]	; (284 <CR95HF_sendReceive+0x138>)
     1d4:	4798      	blx	r3
	SPI_end();
     1d6:	4b25      	ldr	r3, [pc, #148]	; (26c <CR95HF_sendReceive+0x120>)
     1d8:	4798      	blx	r3
	switch (command)
     1da:	464b      	mov	r3, r9
     1dc:	789b      	ldrb	r3, [r3, #2]
     1de:	2b04      	cmp	r3, #4
     1e0:	d02b      	beq.n	23a <CR95HF_sendReceive+0xee>
     1e2:	b2da      	uxtb	r2, r3
     1e4:	2a04      	cmp	r2, #4
     1e6:	d923      	bls.n	230 <CR95HF_sendReceive+0xe4>
     1e8:	b2da      	uxtb	r2, r3
     1ea:	2a07      	cmp	r2, #7
     1ec:	d323      	bcc.n	236 <CR95HF_sendReceive+0xea>
     1ee:	2a09      	cmp	r2, #9
     1f0:	d929      	bls.n	246 <CR95HF_sendReceive+0xfa>
     1f2:	2b55      	cmp	r3, #85	; 0x55
     1f4:	d11f      	bne.n	236 <CR95HF_sendReceive+0xea>
		if (rx_data[CR95HF_COMMAND_OFFSET] == CR95HF_COMMAND_ECHO)
     1f6:	4b22      	ldr	r3, [pc, #136]	; (280 <CR95HF_sendReceive+0x134>)
     1f8:	7818      	ldrb	r0, [r3, #0]
     1fa:	3855      	subs	r0, #85	; 0x55
     1fc:	1e43      	subs	r3, r0, #1
     1fe:	4198      	sbcs	r0, r3
		return 1;
     200:	b2c0      	uxtb	r0, r0
     202:	e009      	b.n	218 <CR95HF_sendReceive+0xcc>
		SPI_write(CR95HF_COMMAND_ECHO);
     204:	2055      	movs	r0, #85	; 0x55
     206:	4b17      	ldr	r3, [pc, #92]	; (264 <CR95HF_sendReceive+0x118>)
     208:	4798      	blx	r3
     20a:	e7b4      	b.n	176 <CR95HF_sendReceive+0x2a>
			SPI_end();
     20c:	4b17      	ldr	r3, [pc, #92]	; (26c <CR95HF_sendReceive+0x120>)
     20e:	4798      	blx	r3
		rx_data[CR95HF_COMMAND_OFFSET] = CR95HF_POLLING_TIMEOUT;
     210:	2201      	movs	r2, #1
     212:	4b1b      	ldr	r3, [pc, #108]	; (280 <CR95HF_sendReceive+0x134>)
     214:	701a      	strb	r2, [r3, #0]
		return 1;
     216:	2001      	movs	r0, #1
}
     218:	bc0c      	pop	{r2, r3}
     21a:	4690      	mov	r8, r2
     21c:	4699      	mov	r9, r3
     21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rx_data[CR95HF_LENGTH_OFFSET] = 0x00;
     220:	4817      	ldr	r0, [pc, #92]	; (280 <CR95HF_sendReceive+0x134>)
     222:	2300      	movs	r3, #0
     224:	7043      	strb	r3, [r0, #1]
		SPI_readBuffer(&rx_data[CR95HF_LENGTH_OFFSET + 1], 2);
     226:	3002      	adds	r0, #2
     228:	2102      	movs	r1, #2
     22a:	4b16      	ldr	r3, [pc, #88]	; (284 <CR95HF_sendReceive+0x138>)
     22c:	4798      	blx	r3
     22e:	e7d2      	b.n	1d6 <CR95HF_sendReceive+0x8a>
	switch (command)
     230:	3b01      	subs	r3, #1
     232:	2b01      	cmp	r3, #1
     234:	d907      	bls.n	246 <CR95HF_sendReceive+0xfa>
	return 1;
     236:	2001      	movs	r0, #1
     238:	e7ee      	b.n	218 <CR95HF_sendReceive+0xcc>
		if ((rx_data[CR95HF_COMMAND_OFFSET] == 0x80) &&
     23a:	4b11      	ldr	r3, [pc, #68]	; (280 <CR95HF_sendReceive+0x134>)
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b80      	cmp	r3, #128	; 0x80
     240:	d006      	beq.n	250 <CR95HF_sendReceive+0x104>
		} else if (rx_data[CR95HF_COMMAND_OFFSET] == 0x90)
     242:	2b90      	cmp	r3, #144	; 0x90
     244:	d00a      	beq.n	25c <CR95HF_sendReceive+0x110>
		if (rx_data[CR95HF_COMMAND_OFFSET] == 0x00)
     246:	4b0e      	ldr	r3, [pc, #56]	; (280 <CR95HF_sendReceive+0x134>)
     248:	7818      	ldrb	r0, [r3, #0]
     24a:	2800      	cmp	r0, #0
     24c:	d1d3      	bne.n	1f6 <CR95HF_sendReceive+0xaa>
     24e:	e7e3      	b.n	218 <CR95HF_sendReceive+0xcc>
		(rx_data[CR95HF_COMMAND_OFFSET + 1] != 0))
     250:	4b0b      	ldr	r3, [pc, #44]	; (280 <CR95HF_sendReceive+0x134>)
		if ((rx_data[CR95HF_COMMAND_OFFSET] == 0x80) &&
     252:	785b      	ldrb	r3, [r3, #1]
			return 0;
     254:	2000      	movs	r0, #0
		if ((rx_data[CR95HF_COMMAND_OFFSET] == 0x80) &&
     256:	2b00      	cmp	r3, #0
     258:	d0cd      	beq.n	1f6 <CR95HF_sendReceive+0xaa>
     25a:	e7dd      	b.n	218 <CR95HF_sendReceive+0xcc>
			return 0;
     25c:	2000      	movs	r0, #0
     25e:	e7db      	b.n	218 <CR95HF_sendReceive+0xcc>
     260:	00000429 	.word	0x00000429
     264:	00000331 	.word	0x00000331
     268:	000003d1 	.word	0x000003d1
     26c:	00000435 	.word	0x00000435
     270:	00000485 	.word	0x00000485
     274:	0000097d 	.word	0x0000097d
     278:	0000038d 	.word	0x0000038d
     27c:	0000035d 	.word	0x0000035d
     280:	20000088 	.word	0x20000088
     284:	000003fd 	.word	0x000003fd

00000288 <CR95HF_id>:
{
     288:	b510      	push	{r4, lr}
     28a:	b082      	sub	sp, #8
     28c:	0004      	movs	r4, r0
	uint8_t command[] = { CR95HF_COMMAND_IDN, 0x00 };
     28e:	a801      	add	r0, sp, #4
     290:	2301      	movs	r3, #1
     292:	7003      	strb	r3, [r0, #0]
     294:	2300      	movs	r3, #0
     296:	7043      	strb	r3, [r0, #1]
	if (CR95HF_sendReceive(command) != 0)
     298:	4b05      	ldr	r3, [pc, #20]	; (2b0 <CR95HF_id+0x28>)
     29a:	4798      	blx	r3
     29c:	2800      	cmp	r0, #0
     29e:	d104      	bne.n	2aa <CR95HF_id+0x22>
	*id = (const char *)&rx_data[CR95HF_DATA_OFFSET];
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <CR95HF_id+0x2c>)
     2a2:	3302      	adds	r3, #2
     2a4:	6023      	str	r3, [r4, #0]
}
     2a6:	b002      	add	sp, #8
     2a8:	bd10      	pop	{r4, pc}
		return 1;
     2aa:	2001      	movs	r0, #1
     2ac:	e7fb      	b.n	2a6 <CR95HF_id+0x1e>
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	0000014d 	.word	0x0000014d
     2b4:	20000088 	.word	0x20000088

000002b8 <CR95HF_init>:
{
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	b083      	sub	sp, #12
	ext_irq_register(IRQ_IN, CR95HF_extint);
     2bc:	4914      	ldr	r1, [pc, #80]	; (310 <CR95HF_init+0x58>)
     2be:	200f      	movs	r0, #15
     2c0:	4b14      	ldr	r3, [pc, #80]	; (314 <CR95HF_init+0x5c>)
     2c2:	4798      	blx	r3
	CR95HF_irqPulse();
     2c4:	4b14      	ldr	r3, [pc, #80]	; (318 <CR95HF_init+0x60>)
     2c6:	4798      	blx	r3
	CR95HF_resetSPI();
     2c8:	4b14      	ldr	r3, [pc, #80]	; (31c <CR95HF_init+0x64>)
     2ca:	4798      	blx	r3
     2cc:	2403      	movs	r4, #3
		uint8_t command = CR95HF_COMMAND_ECHO;
     2ce:	466b      	mov	r3, sp
     2d0:	1cdd      	adds	r5, r3, #3
     2d2:	2755      	movs	r7, #85	; 0x55
		CR95HF_sendReceive(&command);
     2d4:	4e12      	ldr	r6, [pc, #72]	; (320 <CR95HF_init+0x68>)
		uint8_t command = CR95HF_COMMAND_ECHO;
     2d6:	702f      	strb	r7, [r5, #0]
		CR95HF_sendReceive(&command);
     2d8:	0028      	movs	r0, r5
     2da:	47b0      	blx	r6
		if (rx_data[CR95HF_COMMAND_OFFSET] == CR95HF_COMMAND_ECHO)
     2dc:	4b11      	ldr	r3, [pc, #68]	; (324 <CR95HF_init+0x6c>)
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	2b55      	cmp	r3, #85	; 0x55
     2e2:	d008      	beq.n	2f6 <CR95HF_init+0x3e>
		CR95HF_resetSPI();
     2e4:	4b0d      	ldr	r3, [pc, #52]	; (31c <CR95HF_init+0x64>)
     2e6:	4798      	blx	r3
     2e8:	3c01      	subs	r4, #1
     2ea:	b2e4      	uxtb	r4, r4
	while (attempts < 3);
     2ec:	2c00      	cmp	r4, #0
     2ee:	d1f2      	bne.n	2d6 <CR95HF_init+0x1e>
		return 1;
     2f0:	2001      	movs	r0, #1
}
     2f2:	b003      	add	sp, #12
     2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (CR95HF_id(&id) != 0)
     2f6:	a801      	add	r0, sp, #4
     2f8:	4b0b      	ldr	r3, [pc, #44]	; (328 <CR95HF_init+0x70>)
     2fa:	4798      	blx	r3
     2fc:	2800      	cmp	r0, #0
     2fe:	d104      	bne.n	30a <CR95HF_init+0x52>
	ic_version = (CR95HF_Version)rx_data[CR95HF_ROM_CODE_OFFSET];
     300:	4b08      	ldr	r3, [pc, #32]	; (324 <CR95HF_init+0x6c>)
     302:	7b5a      	ldrb	r2, [r3, #13]
     304:	4b09      	ldr	r3, [pc, #36]	; (32c <CR95HF_init+0x74>)
     306:	701a      	strb	r2, [r3, #0]
	return 0;
     308:	e7f3      	b.n	2f2 <CR95HF_init+0x3a>
		return 1;
     30a:	2001      	movs	r0, #1
     30c:	e7f1      	b.n	2f2 <CR95HF_init+0x3a>
     30e:	46c0      	nop			; (mov r8, r8)
     310:	000000ed 	.word	0x000000ed
     314:	000009f9 	.word	0x000009f9
     318:	000000f1 	.word	0x000000f1
     31c:	00000115 	.word	0x00000115
     320:	0000014d 	.word	0x0000014d
     324:	20000088 	.word	0x20000088
     328:	00000289 	.word	0x00000289
     32c:	20000000 	.word	0x20000000

00000330 <SPI_write>:
#include <atmel_start.h>
#include "application.h"

void SPI_write(uint8_t data)
{
     330:	b510      	push	{r4, lr}
     332:	b084      	sub	sp, #16
     334:	466b      	mov	r3, sp
     336:	1ddc      	adds	r4, r3, #7
     338:	71d8      	strb	r0, [r3, #7]
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     33a:	a903      	add	r1, sp, #12
     33c:	4804      	ldr	r0, [pc, #16]	; (350 <SPI_write+0x20>)
     33e:	4b05      	ldr	r3, [pc, #20]	; (354 <SPI_write+0x24>)
     340:	4798      	blx	r3

	io_write(io, &data, 1);
     342:	2201      	movs	r2, #1
     344:	0021      	movs	r1, r4
     346:	9803      	ldr	r0, [sp, #12]
     348:	4b03      	ldr	r3, [pc, #12]	; (358 <SPI_write+0x28>)
     34a:	4798      	blx	r3
}
     34c:	b004      	add	sp, #16
     34e:	bd10      	pop	{r4, pc}
     350:	20000544 	.word	0x20000544
     354:	00000bbd 	.word	0x00000bbd
     358:	00000a41 	.word	0x00000a41

0000035c <SPI_read>:

uint8_t SPI_read(void)
{
     35c:	b510      	push	{r4, lr}
     35e:	b082      	sub	sp, #8
	uint8_t retval = 0;
     360:	466b      	mov	r3, sp
     362:	1ddc      	adds	r4, r3, #7
     364:	2300      	movs	r3, #0
     366:	7023      	strb	r3, [r4, #0]

	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     368:	4669      	mov	r1, sp
     36a:	4805      	ldr	r0, [pc, #20]	; (380 <SPI_read+0x24>)
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SPI_read+0x28>)
     36e:	4798      	blx	r3

	io_read(io, &retval, 1);
     370:	2201      	movs	r2, #1
     372:	0021      	movs	r1, r4
     374:	9800      	ldr	r0, [sp, #0]
     376:	4b04      	ldr	r3, [pc, #16]	; (388 <SPI_read+0x2c>)
     378:	4798      	blx	r3

	return retval;
     37a:	7820      	ldrb	r0, [r4, #0]
}
     37c:	b002      	add	sp, #8
     37e:	bd10      	pop	{r4, pc}
     380:	20000544 	.word	0x20000544
     384:	00000bbd 	.word	0x00000bbd
     388:	00000a75 	.word	0x00000a75

0000038c <SPI_transfer>:

uint8_t SPI_transfer(uint8_t data)
{
     38c:	b530      	push	{r4, r5, lr}
     38e:	b085      	sub	sp, #20
     390:	466b      	mov	r3, sp
     392:	1ddd      	adds	r5, r3, #7
     394:	71d8      	strb	r0, [r3, #7]
	uint8_t retval = 0;
     396:	240f      	movs	r4, #15
     398:	446c      	add	r4, sp
     39a:	2300      	movs	r3, #0
     39c:	7023      	strb	r3, [r4, #0]

	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     39e:	a902      	add	r1, sp, #8
     3a0:	4807      	ldr	r0, [pc, #28]	; (3c0 <SPI_transfer+0x34>)
     3a2:	4b08      	ldr	r3, [pc, #32]	; (3c4 <SPI_transfer+0x38>)
     3a4:	4798      	blx	r3

	io_write(io, &data, 1);
     3a6:	2201      	movs	r2, #1
     3a8:	0029      	movs	r1, r5
     3aa:	9802      	ldr	r0, [sp, #8]
     3ac:	4b06      	ldr	r3, [pc, #24]	; (3c8 <SPI_transfer+0x3c>)
     3ae:	4798      	blx	r3
	io_read(io, &retval, 1);
     3b0:	2201      	movs	r2, #1
     3b2:	0021      	movs	r1, r4
     3b4:	9802      	ldr	r0, [sp, #8]
     3b6:	4b05      	ldr	r3, [pc, #20]	; (3cc <SPI_transfer+0x40>)
     3b8:	4798      	blx	r3

	return retval;
     3ba:	7820      	ldrb	r0, [r4, #0]
}
     3bc:	b005      	add	sp, #20
     3be:	bd30      	pop	{r4, r5, pc}
     3c0:	20000544 	.word	0x20000544
     3c4:	00000bbd 	.word	0x00000bbd
     3c8:	00000a41 	.word	0x00000a41
     3cc:	00000a75 	.word	0x00000a75

000003d0 <SPI_writeBuffer>:

void SPI_writeBuffer(uint8_t *data, uint8_t length)
{
     3d0:	b530      	push	{r4, r5, lr}
     3d2:	b083      	sub	sp, #12
     3d4:	0005      	movs	r5, r0
     3d6:	000c      	movs	r4, r1
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     3d8:	a901      	add	r1, sp, #4
     3da:	4805      	ldr	r0, [pc, #20]	; (3f0 <SPI_writeBuffer+0x20>)
     3dc:	4b05      	ldr	r3, [pc, #20]	; (3f4 <SPI_writeBuffer+0x24>)
     3de:	4798      	blx	r3

	io_write(io, data, length);
     3e0:	b2a2      	uxth	r2, r4
     3e2:	0029      	movs	r1, r5
     3e4:	9801      	ldr	r0, [sp, #4]
     3e6:	4b04      	ldr	r3, [pc, #16]	; (3f8 <SPI_writeBuffer+0x28>)
     3e8:	4798      	blx	r3
}
     3ea:	b003      	add	sp, #12
     3ec:	bd30      	pop	{r4, r5, pc}
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	20000544 	.word	0x20000544
     3f4:	00000bbd 	.word	0x00000bbd
     3f8:	00000a41 	.word	0x00000a41

000003fc <SPI_readBuffer>:

void SPI_readBuffer(uint8_t *data, uint8_t length)
{
     3fc:	b530      	push	{r4, r5, lr}
     3fe:	b083      	sub	sp, #12
     400:	0005      	movs	r5, r0
     402:	000c      	movs	r4, r1
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     404:	a901      	add	r1, sp, #4
     406:	4805      	ldr	r0, [pc, #20]	; (41c <STACK_SIZE+0x1c>)
     408:	4b05      	ldr	r3, [pc, #20]	; (420 <STACK_SIZE+0x20>)
     40a:	4798      	blx	r3

	io_read(io, data, length);
     40c:	b2a2      	uxth	r2, r4
     40e:	0029      	movs	r1, r5
     410:	9801      	ldr	r0, [sp, #4]
     412:	4b04      	ldr	r3, [pc, #16]	; (424 <STACK_SIZE+0x24>)
     414:	4798      	blx	r3
}
     416:	b003      	add	sp, #12
     418:	bd30      	pop	{r4, r5, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	20000544 	.word	0x20000544
     420:	00000bbd 	.word	0x00000bbd
     424:	00000a75 	.word	0x00000a75

00000428 <SPI_start>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     428:	2280      	movs	r2, #128	; 0x80
     42a:	0412      	lsls	r2, r2, #16
     42c:	23c0      	movs	r3, #192	; 0xc0
     42e:	05db      	lsls	r3, r3, #23
     430:	615a      	str	r2, [r3, #20]

void SPI_start(void)
{
	gpio_set_pin_level(SPI_SS, false);
}
     432:	4770      	bx	lr

00000434 <SPI_end>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     434:	2280      	movs	r2, #128	; 0x80
     436:	0412      	lsls	r2, r2, #16
     438:	23c0      	movs	r3, #192	; 0xc0
     43a:	05db      	lsls	r3, r3, #23
     43c:	619a      	str	r2, [r3, #24]

void SPI_end(void)
{
	gpio_set_pin_level(SPI_SS, true);
}
     43e:	4770      	bx	lr

00000440 <timer_work>:
struct timer_task task;
volatile uint32_t time = 0;

static void timer_work(const struct timer_task *const task)
{
	time++;
     440:	4a02      	ldr	r2, [pc, #8]	; (44c <timer_work+0xc>)
     442:	6813      	ldr	r3, [r2, #0]
     444:	3301      	adds	r3, #1
     446:	6013      	str	r3, [r2, #0]
}
     448:	4770      	bx	lr
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	200001ec 	.word	0x200001ec

00000450 <millis_init>:

void millis_init(void)
{
     450:	b510      	push	{r4, lr}
	task.interval = 4; // 32768 / 8 = 4096, 4 counts
     452:	4907      	ldr	r1, [pc, #28]	; (470 <millis_init+0x20>)
     454:	2304      	movs	r3, #4
     456:	608b      	str	r3, [r1, #8]
	task.cb = timer_work;
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <millis_init+0x24>)
     45a:	60cb      	str	r3, [r1, #12]
	task.mode = TIMER_TASK_REPEAT;
     45c:	2301      	movs	r3, #1
     45e:	740b      	strb	r3, [r1, #16]

	timer_add_task(&TIMER_0, &task);
     460:	4c05      	ldr	r4, [pc, #20]	; (478 <millis_init+0x28>)
     462:	0020      	movs	r0, r4
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <millis_init+0x2c>)
     466:	4798      	blx	r3
	timer_start(&TIMER_0);
     468:	0020      	movs	r0, r4
     46a:	4b05      	ldr	r3, [pc, #20]	; (480 <millis_init+0x30>)
     46c:	4798      	blx	r3
}
     46e:	bd10      	pop	{r4, pc}
     470:	20000530 	.word	0x20000530
     474:	00000441 	.word	0x00000441
     478:	2000055c 	.word	0x2000055c
     47c:	00000d69 	.word	0x00000d69
     480:	00000d2d 	.word	0x00000d2d

00000484 <millis>:

volatile uint32_t millis(void)
{
	return time;
     484:	4b01      	ldr	r3, [pc, #4]	; (48c <millis+0x8>)
     486:	6818      	ldr	r0, [r3, #0]
}
     488:	4770      	bx	lr
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200001ec 	.word	0x200001ec

00000490 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     490:	b510      	push	{r4, lr}
	system_init();
     492:	4b02      	ldr	r3, [pc, #8]	; (49c <atmel_start_init+0xc>)
     494:	4798      	blx	r3
	usb_init();
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <atmel_start_init+0x10>)
     498:	4798      	blx	r3
}
     49a:	bd10      	pop	{r4, pc}
     49c:	000007c5 	.word	0x000007c5
     4a0:	00003b8d 	.word	0x00003b8d

000004a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     4a4:	e7fe      	b.n	4a4 <Dummy_Handler>
	...

000004a8 <Reset_Handler>:
{
     4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     4aa:	4a2a      	ldr	r2, [pc, #168]	; (554 <Reset_Handler+0xac>)
     4ac:	4b2a      	ldr	r3, [pc, #168]	; (558 <Reset_Handler+0xb0>)
     4ae:	429a      	cmp	r2, r3
     4b0:	d011      	beq.n	4d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     4b2:	001a      	movs	r2, r3
     4b4:	4b29      	ldr	r3, [pc, #164]	; (55c <Reset_Handler+0xb4>)
     4b6:	429a      	cmp	r2, r3
     4b8:	d20d      	bcs.n	4d6 <Reset_Handler+0x2e>
     4ba:	4a29      	ldr	r2, [pc, #164]	; (560 <Reset_Handler+0xb8>)
     4bc:	3303      	adds	r3, #3
     4be:	1a9b      	subs	r3, r3, r2
     4c0:	089b      	lsrs	r3, r3, #2
     4c2:	3301      	adds	r3, #1
     4c4:	009b      	lsls	r3, r3, #2
     4c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     4c8:	4823      	ldr	r0, [pc, #140]	; (558 <Reset_Handler+0xb0>)
     4ca:	4922      	ldr	r1, [pc, #136]	; (554 <Reset_Handler+0xac>)
     4cc:	588c      	ldr	r4, [r1, r2]
     4ce:	5084      	str	r4, [r0, r2]
     4d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     4d2:	429a      	cmp	r2, r3
     4d4:	d1fa      	bne.n	4cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     4d6:	4a23      	ldr	r2, [pc, #140]	; (564 <Reset_Handler+0xbc>)
     4d8:	4b23      	ldr	r3, [pc, #140]	; (568 <Reset_Handler+0xc0>)
     4da:	429a      	cmp	r2, r3
     4dc:	d20a      	bcs.n	4f4 <Reset_Handler+0x4c>
     4de:	43d3      	mvns	r3, r2
     4e0:	4921      	ldr	r1, [pc, #132]	; (568 <Reset_Handler+0xc0>)
     4e2:	185b      	adds	r3, r3, r1
     4e4:	2103      	movs	r1, #3
     4e6:	438b      	bics	r3, r1
     4e8:	3304      	adds	r3, #4
     4ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     4ec:	2100      	movs	r1, #0
     4ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     4f0:	4293      	cmp	r3, r2
     4f2:	d1fc      	bne.n	4ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4f4:	4a1d      	ldr	r2, [pc, #116]	; (56c <Reset_Handler+0xc4>)
     4f6:	21ff      	movs	r1, #255	; 0xff
     4f8:	4b1d      	ldr	r3, [pc, #116]	; (570 <Reset_Handler+0xc8>)
     4fa:	438b      	bics	r3, r1
     4fc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     4fe:	39fd      	subs	r1, #253	; 0xfd
     500:	2390      	movs	r3, #144	; 0x90
     502:	005b      	lsls	r3, r3, #1
     504:	4a1b      	ldr	r2, [pc, #108]	; (574 <Reset_Handler+0xcc>)
     506:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     508:	4a1b      	ldr	r2, [pc, #108]	; (578 <Reset_Handler+0xd0>)
     50a:	78d3      	ldrb	r3, [r2, #3]
     50c:	2503      	movs	r5, #3
     50e:	43ab      	bics	r3, r5
     510:	2402      	movs	r4, #2
     512:	4323      	orrs	r3, r4
     514:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     516:	78d3      	ldrb	r3, [r2, #3]
     518:	270c      	movs	r7, #12
     51a:	43bb      	bics	r3, r7
     51c:	2608      	movs	r6, #8
     51e:	4333      	orrs	r3, r6
     520:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     522:	4b16      	ldr	r3, [pc, #88]	; (57c <Reset_Handler+0xd4>)
     524:	7b98      	ldrb	r0, [r3, #14]
     526:	2230      	movs	r2, #48	; 0x30
     528:	4390      	bics	r0, r2
     52a:	2220      	movs	r2, #32
     52c:	4310      	orrs	r0, r2
     52e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     530:	7b99      	ldrb	r1, [r3, #14]
     532:	43b9      	bics	r1, r7
     534:	4331      	orrs	r1, r6
     536:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     538:	7b9a      	ldrb	r2, [r3, #14]
     53a:	43aa      	bics	r2, r5
     53c:	4322      	orrs	r2, r4
     53e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     540:	4a0f      	ldr	r2, [pc, #60]	; (580 <Reset_Handler+0xd8>)
     542:	6853      	ldr	r3, [r2, #4]
     544:	2180      	movs	r1, #128	; 0x80
     546:	430b      	orrs	r3, r1
     548:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <Reset_Handler+0xdc>)
     54c:	4798      	blx	r3
        main();
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <Reset_Handler+0xe0>)
     550:	4798      	blx	r3
     552:	e7fe      	b.n	552 <Reset_Handler+0xaa>
     554:	00003db4 	.word	0x00003db4
     558:	20000000 	.word	0x20000000
     55c:	2000006c 	.word	0x2000006c
     560:	20000004 	.word	0x20000004
     564:	2000006c 	.word	0x2000006c
     568:	20000578 	.word	0x20000578
     56c:	e000ed00 	.word	0xe000ed00
     570:	00000000 	.word	0x00000000
     574:	41007000 	.word	0x41007000
     578:	41005000 	.word	0x41005000
     57c:	41004800 	.word	0x41004800
     580:	41004000 	.word	0x41004000
     584:	00003bed 	.word	0x00003bed
     588:	0000301d 	.word	0x0000301d

0000058c <EXTERNAL_IRQ_0_init>:

struct spi_m_sync_descriptor SPI_0;
struct timer_descriptor      TIMER_0;

void EXTERNAL_IRQ_0_init(void)
{
     58c:	b510      	push	{r4, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     58e:	4a0f      	ldr	r2, [pc, #60]	; (5cc <EXTERNAL_IRQ_0_init+0x40>)
     590:	4b0f      	ldr	r3, [pc, #60]	; (5d0 <EXTERNAL_IRQ_0_init+0x44>)
     592:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     594:	2280      	movs	r2, #128	; 0x80
     596:	0212      	lsls	r2, r2, #8
     598:	23c0      	movs	r3, #192	; 0xc0
     59a:	05db      	lsls	r3, r3, #23
     59c:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59e:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <EXTERNAL_IRQ_0_init+0x48>)
     5a0:	4a0d      	ldr	r2, [pc, #52]	; (5d8 <EXTERNAL_IRQ_0_init+0x4c>)
     5a2:	629a      	str	r2, [r3, #40]	; 0x28
     5a4:	4a0d      	ldr	r2, [pc, #52]	; (5dc <EXTERNAL_IRQ_0_init+0x50>)
     5a6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a8:	214f      	movs	r1, #79	; 0x4f
     5aa:	5c5a      	ldrb	r2, [r3, r1]
     5ac:	2004      	movs	r0, #4
     5ae:	4382      	bics	r2, r0
     5b0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b4:	3803      	subs	r0, #3
     5b6:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b8:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5bc:	3918      	subs	r1, #24
     5be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c0:	300e      	adds	r0, #14
     5c2:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c4:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(IRQ_IN, PINMUX_PA15A_EIC_EXTINT1);

	ext_irq_init();
     5c6:	4b06      	ldr	r3, [pc, #24]	; (5e0 <EXTERNAL_IRQ_0_init+0x54>)
     5c8:	4798      	blx	r3
}
     5ca:	bd10      	pop	{r4, pc}
     5cc:	00004005 	.word	0x00004005
     5d0:	40000c00 	.word	0x40000c00
     5d4:	41004400 	.word	0x41004400
     5d8:	40028000 	.word	0x40028000
     5dc:	c0020000 	.word	0xc0020000
     5e0:	000009d5 	.word	0x000009d5

000005e4 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e6:	46ce      	mov	lr, r9
     5e8:	4647      	mov	r7, r8
     5ea:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ec:	24c0      	movs	r4, #192	; 0xc0
     5ee:	05e4      	lsls	r4, r4, #23
     5f0:	2380      	movs	r3, #128	; 0x80
     5f2:	03db      	lsls	r3, r3, #15
     5f4:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f6:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f8:	4b23      	ldr	r3, [pc, #140]	; (688 <SPI_0_PORT_init+0xa4>)
     5fa:	2280      	movs	r2, #128	; 0x80
     5fc:	05d2      	lsls	r2, r2, #23
     5fe:	4691      	mov	r9, r2
     600:	629a      	str	r2, [r3, #40]	; 0x28
     602:	4922      	ldr	r1, [pc, #136]	; (68c <SPI_0_PORT_init+0xa8>)
     604:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     606:	2056      	movs	r0, #86	; 0x56
     608:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     60a:	2601      	movs	r6, #1
     60c:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60e:	2501      	movs	r5, #1
     610:	4329      	orrs	r1, r5
     612:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     614:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     616:	381b      	subs	r0, #27
     618:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     61a:	270f      	movs	r7, #15
     61c:	46bc      	mov	ip, r7
     61e:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     620:	2702      	movs	r7, #2
     622:	4339      	orrs	r1, r7
     624:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     626:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     628:	2180      	movs	r1, #128	; 0x80
     62a:	0249      	lsls	r1, r1, #9
     62c:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62e:	4918      	ldr	r1, [pc, #96]	; (690 <SPI_0_PORT_init+0xac>)
     630:	6299      	str	r1, [r3, #40]	; 0x28
     632:	4918      	ldr	r1, [pc, #96]	; (694 <SPI_0_PORT_init+0xb0>)
     634:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     636:	2150      	movs	r1, #80	; 0x50
     638:	5c58      	ldrb	r0, [r3, r1]
     63a:	2204      	movs	r2, #4
     63c:	4390      	bics	r0, r2
     63e:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     640:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     642:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     644:	4328      	orrs	r0, r5
     646:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     648:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     64a:	2038      	movs	r0, #56	; 0x38
     64c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     64e:	4662      	mov	r2, ip
     650:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     652:	4339      	orrs	r1, r7
     654:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     656:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     658:	2180      	movs	r1, #128	; 0x80
     65a:	0289      	lsls	r1, r1, #10
     65c:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     65e:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     660:	464a      	mov	r2, r9
     662:	629a      	str	r2, [r3, #40]	; 0x28
     664:	4a0c      	ldr	r2, [pc, #48]	; (698 <SPI_0_PORT_init+0xb4>)
     666:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     668:	2151      	movs	r1, #81	; 0x51
     66a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     66c:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     66e:	432a      	orrs	r2, r5
     670:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     672:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     674:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     676:	3942      	subs	r1, #66	; 0x42
     678:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     67a:	3111      	adds	r1, #17
     67c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67e:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(SPI_SCK, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SPI_SCK, PINMUX_PA17C_SERCOM1_PAD3);
}
     680:	bc0c      	pop	{r2, r3}
     682:	4690      	mov	r8, r2
     684:	4699      	mov	r9, r3
     686:	bdf0      	pop	{r4, r5, r6, r7, pc}
     688:	41004400 	.word	0x41004400
     68c:	c0000040 	.word	0xc0000040
     690:	40020000 	.word	0x40020000
     694:	c0020001 	.word	0xc0020001
     698:	c0000002 	.word	0xc0000002

0000069c <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     69c:	4a04      	ldr	r2, [pc, #16]	; (6b0 <SPI_0_CLOCK_init+0x14>)
     69e:	6a13      	ldr	r3, [r2, #32]
     6a0:	2108      	movs	r1, #8
     6a2:	430b      	orrs	r3, r1
     6a4:	6213      	str	r3, [r2, #32]
     6a6:	4a03      	ldr	r2, [pc, #12]	; (6b4 <SPI_0_CLOCK_init+0x18>)
     6a8:	4b03      	ldr	r3, [pc, #12]	; (6b8 <SPI_0_CLOCK_init+0x1c>)
     6aa:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
}
     6ac:	4770      	bx	lr
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	40000400 	.word	0x40000400
     6b4:	0000400f 	.word	0x0000400f
     6b8:	40000c00 	.word	0x40000c00

000006bc <SPI_0_init>:

void SPI_0_init(void)
{
     6bc:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <SPI_0_init+0x14>)
     6c0:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM1);
     6c2:	4904      	ldr	r1, [pc, #16]	; (6d4 <SPI_0_init+0x18>)
     6c4:	4804      	ldr	r0, [pc, #16]	; (6d8 <SPI_0_init+0x1c>)
     6c6:	4b05      	ldr	r3, [pc, #20]	; (6dc <SPI_0_init+0x20>)
     6c8:	4798      	blx	r3
	SPI_0_PORT_init();
     6ca:	4b05      	ldr	r3, [pc, #20]	; (6e0 <SPI_0_init+0x24>)
     6cc:	4798      	blx	r3
}
     6ce:	bd10      	pop	{r4, pc}
     6d0:	0000069d 	.word	0x0000069d
     6d4:	42000c00 	.word	0x42000c00
     6d8:	20000544 	.word	0x20000544
     6dc:	00000aa9 	.word	0x00000aa9
     6e0:	000005e5 	.word	0x000005e5

000006e4 <delay_driver_init>:

void delay_driver_init(void)
{
     6e4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     6e6:	4802      	ldr	r0, [pc, #8]	; (6f0 <delay_driver_init+0xc>)
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <delay_driver_init+0x10>)
     6ea:	4798      	blx	r3
}
     6ec:	bd10      	pop	{r4, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	e000e010 	.word	0xe000e010
     6f4:	00000969 	.word	0x00000969

000006f8 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_0, TC1, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6fe:	24c0      	movs	r4, #192	; 0xc0
     700:	05e4      	lsls	r4, r4, #23
     702:	2280      	movs	r2, #128	; 0x80
     704:	0452      	lsls	r2, r2, #17
     706:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     708:	4b1a      	ldr	r3, [pc, #104]	; (774 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     70a:	2780      	movs	r7, #128	; 0x80
     70c:	05ff      	lsls	r7, r7, #23
     70e:	629f      	str	r7, [r3, #40]	; 0x28
     710:	4919      	ldr	r1, [pc, #100]	; (778 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     712:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     714:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     716:	2058      	movs	r0, #88	; 0x58
     718:	5c19      	ldrb	r1, [r3, r0]
     71a:	2204      	movs	r2, #4
     71c:	4690      	mov	r8, r2
     71e:	4391      	bics	r1, r2
     720:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     722:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     724:	2601      	movs	r6, #1
     726:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     728:	2501      	movs	r5, #1
     72a:	4329      	orrs	r1, r5
     72c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     72e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     730:	381c      	subs	r0, #28
     732:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     734:	320b      	adds	r2, #11
     736:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     738:	3a09      	subs	r2, #9
     73a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     73c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     73e:	2180      	movs	r1, #128	; 0x80
     740:	0489      	lsls	r1, r1, #18
     742:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     744:	629f      	str	r7, [r3, #40]	; 0x28
     746:	4f0d      	ldr	r7, [pc, #52]	; (77c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     748:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     74a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     74c:	2159      	movs	r1, #89	; 0x59
     74e:	5c5c      	ldrb	r4, [r3, r1]
     750:	4642      	mov	r2, r8
     752:	4394      	bics	r4, r2
     754:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     756:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     758:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     75a:	432a      	orrs	r2, r5
     75c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     762:	394a      	subs	r1, #74	; 0x4a
     764:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     766:	3151      	adds	r1, #81	; 0x51
     768:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     76c:	bc04      	pop	{r2}
     76e:	4690      	mov	r8, r2
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	41004400 	.word	0x41004400
     778:	c0000100 	.word	0xc0000100
     77c:	c0000200 	.word	0xc0000200

00000780 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     780:	4b06      	ldr	r3, [pc, #24]	; (79c <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
     782:	69da      	ldr	r2, [r3, #28]
     784:	2120      	movs	r1, #32
     786:	430a      	orrs	r2, r1
     788:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     78a:	695a      	ldr	r2, [r3, #20]
     78c:	3120      	adds	r1, #32
     78e:	430a      	orrs	r2, r1
     790:	615a      	str	r2, [r3, #20]
     792:	4a03      	ldr	r2, [pc, #12]	; (7a0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     794:	4b03      	ldr	r3, [pc, #12]	; (7a4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     796:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     798:	4770      	bx	lr
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	40000400 	.word	0x40000400
     7a0:	00004006 	.word	0x00004006
     7a4:	40000c00 	.word	0x40000c00

000007a8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     7a8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     7aa:	4b03      	ldr	r3, [pc, #12]	; (7b8 <USB_DEVICE_INSTANCE_init+0x10>)
     7ac:	4798      	blx	r3
	usb_d_init();
     7ae:	4b03      	ldr	r3, [pc, #12]	; (7bc <USB_DEVICE_INSTANCE_init+0x14>)
     7b0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     7b2:	4b03      	ldr	r3, [pc, #12]	; (7c0 <USB_DEVICE_INSTANCE_init+0x18>)
     7b4:	4798      	blx	r3
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	00000781 	.word	0x00000781
     7bc:	00001085 	.word	0x00001085
     7c0:	000006f9 	.word	0x000006f9

000007c4 <system_init>:

void system_init(void)
{
     7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7c6:	4b4a      	ldr	r3, [pc, #296]	; (8f0 <system_init+0x12c>)
     7c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ca:	22c0      	movs	r2, #192	; 0xc0
     7cc:	05d2      	lsls	r2, r2, #23
     7ce:	2504      	movs	r5, #4
     7d0:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7d2:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d4:	4b47      	ldr	r3, [pc, #284]	; (8f4 <system_init+0x130>)
     7d6:	4948      	ldr	r1, [pc, #288]	; (8f8 <system_init+0x134>)
     7d8:	6299      	str	r1, [r3, #40]	; 0x28
     7da:	20c0      	movs	r0, #192	; 0xc0
     7dc:	0600      	lsls	r0, r0, #24
     7de:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e0:	2642      	movs	r6, #66	; 0x42
     7e2:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e4:	2101      	movs	r1, #1
     7e6:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e8:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ea:	2408      	movs	r4, #8
     7ec:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ee:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f0:	4c42      	ldr	r4, [pc, #264]	; (8fc <system_init+0x138>)
     7f2:	629c      	str	r4, [r3, #40]	; 0x28
     7f4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f6:	3601      	adds	r6, #1
     7f8:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fa:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7fc:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fe:	2410      	movs	r4, #16
     800:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     802:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     804:	4c3e      	ldr	r4, [pc, #248]	; (900 <system_init+0x13c>)
     806:	629c      	str	r4, [r3, #40]	; 0x28
     808:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	3601      	adds	r6, #1
     80c:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     810:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     812:	2420      	movs	r4, #32
     814:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     816:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     818:	4c3a      	ldr	r4, [pc, #232]	; (904 <system_init+0x140>)
     81a:	629c      	str	r4, [r3, #40]	; 0x28
     81c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	3601      	adds	r6, #1
     820:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     822:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     824:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     826:	2440      	movs	r4, #64	; 0x40
     828:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82c:	4e36      	ldr	r6, [pc, #216]	; (908 <system_init+0x144>)
     82e:	629e      	str	r6, [r3, #40]	; 0x28
     830:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     832:	2746      	movs	r7, #70	; 0x46
     834:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     836:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     838:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83a:	2680      	movs	r6, #128	; 0x80
     83c:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     83e:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     840:	4e32      	ldr	r6, [pc, #200]	; (90c <system_init+0x148>)
     842:	629e      	str	r6, [r3, #40]	; 0x28
     844:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     846:	3701      	adds	r7, #1
     848:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     84a:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     84c:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     84e:	2680      	movs	r6, #128	; 0x80
     850:	0076      	lsls	r6, r6, #1
     852:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     854:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4e2e      	ldr	r6, [pc, #184]	; (910 <system_init+0x14c>)
     858:	629e      	str	r6, [r3, #40]	; 0x28
     85a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85c:	3701      	adds	r7, #1
     85e:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     860:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     862:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     864:	2680      	movs	r6, #128	; 0x80
     866:	00b6      	lsls	r6, r6, #2
     868:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     86a:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     86c:	4e29      	ldr	r6, [pc, #164]	; (914 <system_init+0x150>)
     86e:	629e      	str	r6, [r3, #40]	; 0x28
     870:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     872:	3701      	adds	r7, #1
     874:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     876:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     878:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     87a:	2680      	movs	r6, #128	; 0x80
     87c:	01f6      	lsls	r6, r6, #7
     87e:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     880:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     882:	4e25      	ldr	r6, [pc, #148]	; (918 <system_init+0x154>)
     884:	629e      	str	r6, [r3, #40]	; 0x28
     886:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     888:	264e      	movs	r6, #78	; 0x4e
     88a:	5d98      	ldrb	r0, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     88c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     88e:	5598      	strb	r0, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     890:	2080      	movs	r0, #128	; 0x80
     892:	0400      	lsls	r0, r0, #16
     894:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     896:	2680      	movs	r6, #128	; 0x80
     898:	05f6      	lsls	r6, r6, #23
     89a:	629e      	str	r6, [r3, #40]	; 0x28
     89c:	4e1f      	ldr	r6, [pc, #124]	; (91c <system_init+0x158>)
     89e:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a0:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8a2:	2057      	movs	r0, #87	; 0x57
     8a4:	5c1a      	ldrb	r2, [r3, r0]
     8a6:	43aa      	bics	r2, r5
     8a8:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8aa:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ac:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8ae:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8b0:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8b2:	313a      	adds	r1, #58	; 0x3a
     8b4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b6:	3848      	subs	r0, #72	; 0x48
     8b8:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     8ba:	3011      	adds	r0, #17
     8bc:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8be:	545a      	strb	r2, [r3, r1]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      GPIO_PIN_FUNCTION_C);

	EXTERNAL_IRQ_0_init();
     8c0:	4b17      	ldr	r3, [pc, #92]	; (920 <system_init+0x15c>)
     8c2:	4798      	blx	r3

	SPI_0_init();
     8c4:	4b17      	ldr	r3, [pc, #92]	; (924 <system_init+0x160>)
     8c6:	4798      	blx	r3

	delay_driver_init();
     8c8:	4b17      	ldr	r3, [pc, #92]	; (928 <system_init+0x164>)
     8ca:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
     8cc:	4a17      	ldr	r2, [pc, #92]	; (92c <system_init+0x168>)
     8ce:	6a13      	ldr	r3, [r2, #32]
     8d0:	431c      	orrs	r4, r3
     8d2:	6214      	str	r4, [r2, #32]
     8d4:	4a16      	ldr	r2, [pc, #88]	; (930 <system_init+0x16c>)
     8d6:	4b17      	ldr	r3, [pc, #92]	; (934 <system_init+0x170>)
     8d8:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     8da:	4b17      	ldr	r3, [pc, #92]	; (938 <system_init+0x174>)
     8dc:	4798      	blx	r3
     8de:	0002      	movs	r2, r0
     8e0:	4916      	ldr	r1, [pc, #88]	; (93c <system_init+0x178>)
     8e2:	4817      	ldr	r0, [pc, #92]	; (940 <system_init+0x17c>)
     8e4:	4b17      	ldr	r3, [pc, #92]	; (944 <system_init+0x180>)
     8e6:	4798      	blx	r3

	TIMER_0_init();

	USB_DEVICE_INSTANCE_init();
     8e8:	4b17      	ldr	r3, [pc, #92]	; (948 <system_init+0x184>)
     8ea:	4798      	blx	r3
}
     8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	000014b1 	.word	0x000014b1
     8f4:	41004400 	.word	0x41004400
     8f8:	40000004 	.word	0x40000004
     8fc:	40000008 	.word	0x40000008
     900:	40000010 	.word	0x40000010
     904:	40000020 	.word	0x40000020
     908:	40000040 	.word	0x40000040
     90c:	40000080 	.word	0x40000080
     910:	40000100 	.word	0x40000100
     914:	40000200 	.word	0x40000200
     918:	40004000 	.word	0x40004000
     91c:	c0000080 	.word	0xc0000080
     920:	0000058d 	.word	0x0000058d
     924:	000006bd 	.word	0x000006bd
     928:	000006e5 	.word	0x000006e5
     92c:	40000400 	.word	0x40000400
     930:	00004012 	.word	0x00004012
     934:	40000c00 	.word	0x40000c00
     938:	00001b7f 	.word	0x00001b7f
     93c:	42001800 	.word	0x42001800
     940:	2000055c 	.word	0x2000055c
     944:	00000ce9 	.word	0x00000ce9
     948:	000007a9 	.word	0x000007a9

0000094c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     94c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     950:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     952:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     954:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     958:	4770      	bx	lr

0000095a <atomic_leave_critical>:
     95a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     95e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     960:	f383 8810 	msr	PRIMASK, r3
}
     964:	4770      	bx	lr
	...

00000968 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     968:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <delay_init+0xc>)
     96c:	6018      	str	r0, [r3, #0]
     96e:	4b02      	ldr	r3, [pc, #8]	; (978 <delay_init+0x10>)
     970:	4798      	blx	r3
}
     972:	bd10      	pop	{r4, pc}
     974:	200001f0 	.word	0x200001f0
     978:	000019ed 	.word	0x000019ed

0000097c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     97c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     97e:	4b04      	ldr	r3, [pc, #16]	; (990 <delay_ms+0x14>)
     980:	681c      	ldr	r4, [r3, #0]
     982:	4b04      	ldr	r3, [pc, #16]	; (994 <delay_ms+0x18>)
     984:	4798      	blx	r3
     986:	0001      	movs	r1, r0
     988:	0020      	movs	r0, r4
     98a:	4b03      	ldr	r3, [pc, #12]	; (998 <delay_ms+0x1c>)
     98c:	4798      	blx	r3
}
     98e:	bd10      	pop	{r4, pc}
     990:	200001f0 	.word	0x200001f0
     994:	000014a5 	.word	0x000014a5
     998:	00001a01 	.word	0x00001a01

0000099c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     99c:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     99e:	4b0c      	ldr	r3, [pc, #48]	; (9d0 <process_ext_irq+0x34>)
     9a0:	685c      	ldr	r4, [r3, #4]
     9a2:	42a0      	cmp	r0, r4
     9a4:	d00e      	beq.n	9c4 <process_ext_irq+0x28>
     9a6:	2201      	movs	r2, #1
     9a8:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     9aa:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     9ac:	25ff      	movs	r5, #255	; 0xff
     9ae:	e003      	b.n	9b8 <process_ext_irq+0x1c>
     9b0:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     9b2:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     9b4:	085b      	lsrs	r3, r3, #1
     9b6:	d10a      	bne.n	9ce <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     9b8:	42a0      	cmp	r0, r4
     9ba:	d9f9      	bls.n	9b0 <process_ext_irq+0x14>
	while (upper >= lower) {
     9bc:	2a00      	cmp	r2, #0
     9be:	d006      	beq.n	9ce <process_ext_irq+0x32>
			lower = middle + 1;
     9c0:	0031      	movs	r1, r6
     9c2:	e7f6      	b.n	9b2 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     9c4:	4b02      	ldr	r3, [pc, #8]	; (9d0 <process_ext_irq+0x34>)
     9c6:	681b      	ldr	r3, [r3, #0]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d000      	beq.n	9ce <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     9cc:	4798      	blx	r3
		}
	}
}
     9ce:	bd70      	pop	{r4, r5, r6, pc}
     9d0:	200001f4 	.word	0x200001f4

000009d4 <ext_irq_init>:
{
     9d4:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <ext_irq_init+0x18>)
     9d8:	2201      	movs	r2, #1
     9da:	4252      	negs	r2, r2
     9dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     9de:	2200      	movs	r2, #0
     9e0:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     9e2:	4803      	ldr	r0, [pc, #12]	; (9f0 <ext_irq_init+0x1c>)
     9e4:	4b03      	ldr	r3, [pc, #12]	; (9f4 <ext_irq_init+0x20>)
     9e6:	4798      	blx	r3
}
     9e8:	bd10      	pop	{r4, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	200001f4 	.word	0x200001f4
     9f0:	0000099d 	.word	0x0000099d
     9f4:	000014e9 	.word	0x000014e9

000009f8 <ext_irq_register>:
{
     9f8:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     9fa:	4b0f      	ldr	r3, [pc, #60]	; (a38 <ext_irq_register+0x40>)
     9fc:	685b      	ldr	r3, [r3, #4]
     9fe:	4298      	cmp	r0, r3
     a00:	d008      	beq.n	a14 <ext_irq_register+0x1c>
	if (NULL == cb) {
     a02:	2900      	cmp	r1, #0
     a04:	d014      	beq.n	a30 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     a06:	4b0c      	ldr	r3, [pc, #48]	; (a38 <ext_irq_register+0x40>)
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d009      	beq.n	a22 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     a0e:	200d      	movs	r0, #13
     a10:	4240      	negs	r0, r0
     a12:	e00c      	b.n	a2e <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     a14:	4b08      	ldr	r3, [pc, #32]	; (a38 <ext_irq_register+0x40>)
     a16:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     a18:	2900      	cmp	r1, #0
     a1a:	d105      	bne.n	a28 <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <ext_irq_register+0x44>)
     a1e:	4798      	blx	r3
     a20:	e005      	b.n	a2e <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     a22:	4b05      	ldr	r3, [pc, #20]	; (a38 <ext_irq_register+0x40>)
     a24:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     a26:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     a28:	2101      	movs	r1, #1
     a2a:	4b04      	ldr	r3, [pc, #16]	; (a3c <ext_irq_register+0x44>)
     a2c:	4798      	blx	r3
}
     a2e:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     a30:	200d      	movs	r0, #13
     a32:	4240      	negs	r0, r0
     a34:	e7fb      	b.n	a2e <ext_irq_register+0x36>
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	200001f4 	.word	0x200001f4
     a3c:	00001579 	.word	0x00001579

00000a40 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a40:	b570      	push	{r4, r5, r6, lr}
     a42:	0006      	movs	r6, r0
     a44:	000c      	movs	r4, r1
     a46:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     a48:	2800      	cmp	r0, #0
     a4a:	d00d      	beq.n	a68 <io_write+0x28>
     a4c:	0008      	movs	r0, r1
     a4e:	1e43      	subs	r3, r0, #1
     a50:	4198      	sbcs	r0, r3
     a52:	b2c0      	uxtb	r0, r0
     a54:	2234      	movs	r2, #52	; 0x34
     a56:	4905      	ldr	r1, [pc, #20]	; (a6c <io_write+0x2c>)
     a58:	4b05      	ldr	r3, [pc, #20]	; (a70 <io_write+0x30>)
     a5a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     a5c:	6833      	ldr	r3, [r6, #0]
     a5e:	002a      	movs	r2, r5
     a60:	0021      	movs	r1, r4
     a62:	0030      	movs	r0, r6
     a64:	4798      	blx	r3
}
     a66:	bd70      	pop	{r4, r5, r6, pc}
     a68:	2000      	movs	r0, #0
     a6a:	e7f3      	b.n	a54 <io_write+0x14>
     a6c:	00003c58 	.word	0x00003c58
     a70:	000013d9 	.word	0x000013d9

00000a74 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	0006      	movs	r6, r0
     a78:	000c      	movs	r4, r1
     a7a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     a7c:	2800      	cmp	r0, #0
     a7e:	d00d      	beq.n	a9c <io_read+0x28>
     a80:	0008      	movs	r0, r1
     a82:	1e43      	subs	r3, r0, #1
     a84:	4198      	sbcs	r0, r3
     a86:	b2c0      	uxtb	r0, r0
     a88:	223d      	movs	r2, #61	; 0x3d
     a8a:	4905      	ldr	r1, [pc, #20]	; (aa0 <io_read+0x2c>)
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <io_read+0x30>)
     a8e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     a90:	6873      	ldr	r3, [r6, #4]
     a92:	002a      	movs	r2, r5
     a94:	0021      	movs	r1, r4
     a96:	0030      	movs	r0, r6
     a98:	4798      	blx	r3
}
     a9a:	bd70      	pop	{r4, r5, r6, pc}
     a9c:	2000      	movs	r0, #0
     a9e:	e7f3      	b.n	a88 <io_read+0x14>
     aa0:	00003c58 	.word	0x00003c58
     aa4:	000013d9 	.word	0x000013d9

00000aa8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     aa8:	b570      	push	{r4, r5, r6, lr}
     aaa:	0004      	movs	r4, r0
     aac:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     aae:	2800      	cmp	r0, #0
     ab0:	d016      	beq.n	ae0 <spi_m_sync_init+0x38>
     ab2:	0008      	movs	r0, r1
     ab4:	1e43      	subs	r3, r0, #1
     ab6:	4198      	sbcs	r0, r3
     ab8:	b2c0      	uxtb	r0, r0
     aba:	2240      	movs	r2, #64	; 0x40
     abc:	4909      	ldr	r1, [pc, #36]	; (ae4 <spi_m_sync_init+0x3c>)
     abe:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <spi_m_sync_init+0x40>)
     ac0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     ac2:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     ac4:	1d20      	adds	r0, r4, #4
     ac6:	0029      	movs	r1, r5
     ac8:	4b08      	ldr	r3, [pc, #32]	; (aec <spi_m_sync_init+0x44>)
     aca:	4798      	blx	r3

	if (rc < 0) {
     acc:	2800      	cmp	r0, #0
     ace:	db06      	blt.n	ade <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     ad0:	4b07      	ldr	r3, [pc, #28]	; (af0 <spi_m_sync_init+0x48>)
     ad2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     ad4:	4b07      	ldr	r3, [pc, #28]	; (af4 <spi_m_sync_init+0x4c>)
     ad6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     ad8:	4b07      	ldr	r3, [pc, #28]	; (af8 <spi_m_sync_init+0x50>)
     ada:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     adc:	2000      	movs	r0, #0
}
     ade:	bd70      	pop	{r4, r5, r6, pc}
     ae0:	2000      	movs	r0, #0
     ae2:	e7ea      	b.n	aba <spi_m_sync_init+0x12>
     ae4:	00003c6c 	.word	0x00003c6c
     ae8:	000013d9 	.word	0x000013d9
     aec:	00001705 	.word	0x00001705
     af0:	ffff8000 	.word	0xffff8000
     af4:	00000b81 	.word	0x00000b81
     af8:	00000b45 	.word	0x00000b45

00000afc <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     afc:	b530      	push	{r4, r5, lr}
     afe:	b087      	sub	sp, #28
     b00:	0004      	movs	r4, r0
     b02:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     b04:	2800      	cmp	r0, #0
     b06:	d014      	beq.n	b32 <spi_m_sync_transfer+0x36>
     b08:	0008      	movs	r0, r1
     b0a:	1e43      	subs	r3, r0, #1
     b0c:	4198      	sbcs	r0, r3
     b0e:	b2c0      	uxtb	r0, r0
     b10:	22b3      	movs	r2, #179	; 0xb3
     b12:	4909      	ldr	r1, [pc, #36]	; (b38 <spi_m_sync_transfer+0x3c>)
     b14:	4b09      	ldr	r3, [pc, #36]	; (b3c <spi_m_sync_transfer+0x40>)
     b16:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     b18:	682b      	ldr	r3, [r5, #0]
     b1a:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     b1c:	686b      	ldr	r3, [r5, #4]
     b1e:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     b20:	68ab      	ldr	r3, [r5, #8]
     b22:	9301      	str	r3, [sp, #4]
     b24:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     b26:	1d20      	adds	r0, r4, #4
     b28:	a903      	add	r1, sp, #12
     b2a:	4b05      	ldr	r3, [pc, #20]	; (b40 <spi_m_sync_transfer+0x44>)
     b2c:	4798      	blx	r3
}
     b2e:	b007      	add	sp, #28
     b30:	bd30      	pop	{r4, r5, pc}
     b32:	2000      	movs	r0, #0
     b34:	e7ec      	b.n	b10 <spi_m_sync_transfer+0x14>
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	00003c6c 	.word	0x00003c6c
     b3c:	000013d9 	.word	0x000013d9
     b40:	000017fd 	.word	0x000017fd

00000b44 <_spi_m_sync_io_write>:
{
     b44:	b570      	push	{r4, r5, r6, lr}
     b46:	b084      	sub	sp, #16
     b48:	0004      	movs	r4, r0
     b4a:	000e      	movs	r6, r1
     b4c:	0015      	movs	r5, r2
	ASSERT(io);
     b4e:	1e43      	subs	r3, r0, #1
     b50:	4198      	sbcs	r0, r3
     b52:	b2c0      	uxtb	r0, r0
     b54:	22a3      	movs	r2, #163	; 0xa3
     b56:	4907      	ldr	r1, [pc, #28]	; (b74 <_spi_m_sync_io_write+0x30>)
     b58:	4b07      	ldr	r3, [pc, #28]	; (b78 <_spi_m_sync_io_write+0x34>)
     b5a:	4798      	blx	r3
	xfer.rxbuf = 0;
     b5c:	2300      	movs	r3, #0
     b5e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     b60:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     b62:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     b64:	0020      	movs	r0, r4
     b66:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     b68:	a901      	add	r1, sp, #4
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <_spi_m_sync_io_write+0x38>)
     b6c:	4798      	blx	r3
}
     b6e:	b004      	add	sp, #16
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	00003c6c 	.word	0x00003c6c
     b78:	000013d9 	.word	0x000013d9
     b7c:	00000afd 	.word	0x00000afd

00000b80 <_spi_m_sync_io_read>:
{
     b80:	b570      	push	{r4, r5, r6, lr}
     b82:	b084      	sub	sp, #16
     b84:	0004      	movs	r4, r0
     b86:	000e      	movs	r6, r1
     b88:	0015      	movs	r5, r2
	ASSERT(io);
     b8a:	1e43      	subs	r3, r0, #1
     b8c:	4198      	sbcs	r0, r3
     b8e:	b2c0      	uxtb	r0, r0
     b90:	2287      	movs	r2, #135	; 0x87
     b92:	4907      	ldr	r1, [pc, #28]	; (bb0 <_spi_m_sync_io_read+0x30>)
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <_spi_m_sync_io_read+0x34>)
     b96:	4798      	blx	r3
	xfer.rxbuf = buf;
     b98:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     b9a:	2300      	movs	r3, #0
     b9c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     b9e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     ba0:	0020      	movs	r0, r4
     ba2:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     ba4:	a901      	add	r1, sp, #4
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <_spi_m_sync_io_read+0x38>)
     ba8:	4798      	blx	r3
}
     baa:	b004      	add	sp, #16
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00003c6c 	.word	0x00003c6c
     bb4:	000013d9 	.word	0x000013d9
     bb8:	00000afd 	.word	0x00000afd

00000bbc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	0004      	movs	r4, r0
     bc0:	000d      	movs	r5, r1
	ASSERT(spi && io);
     bc2:	2800      	cmp	r0, #0
     bc4:	d00b      	beq.n	bde <spi_m_sync_get_io_descriptor+0x22>
     bc6:	0008      	movs	r0, r1
     bc8:	1e43      	subs	r3, r0, #1
     bca:	4198      	sbcs	r0, r3
     bcc:	b2c0      	uxtb	r0, r0
     bce:	22bd      	movs	r2, #189	; 0xbd
     bd0:	4904      	ldr	r1, [pc, #16]	; (be4 <spi_m_sync_get_io_descriptor+0x28>)
     bd2:	4b05      	ldr	r3, [pc, #20]	; (be8 <spi_m_sync_get_io_descriptor+0x2c>)
     bd4:	4798      	blx	r3
	*io = &spi->io;
     bd6:	340c      	adds	r4, #12
     bd8:	602c      	str	r4, [r5, #0]
	return 0;
}
     bda:	2000      	movs	r0, #0
     bdc:	bd70      	pop	{r4, r5, r6, pc}
     bde:	2000      	movs	r0, #0
     be0:	e7f5      	b.n	bce <spi_m_sync_get_io_descriptor+0x12>
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00003c6c 	.word	0x00003c6c
     be8:	000013d9 	.word	0x000013d9

00000bec <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	46ce      	mov	lr, r9
     bf0:	4647      	mov	r7, r8
     bf2:	b580      	push	{r7, lr}
     bf4:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bf6:	6803      	ldr	r3, [r0, #0]
     bf8:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bfa:	2b00      	cmp	r3, #0
     bfc:	d005      	beq.n	c0a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bfe:	688e      	ldr	r6, [r1, #8]
     c00:	001c      	movs	r4, r3
     c02:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c04:	2701      	movs	r7, #1
     c06:	1abf      	subs	r7, r7, r2
     c08:	e00d      	b.n	c26 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     c0a:	4b12      	ldr	r3, [pc, #72]	; (c54 <timer_add_timer_task+0x68>)
     c0c:	4798      	blx	r3
		return;
     c0e:	e018      	b.n	c42 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c10:	18fb      	adds	r3, r7, r3
     c12:	68a0      	ldr	r0, [r4, #8]
     c14:	4680      	mov	r8, r0
     c16:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     c18:	42b3      	cmp	r3, r6
     c1a:	d20c      	bcs.n	c36 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     c1c:	6823      	ldr	r3, [r4, #0]
     c1e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c20:	2b00      	cmp	r3, #0
     c22:	d00b      	beq.n	c3c <timer_add_timer_task+0x50>
     c24:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     c26:	6863      	ldr	r3, [r4, #4]
     c28:	4293      	cmp	r3, r2
     c2a:	d8f1      	bhi.n	c10 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     c2c:	68a0      	ldr	r0, [r4, #8]
     c2e:	4680      	mov	r8, r0
     c30:	4443      	add	r3, r8
     c32:	1a9b      	subs	r3, r3, r2
     c34:	e7f0      	b.n	c18 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     c36:	45a4      	cmp	ip, r4
     c38:	d007      	beq.n	c4a <timer_add_timer_task+0x5e>
     c3a:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c3c:	0020      	movs	r0, r4
     c3e:	4b06      	ldr	r3, [pc, #24]	; (c58 <timer_add_timer_task+0x6c>)
     c40:	4798      	blx	r3
	}
}
     c42:	bc0c      	pop	{r2, r3}
     c44:	4690      	mov	r8, r2
     c46:	4699      	mov	r9, r3
     c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c4a:	4648      	mov	r0, r9
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <timer_add_timer_task+0x68>)
     c4e:	4798      	blx	r3
     c50:	e7f7      	b.n	c42 <timer_add_timer_task+0x56>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00001405 	.word	0x00001405
     c58:	00001431 	.word	0x00001431

00000c5c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c5e:	46c6      	mov	lr, r8
     c60:	b500      	push	{lr}
     c62:	b082      	sub	sp, #8
     c64:	0007      	movs	r7, r0
	return (void *)list->head;
     c66:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c68:	6903      	ldr	r3, [r0, #16]
     c6a:	3301      	adds	r3, #1
     c6c:	4698      	mov	r8, r3
     c6e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c70:	7e03      	ldrb	r3, [r0, #24]
     c72:	07db      	lsls	r3, r3, #31
     c74:	d411      	bmi.n	c9a <timer_process_counted+0x3e>
     c76:	7e03      	ldrb	r3, [r0, #24]
     c78:	079b      	lsls	r3, r3, #30
     c7a:	d40e      	bmi.n	c9a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c7c:	2c00      	cmp	r4, #0
     c7e:	d010      	beq.n	ca2 <timer_process_counted+0x46>
     c80:	4643      	mov	r3, r8
     c82:	6862      	ldr	r2, [r4, #4]
     c84:	1a9b      	subs	r3, r3, r2
     c86:	68a2      	ldr	r2, [r4, #8]
     c88:	4293      	cmp	r3, r2
     c8a:	d30a      	bcc.n	ca2 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c8c:	2314      	movs	r3, #20
     c8e:	469c      	mov	ip, r3
     c90:	4484      	add	ip, r0
     c92:	4663      	mov	r3, ip
     c94:	9301      	str	r3, [sp, #4]
     c96:	4e12      	ldr	r6, [pc, #72]	; (ce0 <timer_process_counted+0x84>)
     c98:	e014      	b.n	cc4 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c9a:	7e3b      	ldrb	r3, [r7, #24]
     c9c:	2202      	movs	r2, #2
     c9e:	4313      	orrs	r3, r2
     ca0:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     ca2:	b002      	add	sp, #8
     ca4:	bc04      	pop	{r2}
     ca6:	4690      	mov	r8, r2
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     caa:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     cac:	68e3      	ldr	r3, [r4, #12]
     cae:	0020      	movs	r0, r4
     cb0:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     cb2:	2d00      	cmp	r5, #0
     cb4:	d0f5      	beq.n	ca2 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     cb6:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     cb8:	4643      	mov	r3, r8
     cba:	686a      	ldr	r2, [r5, #4]
     cbc:	1a9b      	subs	r3, r3, r2
     cbe:	68aa      	ldr	r2, [r5, #8]
     cc0:	4293      	cmp	r3, r2
     cc2:	d3ee      	bcc.n	ca2 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     cc4:	9801      	ldr	r0, [sp, #4]
     cc6:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     cc8:	7c23      	ldrb	r3, [r4, #16]
     cca:	2b01      	cmp	r3, #1
     ccc:	d1ed      	bne.n	caa <timer_process_counted+0x4e>
			tmp->time_label = time;
     cce:	4643      	mov	r3, r8
     cd0:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     cd2:	4642      	mov	r2, r8
     cd4:	0021      	movs	r1, r4
     cd6:	9801      	ldr	r0, [sp, #4]
     cd8:	4b02      	ldr	r3, [pc, #8]	; (ce4 <timer_process_counted+0x88>)
     cda:	4798      	blx	r3
     cdc:	e7e5      	b.n	caa <timer_process_counted+0x4e>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00001479 	.word	0x00001479
     ce4:	00000bed 	.word	0x00000bed

00000ce8 <timer_init>:
{
     ce8:	b570      	push	{r4, r5, r6, lr}
     cea:	0005      	movs	r5, r0
     cec:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     cee:	2800      	cmp	r0, #0
     cf0:	d011      	beq.n	d16 <timer_init+0x2e>
     cf2:	0008      	movs	r0, r1
     cf4:	1e43      	subs	r3, r0, #1
     cf6:	4198      	sbcs	r0, r3
     cf8:	b2c0      	uxtb	r0, r0
     cfa:	223b      	movs	r2, #59	; 0x3b
     cfc:	4907      	ldr	r1, [pc, #28]	; (d1c <timer_init+0x34>)
     cfe:	4b08      	ldr	r3, [pc, #32]	; (d20 <timer_init+0x38>)
     d00:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     d02:	0021      	movs	r1, r4
     d04:	0028      	movs	r0, r5
     d06:	4b07      	ldr	r3, [pc, #28]	; (d24 <timer_init+0x3c>)
     d08:	4798      	blx	r3
	descr->time                           = 0;
     d0a:	2300      	movs	r3, #0
     d0c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     d0e:	4b06      	ldr	r3, [pc, #24]	; (d28 <timer_init+0x40>)
     d10:	602b      	str	r3, [r5, #0]
}
     d12:	2000      	movs	r0, #0
     d14:	bd70      	pop	{r4, r5, r6, pc}
     d16:	2000      	movs	r0, #0
     d18:	e7ef      	b.n	cfa <timer_init+0x12>
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	00003c88 	.word	0x00003c88
     d20:	000013d9 	.word	0x000013d9
     d24:	00001a55 	.word	0x00001a55
     d28:	00000c5d 	.word	0x00000c5d

00000d2c <timer_start>:
{
     d2c:	b510      	push	{r4, lr}
     d2e:	0004      	movs	r4, r0
	ASSERT(descr);
     d30:	1e43      	subs	r3, r0, #1
     d32:	4198      	sbcs	r0, r3
     d34:	b2c0      	uxtb	r0, r0
     d36:	2253      	movs	r2, #83	; 0x53
     d38:	4907      	ldr	r1, [pc, #28]	; (d58 <timer_start+0x2c>)
     d3a:	4b08      	ldr	r3, [pc, #32]	; (d5c <timer_start+0x30>)
     d3c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     d3e:	0020      	movs	r0, r4
     d40:	4b07      	ldr	r3, [pc, #28]	; (d60 <timer_start+0x34>)
     d42:	4798      	blx	r3
     d44:	2800      	cmp	r0, #0
     d46:	d104      	bne.n	d52 <timer_start+0x26>
	_timer_start(&descr->device);
     d48:	0020      	movs	r0, r4
     d4a:	4b06      	ldr	r3, [pc, #24]	; (d64 <timer_start+0x38>)
     d4c:	4798      	blx	r3
	return ERR_NONE;
     d4e:	2000      	movs	r0, #0
}
     d50:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d52:	2011      	movs	r0, #17
     d54:	4240      	negs	r0, r0
     d56:	e7fb      	b.n	d50 <timer_start+0x24>
     d58:	00003c88 	.word	0x00003c88
     d5c:	000013d9 	.word	0x000013d9
     d60:	00001b75 	.word	0x00001b75
     d64:	00001b69 	.word	0x00001b69

00000d68 <timer_add_task>:
{
     d68:	b570      	push	{r4, r5, r6, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	0004      	movs	r4, r0
     d6e:	000d      	movs	r5, r1
	ASSERT(descr && task);
     d70:	2800      	cmp	r0, #0
     d72:	d024      	beq.n	dbe <timer_add_task+0x56>
     d74:	0008      	movs	r0, r1
     d76:	1e43      	subs	r3, r0, #1
     d78:	4198      	sbcs	r0, r3
     d7a:	b2c0      	uxtb	r0, r0
     d7c:	227a      	movs	r2, #122	; 0x7a
     d7e:	491e      	ldr	r1, [pc, #120]	; (df8 <timer_add_task+0x90>)
     d80:	4b1e      	ldr	r3, [pc, #120]	; (dfc <timer_add_task+0x94>)
     d82:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d84:	7e23      	ldrb	r3, [r4, #24]
     d86:	2201      	movs	r2, #1
     d88:	4313      	orrs	r3, r2
     d8a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     d8c:	0026      	movs	r6, r4
     d8e:	3614      	adds	r6, #20
     d90:	0029      	movs	r1, r5
     d92:	0030      	movs	r0, r6
     d94:	4b1a      	ldr	r3, [pc, #104]	; (e00 <timer_add_task+0x98>)
     d96:	4798      	blx	r3
     d98:	2800      	cmp	r0, #0
     d9a:	d112      	bne.n	dc2 <timer_add_task+0x5a>
	task->time_label = descr->time;
     d9c:	6923      	ldr	r3, [r4, #16]
     d9e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     da0:	6922      	ldr	r2, [r4, #16]
     da2:	0029      	movs	r1, r5
     da4:	0030      	movs	r0, r6
     da6:	4b17      	ldr	r3, [pc, #92]	; (e04 <timer_add_task+0x9c>)
     da8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     daa:	7e23      	ldrb	r3, [r4, #24]
     dac:	2201      	movs	r2, #1
     dae:	4393      	bics	r3, r2
     db0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     db2:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     db4:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     db6:	079b      	lsls	r3, r3, #30
     db8:	d40f      	bmi.n	dda <timer_add_task+0x72>
}
     dba:	b002      	add	sp, #8
     dbc:	bd70      	pop	{r4, r5, r6, pc}
     dbe:	2000      	movs	r0, #0
     dc0:	e7dc      	b.n	d7c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     dc2:	7e23      	ldrb	r3, [r4, #24]
     dc4:	2201      	movs	r2, #1
     dc6:	4393      	bics	r3, r2
     dc8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     dca:	327e      	adds	r2, #126	; 0x7e
     dcc:	490a      	ldr	r1, [pc, #40]	; (df8 <timer_add_task+0x90>)
     dce:	2000      	movs	r0, #0
     dd0:	4b0a      	ldr	r3, [pc, #40]	; (dfc <timer_add_task+0x94>)
     dd2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     dd4:	2012      	movs	r0, #18
     dd6:	4240      	negs	r0, r0
     dd8:	e7ef      	b.n	dba <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     dda:	a801      	add	r0, sp, #4
     ddc:	4b0a      	ldr	r3, [pc, #40]	; (e08 <timer_add_task+0xa0>)
     dde:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     de0:	7e23      	ldrb	r3, [r4, #24]
     de2:	2202      	movs	r2, #2
     de4:	4393      	bics	r3, r2
     de6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     de8:	0020      	movs	r0, r4
     dea:	4b08      	ldr	r3, [pc, #32]	; (e0c <timer_add_task+0xa4>)
     dec:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     dee:	a801      	add	r0, sp, #4
     df0:	4b07      	ldr	r3, [pc, #28]	; (e10 <timer_add_task+0xa8>)
     df2:	4798      	blx	r3
	return ERR_NONE;
     df4:	2000      	movs	r0, #0
     df6:	e7e0      	b.n	dba <timer_add_task+0x52>
     df8:	00003c88 	.word	0x00003c88
     dfc:	000013d9 	.word	0x000013d9
     e00:	000013e1 	.word	0x000013e1
     e04:	00000bed 	.word	0x00000bed
     e08:	0000094d 	.word	0x0000094d
     e0c:	00001b85 	.word	0x00001b85
     e10:	0000095b 	.word	0x0000095b

00000e14 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     e14:	b5f0      	push	{r4, r5, r6, r7, lr}
     e16:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e18:	4b0e      	ldr	r3, [pc, #56]	; (e54 <_usb_d_find_ep+0x40>)
     e1a:	785a      	ldrb	r2, [r3, #1]
     e1c:	4290      	cmp	r0, r2
     e1e:	d017      	beq.n	e50 <_usb_d_find_ep+0x3c>
     e20:	2300      	movs	r3, #0
     e22:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e24:	4f0b      	ldr	r7, [pc, #44]	; (e54 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e26:	260f      	movs	r6, #15
     e28:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e2a:	003d      	movs	r5, r7
     e2c:	e008      	b.n	e40 <_usb_d_find_ep+0x2c>
     e2e:	3001      	adds	r0, #1
     e30:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e32:	2804      	cmp	r0, #4
     e34:	d00a      	beq.n	e4c <_usb_d_find_ep+0x38>
     e36:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     e38:	18ea      	adds	r2, r5, r3
     e3a:	7852      	ldrb	r2, [r2, #1]
     e3c:	42a2      	cmp	r2, r4
     e3e:	d006      	beq.n	e4e <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     e40:	5dd9      	ldrb	r1, [r3, r7]
     e42:	2900      	cmp	r1, #0
     e44:	d1f3      	bne.n	e2e <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     e46:	4296      	cmp	r6, r2
     e48:	d1f1      	bne.n	e2e <_usb_d_find_ep+0x1a>
     e4a:	e000      	b.n	e4e <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     e4c:	3805      	subs	r0, #5
}
     e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     e50:	2000      	movs	r0, #0
     e52:	e7fc      	b.n	e4e <_usb_d_find_ep+0x3a>
     e54:	200001fc 	.word	0x200001fc

00000e58 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     e58:	2000      	movs	r0, #0
     e5a:	4770      	bx	lr

00000e5c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     e5c:	b570      	push	{r4, r5, r6, lr}
     e5e:	0004      	movs	r4, r0
     e60:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     e62:	4b0a      	ldr	r3, [pc, #40]	; (e8c <usb_d_cb_trans_more+0x30>)
     e64:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     e66:	0142      	lsls	r2, r0, #5
     e68:	4b09      	ldr	r3, [pc, #36]	; (e90 <usb_d_cb_trans_more+0x34>)
     e6a:	189b      	adds	r3, r3, r2
     e6c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     e6e:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     e70:	2a03      	cmp	r2, #3
     e72:	d001      	beq.n	e78 <usb_d_cb_trans_more+0x1c>
}
     e74:	0018      	movs	r0, r3
     e76:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     e78:	0140      	lsls	r0, r0, #5
     e7a:	4b05      	ldr	r3, [pc, #20]	; (e90 <usb_d_cb_trans_more+0x34>)
     e7c:	1818      	adds	r0, r3, r0
     e7e:	6983      	ldr	r3, [r0, #24]
     e80:	0029      	movs	r1, r5
     e82:	0020      	movs	r0, r4
     e84:	4798      	blx	r3
     e86:	0003      	movs	r3, r0
     e88:	e7f4      	b.n	e74 <usb_d_cb_trans_more+0x18>
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00000e15 	.word	0x00000e15
     e90:	200001fc 	.word	0x200001fc

00000e94 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     e94:	b5f0      	push	{r4, r5, r6, r7, lr}
     e96:	b085      	sub	sp, #20
     e98:	0005      	movs	r5, r0
     e9a:	000f      	movs	r7, r1
     e9c:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e9e:	4b51      	ldr	r3, [pc, #324]	; (fe4 <_usb_d_cb_trans_done+0x150>)
     ea0:	4798      	blx	r3
     ea2:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     ea4:	2f00      	cmp	r7, #0
     ea6:	d162      	bne.n	f6e <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     ea8:	4b4f      	ldr	r3, [pc, #316]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     eaa:	0142      	lsls	r2, r0, #5
     eac:	1899      	adds	r1, r3, r2
     eae:	2000      	movs	r0, #0
     eb0:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     eb2:	5cd3      	ldrb	r3, [r2, r3]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d00e      	beq.n	ed6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     eb8:	0162      	lsls	r2, r4, #5
     eba:	4b4b      	ldr	r3, [pc, #300]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     ebc:	189b      	adds	r3, r3, r2
     ebe:	2201      	movs	r2, #1
     ec0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     ec2:	0164      	lsls	r4, r4, #5
     ec4:	4b48      	ldr	r3, [pc, #288]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     ec6:	191c      	adds	r4, r3, r4
     ec8:	78e1      	ldrb	r1, [r4, #3]
     eca:	69e3      	ldr	r3, [r4, #28]
     ecc:	0032      	movs	r2, r6
     ece:	0028      	movs	r0, r5
     ed0:	4798      	blx	r3
}
     ed2:	b005      	add	sp, #20
     ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     ed6:	788b      	ldrb	r3, [r1, #2]
     ed8:	2b03      	cmp	r3, #3
     eda:	d00c      	beq.n	ef6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     edc:	4b42      	ldr	r3, [pc, #264]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     ede:	0162      	lsls	r2, r4, #5
     ee0:	320c      	adds	r2, #12
     ee2:	189a      	adds	r2, r3, r2
     ee4:	0164      	lsls	r4, r4, #5
     ee6:	191c      	adds	r4, r3, r4
     ee8:	7860      	ldrb	r0, [r4, #1]
     eea:	2100      	movs	r1, #0
     eec:	69e3      	ldr	r3, [r4, #28]
     eee:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ef0:	2302      	movs	r3, #2
     ef2:	70a3      	strb	r3, [r4, #2]
     ef4:	e7ed      	b.n	ed2 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     ef6:	4a3c      	ldr	r2, [pc, #240]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     ef8:	000b      	movs	r3, r1
     efa:	250c      	movs	r5, #12
     efc:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     efe:	0161      	lsls	r1, r4, #5
     f00:	310c      	adds	r1, #12
     f02:	1852      	adds	r2, r2, r1
     f04:	7858      	ldrb	r0, [r3, #1]
     f06:	69db      	ldr	r3, [r3, #28]
     f08:	2101      	movs	r1, #1
     f0a:	4798      	blx	r3
		if (err) {
     f0c:	2800      	cmp	r0, #0
     f0e:	d017      	beq.n	f40 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     f10:	0162      	lsls	r2, r4, #5
     f12:	4b35      	ldr	r3, [pc, #212]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f14:	189b      	adds	r3, r3, r2
     f16:	2205      	movs	r2, #5
     f18:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     f1a:	3a03      	subs	r2, #3
     f1c:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     f1e:	2d00      	cmp	r5, #0
     f20:	db09      	blt.n	f36 <_usb_d_cb_trans_done+0xa2>
     f22:	0164      	lsls	r4, r4, #5
     f24:	4b30      	ldr	r3, [pc, #192]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f26:	191c      	adds	r4, r3, r4
     f28:	7860      	ldrb	r0, [r4, #1]
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	4318      	orrs	r0, r3
     f2e:	2101      	movs	r1, #1
     f30:	4b2e      	ldr	r3, [pc, #184]	; (fec <_usb_d_cb_trans_done+0x158>)
     f32:	4798      	blx	r3
     f34:	e7cd      	b.n	ed2 <_usb_d_cb_trans_done+0x3e>
     f36:	0164      	lsls	r4, r4, #5
     f38:	4b2b      	ldr	r3, [pc, #172]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f3a:	191c      	adds	r4, r3, r4
     f3c:	7860      	ldrb	r0, [r4, #1]
     f3e:	e7f6      	b.n	f2e <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     f40:	0164      	lsls	r4, r4, #5
     f42:	4b29      	ldr	r3, [pc, #164]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f44:	191c      	adds	r4, r3, r4
     f46:	2304      	movs	r3, #4
     f48:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     f4a:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     f4c:	2200      	movs	r2, #0
     f4e:	9201      	str	r2, [sp, #4]
     f50:	9202      	str	r2, [sp, #8]
     f52:	2d00      	cmp	r5, #0
     f54:	db08      	blt.n	f68 <_usb_d_cb_trans_done+0xd4>
     f56:	3280      	adds	r2, #128	; 0x80
     f58:	4313      	orrs	r3, r2
     f5a:	a801      	add	r0, sp, #4
     f5c:	7203      	strb	r3, [r0, #8]
     f5e:	2301      	movs	r3, #1
     f60:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     f62:	4b23      	ldr	r3, [pc, #140]	; (ff0 <_usb_d_cb_trans_done+0x15c>)
     f64:	4798      	blx	r3
     f66:	e7b4      	b.n	ed2 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     f68:	220f      	movs	r2, #15
     f6a:	4013      	ands	r3, r2
     f6c:	e7f5      	b.n	f5a <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     f6e:	2f01      	cmp	r7, #1
     f70:	d00a      	beq.n	f88 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     f72:	2f02      	cmp	r7, #2
     f74:	d01d      	beq.n	fb2 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     f76:	2f03      	cmp	r7, #3
     f78:	d02c      	beq.n	fd4 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     f7a:	0142      	lsls	r2, r0, #5
     f7c:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f7e:	189b      	adds	r3, r3, r2
     f80:	2206      	movs	r2, #6
     f82:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     f84:	70da      	strb	r2, [r3, #3]
     f86:	e79c      	b.n	ec2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     f88:	4b17      	ldr	r3, [pc, #92]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f8a:	0142      	lsls	r2, r0, #5
     f8c:	1899      	adds	r1, r3, r2
     f8e:	2002      	movs	r0, #2
     f90:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     f92:	5cd3      	ldrb	r3, [r2, r3]
     f94:	2b00      	cmp	r3, #0
     f96:	d005      	beq.n	fa4 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     f98:	0162      	lsls	r2, r4, #5
     f9a:	4b13      	ldr	r3, [pc, #76]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     f9c:	189b      	adds	r3, r3, r2
     f9e:	2205      	movs	r2, #5
     fa0:	709a      	strb	r2, [r3, #2]
     fa2:	e78e      	b.n	ec2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     fa4:	2202      	movs	r2, #2
     fa6:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     fa8:	2100      	movs	r1, #0
     faa:	0028      	movs	r0, r5
     fac:	4b0f      	ldr	r3, [pc, #60]	; (fec <_usb_d_cb_trans_done+0x158>)
     fae:	4798      	blx	r3
     fb0:	e787      	b.n	ec2 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     fb2:	4b0d      	ldr	r3, [pc, #52]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     fb4:	0142      	lsls	r2, r0, #5
     fb6:	1899      	adds	r1, r3, r2
     fb8:	2004      	movs	r0, #4
     fba:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     fbc:	5cd3      	ldrb	r3, [r2, r3]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d005      	beq.n	fce <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     fc2:	0162      	lsls	r2, r4, #5
     fc4:	4b08      	ldr	r3, [pc, #32]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     fc6:	189b      	adds	r3, r3, r2
     fc8:	2201      	movs	r2, #1
     fca:	709a      	strb	r2, [r3, #2]
     fcc:	e779      	b.n	ec2 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     fce:	2302      	movs	r3, #2
     fd0:	708b      	strb	r3, [r1, #2]
			return;
     fd2:	e77e      	b.n	ed2 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     fd4:	0142      	lsls	r2, r0, #5
     fd6:	4b04      	ldr	r3, [pc, #16]	; (fe8 <_usb_d_cb_trans_done+0x154>)
     fd8:	189b      	adds	r3, r3, r2
     fda:	2200      	movs	r2, #0
     fdc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     fde:	3205      	adds	r2, #5
     fe0:	70da      	strb	r2, [r3, #3]
     fe2:	e76e      	b.n	ec2 <_usb_d_cb_trans_done+0x2e>
     fe4:	00000e15 	.word	0x00000e15
     fe8:	200001fc 	.word	0x200001fc
     fec:	00002859 	.word	0x00002859
     ff0:	00002a2d 	.word	0x00002a2d

00000ff4 <usb_d_cb_trans_setup>:
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	46c6      	mov	lr, r8
     ff8:	b500      	push	{lr}
     ffa:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ffc:	4b1d      	ldr	r3, [pc, #116]	; (1074 <usb_d_cb_trans_setup+0x80>)
     ffe:	4798      	blx	r3
    1000:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1002:	0145      	lsls	r5, r0, #5
    1004:	350c      	adds	r5, #12
    1006:	4b1c      	ldr	r3, [pc, #112]	; (1078 <usb_d_cb_trans_setup+0x84>)
    1008:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    100a:	0029      	movs	r1, r5
    100c:	0020      	movs	r0, r4
    100e:	4b1b      	ldr	r3, [pc, #108]	; (107c <usb_d_cb_trans_setup+0x88>)
    1010:	4798      	blx	r3
	if (n != 8) {
    1012:	b2c0      	uxtb	r0, r0
    1014:	2808      	cmp	r0, #8
    1016:	d00a      	beq.n	102e <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1018:	2101      	movs	r1, #1
    101a:	0020      	movs	r0, r4
    101c:	4d18      	ldr	r5, [pc, #96]	; (1080 <usb_d_cb_trans_setup+0x8c>)
    101e:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1020:	2080      	movs	r0, #128	; 0x80
    1022:	4320      	orrs	r0, r4
    1024:	2101      	movs	r1, #1
    1026:	47a8      	blx	r5
}
    1028:	bc04      	pop	{r2}
    102a:	4690      	mov	r8, r2
    102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    102e:	2100      	movs	r1, #0
    1030:	0020      	movs	r0, r4
    1032:	4b13      	ldr	r3, [pc, #76]	; (1080 <usb_d_cb_trans_setup+0x8c>)
    1034:	4698      	mov	r8, r3
    1036:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1038:	2780      	movs	r7, #128	; 0x80
    103a:	4327      	orrs	r7, r4
    103c:	2100      	movs	r1, #0
    103e:	0038      	movs	r0, r7
    1040:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1042:	0172      	lsls	r2, r6, #5
    1044:	4b0c      	ldr	r3, [pc, #48]	; (1078 <usb_d_cb_trans_setup+0x84>)
    1046:	189b      	adds	r3, r3, r2
    1048:	2201      	movs	r2, #1
    104a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    104c:	695b      	ldr	r3, [r3, #20]
    104e:	0029      	movs	r1, r5
    1050:	0020      	movs	r0, r4
    1052:	4798      	blx	r3
    1054:	2800      	cmp	r0, #0
    1056:	d1e7      	bne.n	1028 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1058:	0176      	lsls	r6, r6, #5
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <usb_d_cb_trans_setup+0x84>)
    105c:	199e      	adds	r6, r3, r6
    105e:	2305      	movs	r3, #5
    1060:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1062:	2101      	movs	r1, #1
    1064:	0020      	movs	r0, r4
    1066:	4c06      	ldr	r4, [pc, #24]	; (1080 <usb_d_cb_trans_setup+0x8c>)
    1068:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    106a:	2101      	movs	r1, #1
    106c:	0038      	movs	r0, r7
    106e:	47a0      	blx	r4
    1070:	e7da      	b.n	1028 <usb_d_cb_trans_setup+0x34>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00000e15 	.word	0x00000e15
    1078:	200001fc 	.word	0x200001fc
    107c:	000029bd 	.word	0x000029bd
    1080:	00002859 	.word	0x00002859

00001084 <usb_d_init>:

int32_t usb_d_init(void)
{
    1084:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1086:	4b10      	ldr	r3, [pc, #64]	; (10c8 <usb_d_init+0x44>)
    1088:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    108a:	2800      	cmp	r0, #0
    108c:	db1b      	blt.n	10c6 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    108e:	4c0f      	ldr	r4, [pc, #60]	; (10cc <usb_d_init+0x48>)
    1090:	2280      	movs	r2, #128	; 0x80
    1092:	2100      	movs	r1, #0
    1094:	0020      	movs	r0, r4
    1096:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <usb_d_init+0x4c>)
    1098:	4798      	blx	r3
    109a:	0023      	movs	r3, r4
    109c:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    109e:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10a0:	4a0c      	ldr	r2, [pc, #48]	; (10d4 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    10a2:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    10a4:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    10a6:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    10a8:	61da      	str	r2, [r3, #28]
    10aa:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    10ac:	42a3      	cmp	r3, r4
    10ae:	d1f8      	bne.n	10a2 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    10b0:	4909      	ldr	r1, [pc, #36]	; (10d8 <usb_d_init+0x54>)
    10b2:	2000      	movs	r0, #0
    10b4:	4c09      	ldr	r4, [pc, #36]	; (10dc <usb_d_init+0x58>)
    10b6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    10b8:	4909      	ldr	r1, [pc, #36]	; (10e0 <usb_d_init+0x5c>)
    10ba:	2001      	movs	r0, #1
    10bc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    10be:	4909      	ldr	r1, [pc, #36]	; (10e4 <usb_d_init+0x60>)
    10c0:	2002      	movs	r0, #2
    10c2:	47a0      	blx	r4
	return ERR_NONE;
    10c4:	2000      	movs	r0, #0
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	00002239 	.word	0x00002239
    10cc:	200001fc 	.word	0x200001fc
    10d0:	00003c47 	.word	0x00003c47
    10d4:	00000e59 	.word	0x00000e59
    10d8:	00000ff5 	.word	0x00000ff5
    10dc:	00002c65 	.word	0x00002c65
    10e0:	00000e5d 	.word	0x00000e5d
    10e4:	00000e95 	.word	0x00000e95

000010e8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    10e8:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    10ea:	4b01      	ldr	r3, [pc, #4]	; (10f0 <usb_d_register_callback+0x8>)
    10ec:	4798      	blx	r3
}
    10ee:	bd10      	pop	{r4, pc}
    10f0:	00002c41 	.word	0x00002c41

000010f4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    10f4:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    10f6:	4b01      	ldr	r3, [pc, #4]	; (10fc <usb_d_enable+0x8>)
    10f8:	4798      	blx	r3
}
    10fa:	bd10      	pop	{r4, pc}
    10fc:	00002315 	.word	0x00002315

00001100 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1100:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1102:	4b01      	ldr	r3, [pc, #4]	; (1108 <usb_d_attach+0x8>)
    1104:	4798      	blx	r3
}
    1106:	bd10      	pop	{r4, pc}
    1108:	00002365 	.word	0x00002365

0000110c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    110c:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    110e:	4b01      	ldr	r3, [pc, #4]	; (1114 <usb_d_set_address+0x8>)
    1110:	4798      	blx	r3
}
    1112:	bd10      	pop	{r4, pc}
    1114:	00002375 	.word	0x00002375

00001118 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    111a:	0005      	movs	r5, r0
    111c:	000e      	movs	r6, r1
    111e:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1120:	4b0f      	ldr	r3, [pc, #60]	; (1160 <usb_d_ep_init+0x48>)
    1122:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1124:	2800      	cmp	r0, #0
    1126:	da14      	bge.n	1152 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1128:	20ff      	movs	r0, #255	; 0xff
    112a:	4b0d      	ldr	r3, [pc, #52]	; (1160 <usb_d_ep_init+0x48>)
    112c:	4798      	blx	r3
    112e:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1130:	db12      	blt.n	1158 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1132:	003a      	movs	r2, r7
    1134:	0031      	movs	r1, r6
    1136:	0028      	movs	r0, r5
    1138:	4b0a      	ldr	r3, [pc, #40]	; (1164 <usb_d_ep_init+0x4c>)
    113a:	4798      	blx	r3
	if (rc < 0) {
    113c:	2800      	cmp	r0, #0
    113e:	db07      	blt.n	1150 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1140:	4a09      	ldr	r2, [pc, #36]	; (1168 <usb_d_ep_init+0x50>)
    1142:	0164      	lsls	r4, r4, #5
    1144:	1913      	adds	r3, r2, r4
    1146:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1148:	2303      	movs	r3, #3
    114a:	401e      	ands	r6, r3
    114c:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    114e:	2000      	movs	r0, #0
}
    1150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1152:	2014      	movs	r0, #20
    1154:	4240      	negs	r0, r0
    1156:	e7fb      	b.n	1150 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1158:	2015      	movs	r0, #21
    115a:	4240      	negs	r0, r0
    115c:	e7f8      	b.n	1150 <usb_d_ep_init+0x38>
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00000e15 	.word	0x00000e15
    1164:	00002385 	.word	0x00002385
    1168:	200001fc 	.word	0x200001fc

0000116c <usb_d_ep0_init>:
{
    116c:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    116e:	b282      	uxth	r2, r0
    1170:	2100      	movs	r1, #0
    1172:	2000      	movs	r0, #0
    1174:	4b01      	ldr	r3, [pc, #4]	; (117c <usb_d_ep0_init+0x10>)
    1176:	4798      	blx	r3
}
    1178:	bd10      	pop	{r4, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00001119 	.word	0x00001119

00001180 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1184:	4b06      	ldr	r3, [pc, #24]	; (11a0 <usb_d_ep_deinit+0x20>)
    1186:	4798      	blx	r3
    1188:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    118a:	db07      	blt.n	119c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    118c:	0028      	movs	r0, r5
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <usb_d_ep_deinit+0x24>)
    1190:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1192:	0164      	lsls	r4, r4, #5
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <usb_d_ep_deinit+0x28>)
    1196:	191c      	adds	r4, r3, r4
    1198:	23ff      	movs	r3, #255	; 0xff
    119a:	7063      	strb	r3, [r4, #1]
}
    119c:	bd70      	pop	{r4, r5, r6, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00000e15 	.word	0x00000e15
    11a4:	000024b1 	.word	0x000024b1
    11a8:	200001fc 	.word	0x200001fc

000011ac <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    11b0:	4b0e      	ldr	r3, [pc, #56]	; (11ec <usb_d_ep_enable+0x40>)
    11b2:	4798      	blx	r3
    11b4:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    11b6:	db15      	blt.n	11e4 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    11b8:	0143      	lsls	r3, r0, #5
    11ba:	4a0d      	ldr	r2, [pc, #52]	; (11f0 <usb_d_ep_enable+0x44>)
    11bc:	5c9b      	ldrb	r3, [r3, r2]
    11be:	425a      	negs	r2, r3
    11c0:	4153      	adcs	r3, r2
    11c2:	3301      	adds	r3, #1
    11c4:	0141      	lsls	r1, r0, #5
    11c6:	4a0a      	ldr	r2, [pc, #40]	; (11f0 <usb_d_ep_enable+0x44>)
    11c8:	1852      	adds	r2, r2, r1
    11ca:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    11cc:	0020      	movs	r0, r4
    11ce:	4b09      	ldr	r3, [pc, #36]	; (11f4 <usb_d_ep_enable+0x48>)
    11d0:	4798      	blx	r3
	if (rc < 0) {
    11d2:	2800      	cmp	r0, #0
    11d4:	db00      	blt.n	11d8 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    11d6:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    11d8:	016d      	lsls	r5, r5, #5
    11da:	4b05      	ldr	r3, [pc, #20]	; (11f0 <usb_d_ep_enable+0x44>)
    11dc:	195d      	adds	r5, r3, r5
    11de:	2300      	movs	r3, #0
    11e0:	70ab      	strb	r3, [r5, #2]
    11e2:	e7f8      	b.n	11d6 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    11e4:	2012      	movs	r0, #18
    11e6:	4240      	negs	r0, r0
    11e8:	e7f5      	b.n	11d6 <usb_d_ep_enable+0x2a>
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	00000e15 	.word	0x00000e15
    11f0:	200001fc 	.word	0x200001fc
    11f4:	0000257d 	.word	0x0000257d

000011f8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    11f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fa:	46d6      	mov	lr, sl
    11fc:	464f      	mov	r7, r9
    11fe:	4646      	mov	r6, r8
    1200:	b5c0      	push	{r6, r7, lr}
    1202:	b086      	sub	sp, #24
    1204:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1206:	7a07      	ldrb	r7, [r0, #8]
    1208:	0038      	movs	r0, r7
    120a:	4b40      	ldr	r3, [pc, #256]	; (130c <usb_d_ep_transfer+0x114>)
    120c:	4798      	blx	r3
    120e:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1210:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    1212:	6863      	ldr	r3, [r4, #4]
    1214:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1216:	2800      	cmp	r0, #0
    1218:	da00      	bge.n	121c <usb_d_ep_transfer+0x24>
    121a:	e071      	b.n	1300 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    121c:	a804      	add	r0, sp, #16
    121e:	4b3c      	ldr	r3, [pc, #240]	; (1310 <usb_d_ep_transfer+0x118>)
    1220:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1222:	016a      	lsls	r2, r5, #5
    1224:	4b3b      	ldr	r3, [pc, #236]	; (1314 <usb_d_ep_transfer+0x11c>)
    1226:	189b      	adds	r3, r3, r2
    1228:	789a      	ldrb	r2, [r3, #2]
    122a:	2317      	movs	r3, #23
    122c:	446b      	add	r3, sp
    122e:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	2b01      	cmp	r3, #1
    1234:	d010      	beq.n	1258 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1236:	a804      	add	r0, sp, #16
    1238:	4b37      	ldr	r3, [pc, #220]	; (1318 <usb_d_ep_transfer+0x120>)
    123a:	4798      	blx	r3
		switch (state) {
    123c:	2317      	movs	r3, #23
    123e:	446b      	add	r3, sp
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	b2db      	uxtb	r3, r3
    1244:	2b05      	cmp	r3, #5
    1246:	d05e      	beq.n	1306 <usb_d_ep_transfer+0x10e>
    1248:	2b06      	cmp	r3, #6
    124a:	d023      	beq.n	1294 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    124c:	2001      	movs	r0, #1
		switch (state) {
    124e:	2b00      	cmp	r3, #0
    1250:	d13c      	bne.n	12cc <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1252:	2013      	movs	r0, #19
    1254:	4240      	negs	r0, r0
    1256:	e039      	b.n	12cc <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1258:	4b2e      	ldr	r3, [pc, #184]	; (1314 <usb_d_ep_transfer+0x11c>)
    125a:	4699      	mov	r9, r3
    125c:	016b      	lsls	r3, r5, #5
    125e:	469a      	mov	sl, r3
    1260:	464b      	mov	r3, r9
    1262:	4453      	add	r3, sl
    1264:	2203      	movs	r2, #3
    1266:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1268:	a804      	add	r0, sp, #16
    126a:	4b2b      	ldr	r3, [pc, #172]	; (1318 <usb_d_ep_transfer+0x120>)
    126c:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    126e:	464b      	mov	r3, r9
    1270:	4652      	mov	r2, sl
    1272:	5cd3      	ldrb	r3, [r2, r3]
    1274:	2b00      	cmp	r3, #0
    1276:	d010      	beq.n	129a <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1278:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    127a:	1e72      	subs	r2, r6, #1
    127c:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    127e:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1280:	6822      	ldr	r2, [r4, #0]
    1282:	9201      	str	r2, [sp, #4]
    1284:	4642      	mov	r2, r8
    1286:	9202      	str	r2, [sp, #8]
    1288:	b27f      	sxtb	r7, r7
    128a:	2f00      	cmp	r7, #0
    128c:	db17      	blt.n	12be <usb_d_ep_transfer+0xc6>
    128e:	220f      	movs	r2, #15
    1290:	4013      	ands	r3, r2
    1292:	e016      	b.n	12c2 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1294:	2010      	movs	r0, #16
    1296:	4240      	negs	r0, r0
    1298:	e018      	b.n	12cc <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    129a:	016b      	lsls	r3, r5, #5
    129c:	4a1d      	ldr	r2, [pc, #116]	; (1314 <usb_d_ep_transfer+0x11c>)
    129e:	18d2      	adds	r2, r2, r3
    12a0:	7cd1      	ldrb	r1, [r2, #19]
    12a2:	0209      	lsls	r1, r1, #8
    12a4:	7c93      	ldrb	r3, [r2, #18]
    12a6:	185b      	adds	r3, r3, r1
    12a8:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    12aa:	2b00      	cmp	r3, #0
    12ac:	d114      	bne.n	12d8 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    12ae:	2304      	movs	r3, #4
    12b0:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    12b2:	2200      	movs	r2, #0
			zlp                 = true;
    12b4:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12b6:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    12b8:	6821      	ldr	r1, [r4, #0]
    12ba:	9101      	str	r1, [sp, #4]
    12bc:	9202      	str	r2, [sp, #8]
    12be:	2280      	movs	r2, #128	; 0x80
    12c0:	4313      	orrs	r3, r2
    12c2:	a801      	add	r0, sp, #4
    12c4:	7203      	strb	r3, [r0, #8]
    12c6:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    12c8:	4b14      	ldr	r3, [pc, #80]	; (131c <usb_d_ep_transfer+0x124>)
    12ca:	4798      	blx	r3
	return rc;
}
    12cc:	b006      	add	sp, #24
    12ce:	bc1c      	pop	{r2, r3, r4}
    12d0:	4690      	mov	r8, r2
    12d2:	4699      	mov	r9, r3
    12d4:	46a2      	mov	sl, r4
    12d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d8:	4642      	mov	r2, r8
    12da:	429a      	cmp	r2, r3
    12dc:	d900      	bls.n	12e0 <usb_d_ep_transfer+0xe8>
    12de:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    12e0:	016d      	lsls	r5, r5, #5
    12e2:	490c      	ldr	r1, [pc, #48]	; (1314 <usb_d_ep_transfer+0x11c>)
    12e4:	194d      	adds	r5, r1, r5
			if (dir) {
    12e6:	7b29      	ldrb	r1, [r5, #12]
    12e8:	297f      	cmp	r1, #127	; 0x7f
    12ea:	d805      	bhi.n	12f8 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12ec:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    12ee:	6821      	ldr	r1, [r4, #0]
    12f0:	9101      	str	r1, [sp, #4]
    12f2:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    12f4:	2600      	movs	r6, #0
    12f6:	e7ca      	b.n	128e <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    12f8:	429a      	cmp	r2, r3
    12fa:	41b6      	sbcs	r6, r6
    12fc:	4276      	negs	r6, r6
    12fe:	e7da      	b.n	12b6 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    1300:	2012      	movs	r0, #18
    1302:	4240      	negs	r0, r0
    1304:	e7e2      	b.n	12cc <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1306:	2002      	movs	r0, #2
    1308:	e7e0      	b.n	12cc <usb_d_ep_transfer+0xd4>
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00000e15 	.word	0x00000e15
    1310:	0000094d 	.word	0x0000094d
    1314:	200001fc 	.word	0x200001fc
    1318:	0000095b 	.word	0x0000095b
    131c:	00002a2d 	.word	0x00002a2d

00001320 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1320:	b570      	push	{r4, r5, r6, lr}
    1322:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1324:	2900      	cmp	r1, #0
    1326:	d005      	beq.n	1334 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1328:	2901      	cmp	r1, #1
    132a:	d021      	beq.n	1370 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    132c:	2102      	movs	r1, #2
    132e:	4b13      	ldr	r3, [pc, #76]	; (137c <usb_d_ep_halt+0x5c>)
    1330:	4798      	blx	r3
	}
}
    1332:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1334:	4b12      	ldr	r3, [pc, #72]	; (1380 <usb_d_ep_halt+0x60>)
    1336:	4798      	blx	r3
    1338:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    133a:	db1c      	blt.n	1376 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    133c:	2102      	movs	r1, #2
    133e:	0020      	movs	r0, r4
    1340:	4b0e      	ldr	r3, [pc, #56]	; (137c <usb_d_ep_halt+0x5c>)
    1342:	4798      	blx	r3
    1344:	2800      	cmp	r0, #0
    1346:	d0f4      	beq.n	1332 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1348:	2100      	movs	r1, #0
    134a:	0020      	movs	r0, r4
    134c:	4b0b      	ldr	r3, [pc, #44]	; (137c <usb_d_ep_halt+0x5c>)
    134e:	4798      	blx	r3
		if (rc < 0) {
    1350:	2800      	cmp	r0, #0
    1352:	dbee      	blt.n	1332 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1354:	016d      	lsls	r5, r5, #5
    1356:	4b0b      	ldr	r3, [pc, #44]	; (1384 <usb_d_ep_halt+0x64>)
    1358:	195d      	adds	r5, r3, r5
    135a:	2301      	movs	r3, #1
    135c:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    135e:	3302      	adds	r3, #2
    1360:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1362:	69eb      	ldr	r3, [r5, #28]
    1364:	2200      	movs	r2, #0
    1366:	2103      	movs	r1, #3
    1368:	0020      	movs	r0, r4
    136a:	4798      	blx	r3
	return ERR_NONE;
    136c:	2000      	movs	r0, #0
    136e:	e7e0      	b.n	1332 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1370:	4b02      	ldr	r3, [pc, #8]	; (137c <usb_d_ep_halt+0x5c>)
    1372:	4798      	blx	r3
    1374:	e7dd      	b.n	1332 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    1376:	2012      	movs	r0, #18
    1378:	4240      	negs	r0, r0
    137a:	e7da      	b.n	1332 <usb_d_ep_halt+0x12>
    137c:	00002859 	.word	0x00002859
    1380:	00000e15 	.word	0x00000e15
    1384:	200001fc 	.word	0x200001fc

00001388 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1388:	b570      	push	{r4, r5, r6, lr}
    138a:	000d      	movs	r5, r1
    138c:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    138e:	4b0f      	ldr	r3, [pc, #60]	; (13cc <usb_d_ep_register_callback+0x44>)
    1390:	4798      	blx	r3
    1392:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1394:	1e22      	subs	r2, r4, #0
    1396:	d008      	beq.n	13aa <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    1398:	2b00      	cmp	r3, #0
    139a:	db05      	blt.n	13a8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    139c:	2d01      	cmp	r5, #1
    139e:	d00b      	beq.n	13b8 <usb_d_ep_register_callback+0x30>
    13a0:	2d00      	cmp	r5, #0
    13a2:	d004      	beq.n	13ae <usb_d_ep_register_callback+0x26>
    13a4:	2d02      	cmp	r5, #2
    13a6:	d00c      	beq.n	13c2 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    13a8:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    13aa:	4a09      	ldr	r2, [pc, #36]	; (13d0 <usb_d_ep_register_callback+0x48>)
    13ac:	e7f4      	b.n	1398 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    13ae:	0140      	lsls	r0, r0, #5
    13b0:	4b08      	ldr	r3, [pc, #32]	; (13d4 <usb_d_ep_register_callback+0x4c>)
    13b2:	1818      	adds	r0, r3, r0
    13b4:	6142      	str	r2, [r0, #20]
		break;
    13b6:	e7f7      	b.n	13a8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    13b8:	0140      	lsls	r0, r0, #5
    13ba:	4b06      	ldr	r3, [pc, #24]	; (13d4 <usb_d_ep_register_callback+0x4c>)
    13bc:	1818      	adds	r0, r3, r0
    13be:	6182      	str	r2, [r0, #24]
		break;
    13c0:	e7f2      	b.n	13a8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    13c2:	0140      	lsls	r0, r0, #5
    13c4:	4b03      	ldr	r3, [pc, #12]	; (13d4 <usb_d_ep_register_callback+0x4c>)
    13c6:	1818      	adds	r0, r3, r0
    13c8:	61c2      	str	r2, [r0, #28]
		break;
    13ca:	e7ed      	b.n	13a8 <usb_d_ep_register_callback+0x20>
    13cc:	00000e15 	.word	0x00000e15
    13d0:	00000e59 	.word	0x00000e59
    13d4:	200001fc 	.word	0x200001fc

000013d8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13d8:	2800      	cmp	r0, #0
    13da:	d100      	bne.n	13de <assert+0x6>
		__asm("BKPT #0");
    13dc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    13de:	4770      	bx	lr

000013e0 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13e0:	6803      	ldr	r3, [r0, #0]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d00a      	beq.n	13fc <is_list_element+0x1c>
		if (it == element) {
    13e6:	428b      	cmp	r3, r1
    13e8:	d00a      	beq.n	1400 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d003      	beq.n	13f8 <is_list_element+0x18>
		if (it == element) {
    13f0:	4299      	cmp	r1, r3
    13f2:	d1fa      	bne.n	13ea <is_list_element+0xa>
			return true;
    13f4:	2001      	movs	r0, #1
    13f6:	e000      	b.n	13fa <is_list_element+0x1a>
		}
	}

	return false;
    13f8:	2000      	movs	r0, #0
}
    13fa:	4770      	bx	lr
	return false;
    13fc:	2000      	movs	r0, #0
    13fe:	e7fc      	b.n	13fa <is_list_element+0x1a>
			return true;
    1400:	2001      	movs	r0, #1
    1402:	e7fa      	b.n	13fa <is_list_element+0x1a>

00001404 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	0004      	movs	r4, r0
    1408:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <list_insert_as_head+0x20>)
    140c:	4798      	blx	r3
    140e:	2301      	movs	r3, #1
    1410:	4058      	eors	r0, r3
    1412:	b2c0      	uxtb	r0, r0
    1414:	2239      	movs	r2, #57	; 0x39
    1416:	4904      	ldr	r1, [pc, #16]	; (1428 <list_insert_as_head+0x24>)
    1418:	4b04      	ldr	r3, [pc, #16]	; (142c <list_insert_as_head+0x28>)
    141a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    141c:	6823      	ldr	r3, [r4, #0]
    141e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1420:	6025      	str	r5, [r4, #0]
}
    1422:	bd70      	pop	{r4, r5, r6, pc}
    1424:	000013e1 	.word	0x000013e1
    1428:	00003ca0 	.word	0x00003ca0
    142c:	000013d9 	.word	0x000013d9

00001430 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1430:	6803      	ldr	r3, [r0, #0]
    1432:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1434:	6001      	str	r1, [r0, #0]
}
    1436:	4770      	bx	lr

00001438 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1438:	b570      	push	{r4, r5, r6, lr}
    143a:	0005      	movs	r5, r0
    143c:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    143e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1440:	4b0a      	ldr	r3, [pc, #40]	; (146c <list_insert_at_end+0x34>)
    1442:	4798      	blx	r3
    1444:	2301      	movs	r3, #1
    1446:	4058      	eors	r0, r3
    1448:	b2c0      	uxtb	r0, r0
    144a:	224f      	movs	r2, #79	; 0x4f
    144c:	4908      	ldr	r1, [pc, #32]	; (1470 <list_insert_at_end+0x38>)
    144e:	4b09      	ldr	r3, [pc, #36]	; (1474 <list_insert_at_end+0x3c>)
    1450:	4798      	blx	r3

	if (!list->head) {
    1452:	682b      	ldr	r3, [r5, #0]
    1454:	2b00      	cmp	r3, #0
    1456:	d103      	bne.n	1460 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    1458:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    145a:	6033      	str	r3, [r6, #0]
		return;
    145c:	e005      	b.n	146a <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    145e:	001c      	movs	r4, r3
	while (it->next) {
    1460:	6823      	ldr	r3, [r4, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d1fb      	bne.n	145e <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    1466:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1468:	6033      	str	r3, [r6, #0]
}
    146a:	bd70      	pop	{r4, r5, r6, pc}
    146c:	000013e1 	.word	0x000013e1
    1470:	00003ca0 	.word	0x00003ca0
    1474:	000013d9 	.word	0x000013d9

00001478 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1478:	6803      	ldr	r3, [r0, #0]
    147a:	2b00      	cmp	r3, #0
    147c:	d001      	beq.n	1482 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    147e:	681a      	ldr	r2, [r3, #0]
    1480:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1482:	0018      	movs	r0, r3
    1484:	4770      	bx	lr
	...

00001488 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1488:	b243      	sxtb	r3, r0
    148a:	2b00      	cmp	r3, #0
    148c:	db07      	blt.n	149e <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    148e:	231f      	movs	r3, #31
    1490:	4018      	ands	r0, r3
    1492:	3b1e      	subs	r3, #30
    1494:	4083      	lsls	r3, r0
    1496:	2280      	movs	r2, #128	; 0x80
    1498:	0052      	lsls	r2, r2, #1
    149a:	4901      	ldr	r1, [pc, #4]	; (14a0 <_irq_set+0x18>)
    149c:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    149e:	4770      	bx	lr
    14a0:	e000e100 	.word	0xe000e100

000014a4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    14a4:	4b01      	ldr	r3, [pc, #4]	; (14ac <_get_cycles_for_ms+0x8>)
    14a6:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14a8:	4770      	bx	lr
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	0000bb80 	.word	0x0000bb80

000014b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14b0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    14b2:	4a08      	ldr	r2, [pc, #32]	; (14d4 <_init_chip+0x24>)
    14b4:	6853      	ldr	r3, [r2, #4]
    14b6:	2102      	movs	r1, #2
    14b8:	430b      	orrs	r3, r1
    14ba:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <_init_chip+0x28>)
    14be:	4798      	blx	r3
	_sysctrl_init_sources();
    14c0:	4b06      	ldr	r3, [pc, #24]	; (14dc <_init_chip+0x2c>)
    14c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    14c4:	2002      	movs	r0, #2
    14c6:	4c06      	ldr	r4, [pc, #24]	; (14e0 <_init_chip+0x30>)
    14c8:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <_init_chip+0x34>)
    14cc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    14ce:	203d      	movs	r0, #61	; 0x3d
    14d0:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    14d2:	bd10      	pop	{r4, pc}
    14d4:	41004000 	.word	0x41004000
    14d8:	000016e5 	.word	0x000016e5
    14dc:	0000190d 	.word	0x0000190d
    14e0:	00001689 	.word	0x00001689
    14e4:	0000196d 	.word	0x0000196d

000014e8 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    14e8:	4a20      	ldr	r2, [pc, #128]	; (156c <_ext_irq_init+0x84>)
    14ea:	7853      	ldrb	r3, [r2, #1]
    14ec:	09db      	lsrs	r3, r3, #7
    14ee:	d1fc      	bne.n	14ea <_ext_irq_init+0x2>
    14f0:	4a1e      	ldr	r2, [pc, #120]	; (156c <_ext_irq_init+0x84>)
    14f2:	7853      	ldrb	r3, [r2, #1]
    14f4:	09db      	lsrs	r3, r3, #7
    14f6:	d1fc      	bne.n	14f2 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    14f8:	4b1c      	ldr	r3, [pc, #112]	; (156c <_ext_irq_init+0x84>)
    14fa:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    14fc:	079b      	lsls	r3, r3, #30
    14fe:	d50a      	bpl.n	1516 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1500:	2200      	movs	r2, #0
    1502:	4b1a      	ldr	r3, [pc, #104]	; (156c <_ext_irq_init+0x84>)
    1504:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1506:	001a      	movs	r2, r3
    1508:	7853      	ldrb	r3, [r2, #1]
    150a:	09db      	lsrs	r3, r3, #7
    150c:	d1fc      	bne.n	1508 <_ext_irq_init+0x20>
    150e:	4a17      	ldr	r2, [pc, #92]	; (156c <_ext_irq_init+0x84>)
    1510:	7853      	ldrb	r3, [r2, #1]
    1512:	09db      	lsrs	r3, r3, #7
    1514:	d1fc      	bne.n	1510 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
    1516:	2201      	movs	r2, #1
    1518:	4b14      	ldr	r3, [pc, #80]	; (156c <_ext_irq_init+0x84>)
    151a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    151c:	001a      	movs	r2, r3
    151e:	7853      	ldrb	r3, [r2, #1]
    1520:	09db      	lsrs	r3, r3, #7
    1522:	d1fc      	bne.n	151e <_ext_irq_init+0x36>
    1524:	4a11      	ldr	r2, [pc, #68]	; (156c <_ext_irq_init+0x84>)
    1526:	7853      	ldrb	r3, [r2, #1]
    1528:	09db      	lsrs	r3, r3, #7
    152a:	d1fc      	bne.n	1526 <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    152c:	4b0f      	ldr	r3, [pc, #60]	; (156c <_ext_irq_init+0x84>)
    152e:	2200      	movs	r2, #0
    1530:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1532:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1534:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1536:	3220      	adds	r2, #32
    1538:	619a      	str	r2, [r3, #24]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    153a:	781a      	ldrb	r2, [r3, #0]
    153c:	2102      	movs	r1, #2
    153e:	430a      	orrs	r2, r1
    1540:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1542:	001a      	movs	r2, r3
    1544:	7853      	ldrb	r3, [r2, #1]
    1546:	09db      	lsrs	r3, r3, #7
    1548:	d1fc      	bne.n	1544 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    154a:	4b09      	ldr	r3, [pc, #36]	; (1570 <_ext_irq_init+0x88>)
    154c:	2210      	movs	r2, #16
    154e:	2180      	movs	r1, #128	; 0x80
    1550:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1556:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    155a:	3101      	adds	r1, #1
    155c:	31ff      	adds	r1, #255	; 0xff
    155e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1560:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1562:	4b04      	ldr	r3, [pc, #16]	; (1574 <_ext_irq_init+0x8c>)
    1564:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1566:	2000      	movs	r0, #0
    1568:	4770      	bx	lr
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	40001800 	.word	0x40001800
    1570:	e000e100 	.word	0xe000e100
    1574:	2000027c 	.word	0x2000027c

00001578 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
    1578:	280f      	cmp	r0, #15
    157a:	d002      	beq.n	1582 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
    157c:	200d      	movs	r0, #13
    157e:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
    1580:	4770      	bx	lr
	if (enable) {
    1582:	2900      	cmp	r1, #0
    1584:	d105      	bne.n	1592 <_ext_irq_enable+0x1a>
	((Eic *)hw)->INTENCLR.reg = mask;
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <_ext_irq_enable+0x24>)
    1588:	2202      	movs	r2, #2
    158a:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    158c:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
    158e:	2000      	movs	r0, #0
    1590:	e7f6      	b.n	1580 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
    1592:	2202      	movs	r2, #2
    1594:	4b01      	ldr	r3, [pc, #4]	; (159c <_ext_irq_enable+0x24>)
    1596:	60da      	str	r2, [r3, #12]
    1598:	2000      	movs	r0, #0
    159a:	e7f1      	b.n	1580 <_ext_irq_enable+0x8>
    159c:	40001800 	.word	0x40001800

000015a0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	46ce      	mov	lr, r9
    15a4:	4647      	mov	r7, r8
    15a6:	b580      	push	{r7, lr}
    15a8:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    15aa:	4b31      	ldr	r3, [pc, #196]	; (1670 <EIC_Handler+0xd0>)
    15ac:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    15ae:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    15b0:	400a      	ands	r2, r1
    15b2:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    15b4:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    15b6:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    15b8:	4b2e      	ldr	r3, [pc, #184]	; (1674 <EIC_Handler+0xd4>)
    15ba:	6818      	ldr	r0, [r3, #0]
    15bc:	1e43      	subs	r3, r0, #1
    15be:	4198      	sbcs	r0, r3
    15c0:	b2c0      	uxtb	r0, r0
    15c2:	22c1      	movs	r2, #193	; 0xc1
    15c4:	492c      	ldr	r1, [pc, #176]	; (1678 <EIC_Handler+0xd8>)
    15c6:	4b2d      	ldr	r3, [pc, #180]	; (167c <EIC_Handler+0xdc>)
    15c8:	4798      	blx	r3

	while (flags) {
    15ca:	9b01      	ldr	r3, [sp, #4]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d049      	beq.n	1664 <EIC_Handler+0xc4>
    15d0:	2301      	movs	r3, #1
    15d2:	425b      	negs	r3, r3
    15d4:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
    15d6:	4b2a      	ldr	r3, [pc, #168]	; (1680 <EIC_Handler+0xe0>)
    15d8:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
    15da:	4f26      	ldr	r7, [pc, #152]	; (1674 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
    15dc:	4d29      	ldr	r5, [pc, #164]	; (1684 <EIC_Handler+0xe4>)
    15de:	e03a      	b.n	1656 <EIC_Handler+0xb6>
					upper = middle - 1;
    15e0:	3a01      	subs	r2, #1
    15e2:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
    15e4:	42b1      	cmp	r1, r6
    15e6:	d80c      	bhi.n	1602 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
    15e8:	1873      	adds	r3, r6, r1
    15ea:	105b      	asrs	r3, r3, #1
    15ec:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
    15ee:	4003      	ands	r3, r0
    15f0:	00db      	lsls	r3, r3, #3
    15f2:	5d5b      	ldrb	r3, [r3, r5]
    15f4:	42a3      	cmp	r3, r4
    15f6:	d008      	beq.n	160a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
    15f8:	429c      	cmp	r4, r3
    15fa:	ddf1      	ble.n	15e0 <EIC_Handler+0x40>
					lower = middle + 1;
    15fc:	3201      	adds	r2, #1
    15fe:	b2d1      	uxtb	r1, r2
    1600:	e7f0      	b.n	15e4 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
    1602:	464b      	mov	r3, r9
    1604:	3301      	adds	r3, #1
    1606:	d005      	beq.n	1614 <EIC_Handler+0x74>
    1608:	e001      	b.n	160e <EIC_Handler+0x6e>
    160a:	230f      	movs	r3, #15
    160c:	4699      	mov	r9, r3
				callback(pin);
    160e:	4648      	mov	r0, r9
    1610:	683b      	ldr	r3, [r7, #0]
    1612:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1614:	9b01      	ldr	r3, [sp, #4]
    1616:	2201      	movs	r2, #1
    1618:	40a2      	lsls	r2, r4
    161a:	4393      	bics	r3, r2
    161c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    161e:	9801      	ldr	r0, [sp, #4]
    1620:	4b17      	ldr	r3, [pc, #92]	; (1680 <EIC_Handler+0xe0>)
    1622:	4798      	blx	r3
    1624:	3801      	subs	r0, #1
    1626:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1628:	1c63      	adds	r3, r4, #1
    162a:	d00a      	beq.n	1642 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
    162c:	2c01      	cmp	r4, #1
    162e:	d005      	beq.n	163c <EIC_Handler+0x9c>
    1630:	2301      	movs	r3, #1
    1632:	2200      	movs	r2, #0
    1634:	2601      	movs	r6, #1
    1636:	2100      	movs	r1, #0
    1638:	20ff      	movs	r0, #255	; 0xff
    163a:	e7dd      	b.n	15f8 <EIC_Handler+0x58>
    163c:	230f      	movs	r3, #15
    163e:	4699      	mov	r9, r3
    1640:	e7e5      	b.n	160e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
    1642:	4b0b      	ldr	r3, [pc, #44]	; (1670 <EIC_Handler+0xd0>)
    1644:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1646:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1648:	400a      	ands	r2, r1
    164a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    164c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    164e:	611a      	str	r2, [r3, #16]
	while (flags) {
    1650:	9b01      	ldr	r3, [sp, #4]
    1652:	2b00      	cmp	r3, #0
    1654:	d006      	beq.n	1664 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
    1656:	9801      	ldr	r0, [sp, #4]
    1658:	47c0      	blx	r8
    165a:	3801      	subs	r0, #1
    165c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    165e:	1c63      	adds	r3, r4, #1
    1660:	d1e4      	bne.n	162c <EIC_Handler+0x8c>
    1662:	e7ee      	b.n	1642 <EIC_Handler+0xa2>
	}
}
    1664:	b003      	add	sp, #12
    1666:	bc0c      	pop	{r2, r3}
    1668:	4690      	mov	r8, r2
    166a:	4699      	mov	r9, r3
    166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	40001800 	.word	0x40001800
    1674:	2000027c 	.word	0x2000027c
    1678:	00003cc8 	.word	0x00003cc8
    167c:	000013d9 	.word	0x000013d9
    1680:	00003b99 	.word	0x00003b99
    1684:	00003cc0 	.word	0x00003cc0

00001688 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1688:	07c3      	lsls	r3, r0, #31
    168a:	d509      	bpl.n	16a0 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    168c:	4b11      	ldr	r3, [pc, #68]	; (16d4 <_gclk_init_generators_by_fref+0x4c>)
    168e:	2280      	movs	r2, #128	; 0x80
    1690:	0052      	lsls	r2, r2, #1
    1692:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1694:	4a10      	ldr	r2, [pc, #64]	; (16d8 <_gclk_init_generators_by_fref+0x50>)
    1696:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1698:	001a      	movs	r2, r3
    169a:	7853      	ldrb	r3, [r2, #1]
    169c:	09db      	lsrs	r3, r3, #7
    169e:	d1fc      	bne.n	169a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    16a0:	0783      	lsls	r3, r0, #30
    16a2:	d509      	bpl.n	16b8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    16a4:	4b0b      	ldr	r3, [pc, #44]	; (16d4 <_gclk_init_generators_by_fref+0x4c>)
    16a6:	2202      	movs	r2, #2
    16a8:	32ff      	adds	r2, #255	; 0xff
    16aa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    16ac:	4a0b      	ldr	r2, [pc, #44]	; (16dc <_gclk_init_generators_by_fref+0x54>)
    16ae:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    16b0:	001a      	movs	r2, r3
    16b2:	7853      	ldrb	r3, [r2, #1]
    16b4:	09db      	lsrs	r3, r3, #7
    16b6:	d1fc      	bne.n	16b2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    16b8:	0743      	lsls	r3, r0, #29
    16ba:	d509      	bpl.n	16d0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <_gclk_init_generators_by_fref+0x4c>)
    16be:	2281      	movs	r2, #129	; 0x81
    16c0:	0052      	lsls	r2, r2, #1
    16c2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    16c4:	4a06      	ldr	r2, [pc, #24]	; (16e0 <_gclk_init_generators_by_fref+0x58>)
    16c6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    16c8:	001a      	movs	r2, r3
    16ca:	7853      	ldrb	r3, [r2, #1]
    16cc:	09db      	lsrs	r3, r3, #7
    16ce:	d1fc      	bne.n	16ca <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GEN_5_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_5_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_5_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif
}
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	40000c00 	.word	0x40000c00
    16d8:	00010700 	.word	0x00010700
    16dc:	00010401 	.word	0x00010401
    16e0:	00010602 	.word	0x00010602

000016e4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <_pm_init+0x1c>)
    16e6:	7a1a      	ldrb	r2, [r3, #8]
    16e8:	b2d2      	uxtb	r2, r2
    16ea:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    16ec:	7a5a      	ldrb	r2, [r3, #9]
    16ee:	b2d2      	uxtb	r2, r2
    16f0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    16f2:	7a9a      	ldrb	r2, [r3, #10]
    16f4:	b2d2      	uxtb	r2, r2
    16f6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    16f8:	7ada      	ldrb	r2, [r3, #11]
    16fa:	b2d2      	uxtb	r2, r2
    16fc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    16fe:	4770      	bx	lr
    1700:	40000400 	.word	0x40000400

00001704 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1704:	b570      	push	{r4, r5, r6, lr}
    1706:	0005      	movs	r5, r0
    1708:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    170a:	4b35      	ldr	r3, [pc, #212]	; (17e0 <_spi_m_sync_init+0xdc>)
    170c:	18cb      	adds	r3, r1, r3
    170e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1710:	b2db      	uxtb	r3, r3
    1712:	2b01      	cmp	r3, #1
    1714:	d00b      	beq.n	172e <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1716:	2800      	cmp	r0, #0
    1718:	d051      	beq.n	17be <_spi_m_sync_init+0xba>
    171a:	1e60      	subs	r0, r4, #1
    171c:	4184      	sbcs	r4, r0
    171e:	b2e0      	uxtb	r0, r4
    1720:	4a30      	ldr	r2, [pc, #192]	; (17e4 <_spi_m_sync_init+0xe0>)
    1722:	4931      	ldr	r1, [pc, #196]	; (17e8 <_spi_m_sync_init+0xe4>)
    1724:	4b31      	ldr	r3, [pc, #196]	; (17ec <_spi_m_sync_init+0xe8>)
    1726:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1728:	200d      	movs	r0, #13
    172a:	4240      	negs	r0, r0
    172c:	e046      	b.n	17bc <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    172e:	2800      	cmp	r0, #0
    1730:	d14d      	bne.n	17ce <_spi_m_sync_init+0xca>
    1732:	4a2c      	ldr	r2, [pc, #176]	; (17e4 <_spi_m_sync_init+0xe0>)
    1734:	492c      	ldr	r1, [pc, #176]	; (17e8 <_spi_m_sync_init+0xe4>)
    1736:	2000      	movs	r0, #0
    1738:	4b2c      	ldr	r3, [pc, #176]	; (17ec <_spi_m_sync_init+0xe8>)
    173a:	4798      	blx	r3
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    173c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    173e:	07db      	lsls	r3, r3, #31
    1740:	d418      	bmi.n	1774 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1742:	2203      	movs	r2, #3
    1744:	69e3      	ldr	r3, [r4, #28]
    1746:	421a      	tst	r2, r3
    1748:	d1fc      	bne.n	1744 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    174a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    174c:	079b      	lsls	r3, r3, #30
    174e:	d50b      	bpl.n	1768 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	2202      	movs	r2, #2
    1754:	4393      	bics	r3, r2
    1756:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1758:	3201      	adds	r2, #1
    175a:	69e3      	ldr	r3, [r4, #28]
    175c:	421a      	tst	r2, r3
    175e:	d1fc      	bne.n	175a <_spi_m_sync_init+0x56>
    1760:	2202      	movs	r2, #2
    1762:	69e3      	ldr	r3, [r4, #28]
    1764:	421a      	tst	r2, r3
    1766:	d1fc      	bne.n	1762 <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1768:	230d      	movs	r3, #13
    176a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    176c:	2203      	movs	r2, #3
    176e:	69e3      	ldr	r3, [r4, #28]
    1770:	421a      	tst	r2, r3
    1772:	d1fc      	bne.n	176e <_spi_m_sync_init+0x6a>
    1774:	2201      	movs	r2, #1
    1776:	69e3      	ldr	r3, [r4, #28]
    1778:	421a      	tst	r2, r3
    177a:	d1fc      	bne.n	1776 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    177c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    177e:	0020      	movs	r0, r4
    1780:	1e43      	subs	r3, r0, #1
    1782:	4198      	sbcs	r0, r3
    1784:	b2c0      	uxtb	r0, r0
    1786:	4a1a      	ldr	r2, [pc, #104]	; (17f0 <_spi_m_sync_init+0xec>)
    1788:	4917      	ldr	r1, [pc, #92]	; (17e8 <_spi_m_sync_init+0xe4>)
    178a:	4b18      	ldr	r3, [pc, #96]	; (17ec <_spi_m_sync_init+0xe8>)
    178c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    178e:	4b19      	ldr	r3, [pc, #100]	; (17f4 <_spi_m_sync_init+0xf0>)
    1790:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1792:	2203      	movs	r2, #3
    1794:	69e3      	ldr	r3, [r4, #28]
    1796:	421a      	tst	r2, r3
    1798:	d1fc      	bne.n	1794 <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    179a:	2380      	movs	r3, #128	; 0x80
    179c:	029b      	lsls	r3, r3, #10
    179e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17a0:	2207      	movs	r2, #7
    17a2:	69e3      	ldr	r3, [r4, #28]
    17a4:	421a      	tst	r2, r3
    17a6:	d1fc      	bne.n	17a2 <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    17a8:	230b      	movs	r3, #11
    17aa:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    17ac:	2200      	movs	r2, #0
    17ae:	3325      	adds	r3, #37	; 0x25
    17b0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    17b2:	3b2f      	subs	r3, #47	; 0x2f
    17b4:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    17b6:	4b10      	ldr	r3, [pc, #64]	; (17f8 <_spi_m_sync_init+0xf4>)
    17b8:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    17ba:	2000      	movs	r0, #0
}
    17bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    17be:	4a09      	ldr	r2, [pc, #36]	; (17e4 <_spi_m_sync_init+0xe0>)
    17c0:	4909      	ldr	r1, [pc, #36]	; (17e8 <_spi_m_sync_init+0xe4>)
    17c2:	2000      	movs	r0, #0
    17c4:	4b09      	ldr	r3, [pc, #36]	; (17ec <_spi_m_sync_init+0xe8>)
    17c6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    17c8:	200d      	movs	r0, #13
    17ca:	4240      	negs	r0, r0
    17cc:	e7f6      	b.n	17bc <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    17ce:	0008      	movs	r0, r1
    17d0:	1e43      	subs	r3, r0, #1
    17d2:	4198      	sbcs	r0, r3
    17d4:	b2c0      	uxtb	r0, r0
    17d6:	4a03      	ldr	r2, [pc, #12]	; (17e4 <_spi_m_sync_init+0xe0>)
    17d8:	4903      	ldr	r1, [pc, #12]	; (17e8 <_spi_m_sync_init+0xe4>)
    17da:	4b04      	ldr	r3, [pc, #16]	; (17ec <_spi_m_sync_init+0xe8>)
    17dc:	4798      	blx	r3
    17de:	e7ad      	b.n	173c <_spi_m_sync_init+0x38>
    17e0:	bdfff800 	.word	0xbdfff800
    17e4:	00000925 	.word	0x00000925
    17e8:	00003ce0 	.word	0x00003ce0
    17ec:	000013d9 	.word	0x000013d9
    17f0:	000008ef 	.word	0x000008ef
    17f4:	0023000c 	.word	0x0023000c
    17f8:	000001ff 	.word	0x000001ff

000017fc <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    17fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fe:	46de      	mov	lr, fp
    1800:	4657      	mov	r7, sl
    1802:	464e      	mov	r6, r9
    1804:	4645      	mov	r5, r8
    1806:	b5e0      	push	{r5, r6, r7, lr}
    1808:	b083      	sub	sp, #12
    180a:	4681      	mov	r9, r0
    180c:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    180e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1810:	680b      	ldr	r3, [r1, #0]
    1812:	4698      	mov	r8, r3
    1814:	684d      	ldr	r5, [r1, #4]
    1816:	7903      	ldrb	r3, [r0, #4]
    1818:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    181a:	2800      	cmp	r0, #0
    181c:	d015      	beq.n	184a <_spi_m_sync_trans+0x4e>
    181e:	0020      	movs	r0, r4
    1820:	1e43      	subs	r3, r0, #1
    1822:	4198      	sbcs	r0, r3
    1824:	b2c0      	uxtb	r0, r0
    1826:	4a36      	ldr	r2, [pc, #216]	; (1900 <_spi_m_sync_trans+0x104>)
    1828:	4936      	ldr	r1, [pc, #216]	; (1904 <_spi_m_sync_trans+0x108>)
    182a:	4b37      	ldr	r3, [pc, #220]	; (1908 <_spi_m_sync_trans+0x10c>)
    182c:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    182e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1830:	075b      	lsls	r3, r3, #29
    1832:	d13f      	bne.n	18b4 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1834:	2303      	movs	r3, #3
    1836:	69e0      	ldr	r0, [r4, #28]
    1838:	4018      	ands	r0, r3
    183a:	d1fc      	bne.n	1836 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    183c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    183e:	079b      	lsls	r3, r3, #30
    1840:	d53b      	bpl.n	18ba <_spi_m_sync_trans+0xbe>
    1842:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1844:	2301      	movs	r3, #1
    1846:	469c      	mov	ip, r3
    1848:	e009      	b.n	185e <_spi_m_sync_trans+0x62>
    184a:	2000      	movs	r0, #0
    184c:	e7eb      	b.n	1826 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    184e:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1850:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1852:	b25b      	sxtb	r3, r3
    1854:	2b00      	cmp	r3, #0
    1856:	db16      	blt.n	1886 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1858:	68b3      	ldr	r3, [r6, #8]
    185a:	4283      	cmp	r3, r0
    185c:	d927      	bls.n	18ae <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    185e:	7e23      	ldrb	r3, [r4, #24]
    1860:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1862:	2104      	movs	r1, #4
    1864:	4219      	tst	r1, r3
    1866:	d02b      	beq.n	18c0 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1868:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    186a:	2d00      	cmp	r5, #0
    186c:	d0f0      	beq.n	1850 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    186e:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1870:	9901      	ldr	r1, [sp, #4]
    1872:	2901      	cmp	r1, #1
    1874:	d9eb      	bls.n	184e <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1876:	0a3f      	lsrs	r7, r7, #8
    1878:	706f      	strb	r7, [r5, #1]
    187a:	3502      	adds	r5, #2
    187c:	e7e8      	b.n	1850 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    187e:	2101      	movs	r1, #1
    1880:	468b      	mov	fp, r1
    1882:	44d8      	add	r8, fp
    1884:	e037      	b.n	18f6 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1886:	2301      	movs	r3, #1
    1888:	425b      	negs	r3, r3
    188a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    188c:	3381      	adds	r3, #129	; 0x81
    188e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1890:	2013      	movs	r0, #19
    1892:	4240      	negs	r0, r0
	tmp &= mask;
    1894:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1896:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1898:	4213      	tst	r3, r2
    189a:	d0fc      	beq.n	1896 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    189c:	2303      	movs	r3, #3
    189e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    18a0:	b003      	add	sp, #12
    18a2:	bc3c      	pop	{r2, r3, r4, r5}
    18a4:	4690      	mov	r8, r2
    18a6:	4699      	mov	r9, r3
    18a8:	46a2      	mov	sl, r4
    18aa:	46ab      	mov	fp, r5
    18ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    18ae:	4293      	cmp	r3, r2
    18b0:	d8d5      	bhi.n	185e <_spi_m_sync_trans+0x62>
    18b2:	e7ef      	b.n	1894 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    18b4:	2004      	movs	r0, #4
    18b6:	4240      	negs	r0, r0
    18b8:	e7f2      	b.n	18a0 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    18ba:	2014      	movs	r0, #20
    18bc:	4240      	negs	r0, r0
    18be:	e7ef      	b.n	18a0 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    18c0:	4290      	cmp	r0, r2
    18c2:	d8c6      	bhi.n	1852 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    18c4:	4667      	mov	r7, ip
    18c6:	421f      	tst	r7, r3
    18c8:	d0c3      	beq.n	1852 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    18ca:	464f      	mov	r7, r9
    18cc:	88ff      	ldrh	r7, [r7, #6]
    18ce:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    18d0:	4647      	mov	r7, r8
    18d2:	2f00      	cmp	r7, #0
    18d4:	d00f      	beq.n	18f6 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    18d6:	783f      	ldrb	r7, [r7, #0]
    18d8:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    18da:	9901      	ldr	r1, [sp, #4]
    18dc:	2901      	cmp	r1, #1
    18de:	d9ce      	bls.n	187e <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    18e0:	4647      	mov	r7, r8
    18e2:	787f      	ldrb	r7, [r7, #1]
    18e4:	023f      	lsls	r7, r7, #8
    18e6:	46bb      	mov	fp, r7
    18e8:	4657      	mov	r7, sl
    18ea:	4659      	mov	r1, fp
    18ec:	430f      	orrs	r7, r1
    18ee:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    18f0:	2102      	movs	r1, #2
    18f2:	468b      	mov	fp, r1
    18f4:	44d8      	add	r8, fp
	ctrl->txcnt++;
    18f6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    18f8:	4657      	mov	r7, sl
    18fa:	62a7      	str	r7, [r4, #40]	; 0x28
    18fc:	e7a9      	b.n	1852 <_spi_m_sync_trans+0x56>
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	00000a85 	.word	0x00000a85
    1904:	00003ce0 	.word	0x00003ce0
    1908:	000013d9 	.word	0x000013d9

0000190c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    190c:	4b15      	ldr	r3, [pc, #84]	; (1964 <_sysctrl_init_sources+0x58>)
    190e:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1910:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1912:	4815      	ldr	r0, [pc, #84]	; (1968 <_sysctrl_init_sources+0x5c>)
    1914:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1916:	0f92      	lsrs	r2, r2, #30
    1918:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    191a:	2002      	movs	r0, #2
    191c:	4302      	orrs	r2, r0
    191e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1920:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1922:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    1924:	21fe      	movs	r1, #254	; 0xfe
    1926:	03c9      	lsls	r1, r1, #15
    1928:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    192a:	2106      	movs	r1, #6
    192c:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    192e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1930:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1932:	3119      	adds	r1, #25
    1934:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1936:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1938:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    193a:	2204      	movs	r2, #4
    193c:	68cb      	ldr	r3, [r1, #12]
    193e:	421a      	tst	r2, r3
    1940:	d0fc      	beq.n	193c <_sysctrl_init_sources+0x30>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
    1942:	4a08      	ldr	r2, [pc, #32]	; (1964 <_sysctrl_init_sources+0x58>)
    1944:	6993      	ldr	r3, [r2, #24]
    1946:	2180      	movs	r1, #128	; 0x80
    1948:	430b      	orrs	r3, r1
    194a:	6193      	str	r3, [r2, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    194c:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    194e:	2208      	movs	r2, #8
    1950:	68cb      	ldr	r3, [r1, #12]
    1952:	421a      	tst	r2, r3
    1954:	d0fc      	beq.n	1950 <_sysctrl_init_sources+0x44>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1956:	4a03      	ldr	r2, [pc, #12]	; (1964 <_sysctrl_init_sources+0x58>)
    1958:	6a13      	ldr	r3, [r2, #32]
    195a:	2180      	movs	r1, #128	; 0x80
    195c:	430b      	orrs	r3, r1
    195e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	40000800 	.word	0x40000800
    1968:	0fff0000 	.word	0x0fff0000

0000196c <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    196c:	2282      	movs	r2, #130	; 0x82
    196e:	01d2      	lsls	r2, r2, #7
    1970:	4b1a      	ldr	r3, [pc, #104]	; (19dc <_sysctrl_init_referenced_generators+0x70>)
    1972:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1974:	2202      	movs	r2, #2
    1976:	4b1a      	ldr	r3, [pc, #104]	; (19e0 <_sysctrl_init_referenced_generators+0x74>)
    1978:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    197a:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    197c:	320e      	adds	r2, #14
    197e:	68cb      	ldr	r3, [r1, #12]
    1980:	421a      	tst	r2, r3
    1982:	d0fc      	beq.n	197e <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1984:	4a17      	ldr	r2, [pc, #92]	; (19e4 <_sysctrl_init_referenced_generators+0x78>)
    1986:	4b16      	ldr	r3, [pc, #88]	; (19e0 <_sysctrl_init_referenced_generators+0x74>)
    1988:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    198a:	4b17      	ldr	r3, [pc, #92]	; (19e8 <_sysctrl_init_referenced_generators+0x7c>)
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	0e9b      	lsrs	r3, r3, #26
    1990:	2b3f      	cmp	r3, #63	; 0x3f
    1992:	d01a      	beq.n	19ca <_sysctrl_init_referenced_generators+0x5e>
    1994:	029b      	lsls	r3, r3, #10
    1996:	2280      	movs	r2, #128	; 0x80
    1998:	0092      	lsls	r2, r2, #2
    199a:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    199c:	4a10      	ldr	r2, [pc, #64]	; (19e0 <_sysctrl_init_referenced_generators+0x74>)
    199e:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    19a0:	2306      	movs	r3, #6
    19a2:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    19a4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    19a6:	075b      	lsls	r3, r3, #29
    19a8:	d512      	bpl.n	19d0 <_sysctrl_init_referenced_generators+0x64>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19aa:	0011      	movs	r1, r2
	tmp &= mask;
    19ac:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    19ae:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    19b0:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    19b2:	2bd0      	cmp	r3, #208	; 0xd0
    19b4:	d1fb      	bne.n	19ae <_sysctrl_init_referenced_generators+0x42>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    19b6:	4a0a      	ldr	r2, [pc, #40]	; (19e0 <_sysctrl_init_referenced_generators+0x74>)
    19b8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    19ba:	2180      	movs	r1, #128	; 0x80
    19bc:	430b      	orrs	r3, r1
    19be:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    19c0:	4a06      	ldr	r2, [pc, #24]	; (19dc <_sysctrl_init_referenced_generators+0x70>)
    19c2:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    19c4:	09db      	lsrs	r3, r3, #7
    19c6:	d1fc      	bne.n	19c2 <_sysctrl_init_referenced_generators+0x56>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    19c8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    19ca:	23fc      	movs	r3, #252	; 0xfc
    19cc:	01db      	lsls	r3, r3, #7
    19ce:	e7e5      	b.n	199c <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    19d0:	4903      	ldr	r1, [pc, #12]	; (19e0 <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    19d2:	2210      	movs	r2, #16
    19d4:	68cb      	ldr	r3, [r1, #12]
    19d6:	421a      	tst	r2, r3
    19d8:	d0fc      	beq.n	19d4 <_sysctrl_init_referenced_generators+0x68>
    19da:	e7ec      	b.n	19b6 <_sysctrl_init_referenced_generators+0x4a>
    19dc:	40000c00 	.word	0x40000c00
    19e0:	40000800 	.word	0x40000800
    19e4:	040105b9 	.word	0x040105b9
    19e8:	00806024 	.word	0x00806024

000019ec <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    19ec:	4b02      	ldr	r3, [pc, #8]	; (19f8 <_delay_init+0xc>)
    19ee:	4a03      	ldr	r2, [pc, #12]	; (19fc <_delay_init+0x10>)
    19f0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    19f2:	2205      	movs	r2, #5
    19f4:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    19f6:	4770      	bx	lr
    19f8:	e000e010 	.word	0xe000e010
    19fc:	00ffffff 	.word	0x00ffffff

00001a00 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1a00:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1a02:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1a04:	1e5e      	subs	r6, r3, #1
    1a06:	b2f6      	uxtb	r6, r6
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d013      	beq.n	1a34 <_delay_cycles+0x34>
    1a0c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    1a0e:	4a0e      	ldr	r2, [pc, #56]	; (1a48 <_delay_cycles+0x48>)
    1a10:	4d0e      	ldr	r5, [pc, #56]	; (1a4c <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1a12:	2080      	movs	r0, #128	; 0x80
    1a14:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    1a16:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1a18:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1a1a:	6813      	ldr	r3, [r2, #0]
    1a1c:	4203      	tst	r3, r0
    1a1e:	d0fc      	beq.n	1a1a <_delay_cycles+0x1a>
	while (n--) {
    1a20:	3c01      	subs	r4, #1
    1a22:	b2e4      	uxtb	r4, r4
    1a24:	2cff      	cmp	r4, #255	; 0xff
    1a26:	d1f6      	bne.n	1a16 <_delay_cycles+0x16>
    1a28:	0633      	lsls	r3, r6, #24
    1a2a:	1af6      	subs	r6, r6, r3
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <_delay_cycles+0x50>)
    1a2e:	469c      	mov	ip, r3
    1a30:	4461      	add	r1, ip
    1a32:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1a34:	4b04      	ldr	r3, [pc, #16]	; (1a48 <_delay_cycles+0x48>)
    1a36:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1a38:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1a3a:	0019      	movs	r1, r3
    1a3c:	2280      	movs	r2, #128	; 0x80
    1a3e:	0252      	lsls	r2, r2, #9
    1a40:	680b      	ldr	r3, [r1, #0]
    1a42:	4213      	tst	r3, r2
    1a44:	d0fc      	beq.n	1a40 <_delay_cycles+0x40>
		;
}
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	e000e010 	.word	0xe000e010
    1a4c:	00ffffff 	.word	0x00ffffff
    1a50:	ff000001 	.word	0xff000001

00001a54 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    1a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a56:	0007      	movs	r7, r0
    1a58:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1a5a:	4b3c      	ldr	r3, [pc, #240]	; (1b4c <_timer_init+0xf8>)
    1a5c:	18cd      	adds	r5, r1, r3
    1a5e:	0aad      	lsrs	r5, r5, #10
    1a60:	b2ed      	uxtb	r5, r5
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    1a62:	2d00      	cmp	r5, #0
    1a64:	d051      	beq.n	1b0a <_timer_init+0xb6>
			return i;
		}
	}

	ASSERT(false);
    1a66:	2296      	movs	r2, #150	; 0x96
    1a68:	0052      	lsls	r2, r2, #1
    1a6a:	4939      	ldr	r1, [pc, #228]	; (1b50 <_timer_init+0xfc>)
    1a6c:	2000      	movs	r0, #0
    1a6e:	4b39      	ldr	r3, [pc, #228]	; (1b54 <_timer_init+0x100>)
    1a70:	4798      	blx	r3
	return -1;
    1a72:	2601      	movs	r6, #1
    1a74:	4276      	negs	r6, r6
	device->hw = hw;
    1a76:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1a78:	2279      	movs	r2, #121	; 0x79
    1a7a:	4935      	ldr	r1, [pc, #212]	; (1b50 <_timer_init+0xfc>)
    1a7c:	2001      	movs	r0, #1
    1a7e:	4b35      	ldr	r3, [pc, #212]	; (1b54 <_timer_init+0x100>)
    1a80:	4798      	blx	r3
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw)
{
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a82:	7be3      	ldrb	r3, [r4, #15]
    1a84:	09db      	lsrs	r3, r3, #7
    1a86:	d1fc      	bne.n	1a82 <_timer_init+0x2e>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a88:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a8a:	079b      	lsls	r3, r3, #30
    1a8c:	d504      	bpl.n	1a98 <_timer_init+0x44>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a8e:	2300      	movs	r3, #0
    1a90:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a92:	7be3      	ldrb	r3, [r4, #15]
    1a94:	09db      	lsrs	r3, r3, #7
    1a96:	d1fc      	bne.n	1a92 <_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a98:	2301      	movs	r3, #1
    1a9a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1a9c:	7be3      	ldrb	r3, [r4, #15]
    1a9e:	09db      	lsrs	r3, r3, #7
    1aa0:	d1fc      	bne.n	1a9c <_timer_init+0x48>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1aa2:	00b3      	lsls	r3, r6, #2
    1aa4:	199b      	adds	r3, r3, r6
    1aa6:	009a      	lsls	r2, r3, #2
    1aa8:	4b2b      	ldr	r3, [pc, #172]	; (1b58 <_timer_init+0x104>)
    1aaa:	189b      	adds	r3, r3, r2
    1aac:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1aae:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1ab0:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1ab2:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1ab4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1ab6:	8163      	strh	r3, [r4, #10]
    1ab8:	230c      	movs	r3, #12
    1aba:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1abc:	2b08      	cmp	r3, #8
    1abe:	d026      	beq.n	1b0e <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d12e      	bne.n	1b22 <_timer_init+0xce>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1ac4:	00b3      	lsls	r3, r6, #2
    1ac6:	199b      	adds	r3, r3, r6
    1ac8:	009b      	lsls	r3, r3, #2
    1aca:	4a23      	ldr	r2, [pc, #140]	; (1b58 <_timer_init+0x104>)
    1acc:	18d3      	adds	r3, r2, r3
    1ace:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1ad0:	8323      	strh	r3, [r4, #24]
    1ad2:	2300      	movs	r3, #0
    1ad4:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1ad6:	2301      	movs	r3, #1
    1ad8:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC1) {
    1ada:	4b20      	ldr	r3, [pc, #128]	; (1b5c <_timer_init+0x108>)
    1adc:	429c      	cmp	r4, r3
    1ade:	d031      	beq.n	1b44 <_timer_init+0xf0>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1ae0:	350d      	adds	r5, #13
  if ((int32_t)(IRQn) >= 0)
    1ae2:	b2eb      	uxtb	r3, r5
    1ae4:	062a      	lsls	r2, r5, #24
    1ae6:	d40e      	bmi.n	1b06 <_timer_init+0xb2>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae8:	221f      	movs	r2, #31
    1aea:	401a      	ands	r2, r3
    1aec:	2301      	movs	r3, #1
    1aee:	4093      	lsls	r3, r2
    1af0:	4a1b      	ldr	r2, [pc, #108]	; (1b60 <_timer_init+0x10c>)
    1af2:	2180      	movs	r1, #128	; 0x80
    1af4:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	3101      	adds	r1, #1
    1b00:	31ff      	adds	r1, #255	; 0xff
    1b02:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b04:	6013      	str	r3, [r2, #0]
}
    1b06:	2000      	movs	r0, #0
    1b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return i;
    1b0a:	2600      	movs	r6, #0
    1b0c:	e7b3      	b.n	1a76 <_timer_init+0x22>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1b0e:	00b3      	lsls	r3, r6, #2
    1b10:	199e      	adds	r6, r3, r6
    1b12:	00b6      	lsls	r6, r6, #2
    1b14:	4b10      	ldr	r3, [pc, #64]	; (1b58 <_timer_init+0x104>)
    1b16:	199e      	adds	r6, r3, r6
    1b18:	68f3      	ldr	r3, [r6, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b1a:	61a3      	str	r3, [r4, #24]
    1b1c:	2300      	movs	r3, #0
    1b1e:	61e3      	str	r3, [r4, #28]
    1b20:	e7d9      	b.n	1ad6 <_timer_init+0x82>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1b22:	2b04      	cmp	r3, #4
    1b24:	d1d7      	bne.n	1ad6 <_timer_init+0x82>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1b26:	480c      	ldr	r0, [pc, #48]	; (1b58 <_timer_init+0x104>)
    1b28:	00b3      	lsls	r3, r6, #2
    1b2a:	199a      	adds	r2, r3, r6
    1b2c:	0092      	lsls	r2, r2, #2
    1b2e:	1882      	adds	r2, r0, r2
    1b30:	7b12      	ldrb	r2, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b32:	7622      	strb	r2, [r4, #24]
    1b34:	2200      	movs	r2, #0
    1b36:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1b38:	199b      	adds	r3, r3, r6
    1b3a:	009b      	lsls	r3, r3, #2
    1b3c:	18c3      	adds	r3, r0, r3
    1b3e:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b40:	7523      	strb	r3, [r4, #20]
    1b42:	e7c8      	b.n	1ad6 <_timer_init+0x82>
		_tc1_dev = (struct _timer_device *)dev;
    1b44:	4b07      	ldr	r3, [pc, #28]	; (1b64 <_timer_init+0x110>)
    1b46:	601f      	str	r7, [r3, #0]
    1b48:	e7ca      	b.n	1ae0 <_timer_init+0x8c>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	bdffe800 	.word	0xbdffe800
    1b50:	00003d10 	.word	0x00003d10
    1b54:	000013d9 	.word	0x000013d9
    1b58:	00003cfc 	.word	0x00003cfc
    1b5c:	42001800 	.word	0x42001800
    1b60:	e000e100 	.word	0xe000e100
    1b64:	20000280 	.word	0x20000280

00001b68 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1b68:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1b6a:	8813      	ldrh	r3, [r2, #0]
    1b6c:	2102      	movs	r1, #2
    1b6e:	430b      	orrs	r3, r1
    1b70:	8013      	strh	r3, [r2, #0]
}
    1b72:	4770      	bx	lr

00001b74 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1b74:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1b76:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    1b78:	0780      	lsls	r0, r0, #30
    1b7a:	0fc0      	lsrs	r0, r0, #31
}
    1b7c:	4770      	bx	lr

00001b7e <_tc_get_timer>:
}
    1b7e:	2000      	movs	r0, #0
    1b80:	4770      	bx	lr
	...

00001b84 <_timer_set_irq>:
{
    1b84:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1b86:	68c0      	ldr	r0, [r0, #12]
    1b88:	4b04      	ldr	r3, [pc, #16]	; (1b9c <_timer_set_irq+0x18>)
    1b8a:	469c      	mov	ip, r3
    1b8c:	4460      	add	r0, ip
    1b8e:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    1b90:	300d      	adds	r0, #13
    1b92:	b2c0      	uxtb	r0, r0
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <_timer_set_irq+0x1c>)
    1b96:	4798      	blx	r3
}
    1b98:	bd10      	pop	{r4, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	bdffe800 	.word	0xbdffe800
    1ba0:	00001489 	.word	0x00001489

00001ba4 <TC1_Handler>:
{
    1ba4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc1_dev);
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <TC1_Handler+0x1c>)
    1ba8:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1baa:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1bac:	7b9a      	ldrb	r2, [r3, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1bae:	07d2      	lsls	r2, r2, #31
    1bb0:	d400      	bmi.n	1bb4 <TC1_Handler+0x10>
}
    1bb2:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1bb4:	2201      	movs	r2, #1
    1bb6:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    1bb8:	6803      	ldr	r3, [r0, #0]
    1bba:	4798      	blx	r3
}
    1bbc:	e7f9      	b.n	1bb2 <TC1_Handler+0xe>
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	20000280 	.word	0x20000280

00001bc4 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1bc4:	2000      	movs	r0, #0
    1bc6:	4770      	bx	lr

00001bc8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1bca:	7c83      	ldrb	r3, [r0, #18]
    1bcc:	220f      	movs	r2, #15
    1bce:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bd0:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    1bd2:	3a08      	subs	r2, #8
    1bd4:	400a      	ands	r2, r1
    1bd6:	2a01      	cmp	r2, #1
    1bd8:	d00b      	beq.n	1bf2 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bda:	015a      	lsls	r2, r3, #5
    1bdc:	4919      	ldr	r1, [pc, #100]	; (1c44 <_usb_d_dev_handle_setup+0x7c>)
    1bde:	468c      	mov	ip, r1
    1be0:	4462      	add	r2, ip
    1be2:	2110      	movs	r1, #16
    1be4:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1be6:	015b      	lsls	r3, r3, #5
    1be8:	4a17      	ldr	r2, [pc, #92]	; (1c48 <_usb_d_dev_handle_setup+0x80>)
    1bea:	4694      	mov	ip, r2
    1bec:	4463      	add	r3, ip
    1bee:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    1bf0:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1bf2:	064a      	lsls	r2, r1, #25
    1bf4:	d50e      	bpl.n	1c14 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1bf6:	7cc2      	ldrb	r2, [r0, #19]
    1bf8:	2140      	movs	r1, #64	; 0x40
    1bfa:	438a      	bics	r2, r1
    1bfc:	74c2      	strb	r2, [r0, #19]
    1bfe:	015a      	lsls	r2, r3, #5
    1c00:	4c12      	ldr	r4, [pc, #72]	; (1c4c <_usb_d_dev_handle_setup+0x84>)
    1c02:	46a4      	mov	ip, r4
    1c04:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c06:	2580      	movs	r5, #128	; 0x80
    1c08:	2482      	movs	r4, #130	; 0x82
    1c0a:	0064      	lsls	r4, r4, #1
    1c0c:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c0e:	2406      	movs	r4, #6
    1c10:	34ff      	adds	r4, #255	; 0xff
    1c12:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    1c14:	7cc2      	ldrb	r2, [r0, #19]
    1c16:	2108      	movs	r1, #8
    1c18:	438a      	bics	r2, r1
    1c1a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1c1c:	490c      	ldr	r1, [pc, #48]	; (1c50 <_usb_d_dev_handle_setup+0x88>)
    1c1e:	015a      	lsls	r2, r3, #5
    1c20:	188c      	adds	r4, r1, r2
    1c22:	2500      	movs	r5, #0
    1c24:	72a5      	strb	r5, [r4, #10]
    1c26:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1c28:	0013      	movs	r3, r2
    1c2a:	4c06      	ldr	r4, [pc, #24]	; (1c44 <_usb_d_dev_handle_setup+0x7c>)
    1c2c:	46a4      	mov	ip, r4
    1c2e:	4463      	add	r3, ip
    1c30:	246f      	movs	r4, #111	; 0x6f
    1c32:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1c34:	4b04      	ldr	r3, [pc, #16]	; (1c48 <_usb_d_dev_handle_setup+0x80>)
    1c36:	469c      	mov	ip, r3
    1c38:	4462      	add	r2, ip
    1c3a:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1c3c:	7c80      	ldrb	r0, [r0, #18]
    1c3e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1c40:	4798      	blx	r3
    1c42:	e7d5      	b.n	1bf0 <_usb_d_dev_handle_setup+0x28>
    1c44:	41005100 	.word	0x41005100
    1c48:	41005108 	.word	0x41005108
    1c4c:	41005000 	.word	0x41005000
    1c50:	20000284 	.word	0x20000284

00001c54 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1c54:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1c56:	2220      	movs	r2, #32
    1c58:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1c5a:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c5c:	7c81      	ldrb	r1, [r0, #18]
    1c5e:	230f      	movs	r3, #15
    1c60:	400b      	ands	r3, r1
    1c62:	015b      	lsls	r3, r3, #5
    1c64:	4905      	ldr	r1, [pc, #20]	; (1c7c <_usb_d_dev_handle_stall+0x28>)
    1c66:	468c      	mov	ip, r1
    1c68:	4463      	add	r3, ip
    1c6a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1c6c:	6882      	ldr	r2, [r0, #8]
    1c6e:	7c80      	ldrb	r0, [r0, #18]
    1c70:	4b03      	ldr	r3, [pc, #12]	; (1c80 <_usb_d_dev_handle_stall+0x2c>)
    1c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1c74:	2101      	movs	r1, #1
    1c76:	4798      	blx	r3
}
    1c78:	bd10      	pop	{r4, pc}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	41005108 	.word	0x41005108
    1c80:	20000284 	.word	0x20000284

00001c84 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1c84:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1c86:	7c83      	ldrb	r3, [r0, #18]
    1c88:	2bff      	cmp	r3, #255	; 0xff
    1c8a:	d002      	beq.n	1c92 <_usb_d_dev_trans_done+0xe>
    1c8c:	7cc2      	ldrb	r2, [r0, #19]
    1c8e:	0652      	lsls	r2, r2, #25
    1c90:	d400      	bmi.n	1c94 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    1c92:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    1c94:	7cc2      	ldrb	r2, [r0, #19]
    1c96:	2440      	movs	r4, #64	; 0x40
    1c98:	43a2      	bics	r2, r4
    1c9a:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1c9c:	6882      	ldr	r2, [r0, #8]
    1c9e:	4802      	ldr	r0, [pc, #8]	; (1ca8 <_usb_d_dev_trans_done+0x24>)
    1ca0:	6f04      	ldr	r4, [r0, #112]	; 0x70
    1ca2:	0018      	movs	r0, r3
    1ca4:	47a0      	blx	r4
    1ca6:	e7f4      	b.n	1c92 <_usb_d_dev_trans_done+0xe>
    1ca8:	20000284 	.word	0x20000284

00001cac <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1cac:	b530      	push	{r4, r5, lr}
    1cae:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cb0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    1cb2:	ac01      	add	r4, sp, #4
    1cb4:	2525      	movs	r5, #37	; 0x25
    1cb6:	7025      	strb	r5, [r4, #0]
    1cb8:	3525      	adds	r5, #37	; 0x25
    1cba:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1cbc:	2bff      	cmp	r3, #255	; 0xff
    1cbe:	d01b      	beq.n	1cf8 <_usb_d_dev_trans_stop+0x4c>
    1cc0:	7cc4      	ldrb	r4, [r0, #19]
    1cc2:	0664      	lsls	r4, r4, #25
    1cc4:	d518      	bpl.n	1cf8 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1cc6:	240f      	movs	r4, #15
    1cc8:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1cca:	2900      	cmp	r1, #0
    1ccc:	d016      	beq.n	1cfc <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cce:	015c      	lsls	r4, r3, #5
    1cd0:	4d0e      	ldr	r5, [pc, #56]	; (1d0c <_usb_d_dev_trans_stop+0x60>)
    1cd2:	46ac      	mov	ip, r5
    1cd4:	4464      	add	r4, ip
    1cd6:	2580      	movs	r5, #128	; 0x80
    1cd8:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1cda:	ac01      	add	r4, sp, #4
    1cdc:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cde:	0159      	lsls	r1, r3, #5
    1ce0:	4d0a      	ldr	r5, [pc, #40]	; (1d0c <_usb_d_dev_trans_stop+0x60>)
    1ce2:	46ac      	mov	ip, r5
    1ce4:	4461      	add	r1, ip
    1ce6:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ce8:	015b      	lsls	r3, r3, #5
    1cea:	4909      	ldr	r1, [pc, #36]	; (1d10 <_usb_d_dev_trans_stop+0x64>)
    1cec:	468c      	mov	ip, r1
    1cee:	4463      	add	r3, ip
    1cf0:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1cf2:	0011      	movs	r1, r2
    1cf4:	4b07      	ldr	r3, [pc, #28]	; (1d14 <_usb_d_dev_trans_stop+0x68>)
    1cf6:	4798      	blx	r3
}
    1cf8:	b003      	add	sp, #12
    1cfa:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1cfc:	015c      	lsls	r4, r3, #5
    1cfe:	4d03      	ldr	r5, [pc, #12]	; (1d0c <_usb_d_dev_trans_stop+0x60>)
    1d00:	46ac      	mov	ip, r5
    1d02:	4464      	add	r4, ip
    1d04:	2540      	movs	r5, #64	; 0x40
    1d06:	7165      	strb	r5, [r4, #5]
    1d08:	e7e7      	b.n	1cda <_usb_d_dev_trans_stop+0x2e>
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	41005100 	.word	0x41005100
    1d10:	41005108 	.word	0x41005108
    1d14:	00001c85 	.word	0x00001c85

00001d18 <_usb_d_dev_handle_trfail>:
{
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1d1c:	7c83      	ldrb	r3, [r0, #18]
    1d1e:	220f      	movs	r2, #15
    1d20:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1d22:	aa01      	add	r2, sp, #4
    1d24:	2404      	movs	r4, #4
    1d26:	7014      	strb	r4, [r2, #0]
    1d28:	3404      	adds	r4, #4
    1d2a:	7054      	strb	r4, [r2, #1]
    1d2c:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    1d2e:	2900      	cmp	r1, #0
    1d30:	d031      	beq.n	1d96 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d32:	001a      	movs	r2, r3
    1d34:	3208      	adds	r2, #8
    1d36:	0152      	lsls	r2, r2, #5
    1d38:	4c32      	ldr	r4, [pc, #200]	; (1e04 <_usb_d_dev_handle_trfail+0xec>)
    1d3a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1d3c:	0664      	lsls	r4, r4, #25
    1d3e:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1d40:	010a      	lsls	r2, r1, #4
    1d42:	1952      	adds	r2, r2, r5
    1d44:	4d30      	ldr	r5, [pc, #192]	; (1e08 <_usb_d_dev_handle_trfail+0xf0>)
    1d46:	18aa      	adds	r2, r5, r2
    1d48:	7a95      	ldrb	r5, [r2, #10]
    1d4a:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1d4c:	2c02      	cmp	r4, #2
    1d4e:	d02a      	beq.n	1da6 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1d50:	07ac      	lsls	r4, r5, #30
    1d52:	d541      	bpl.n	1dd8 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1d54:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1d56:	7a94      	ldrb	r4, [r2, #10]
    1d58:	2602      	movs	r6, #2
    1d5a:	43b4      	bics	r4, r6
    1d5c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1d5e:	aa01      	add	r2, sp, #4
    1d60:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d62:	015a      	lsls	r2, r3, #5
    1d64:	4e29      	ldr	r6, [pc, #164]	; (1e0c <_usb_d_dev_handle_trfail+0xf4>)
    1d66:	46b4      	mov	ip, r6
    1d68:	4462      	add	r2, ip
    1d6a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1d6c:	015b      	lsls	r3, r3, #5
    1d6e:	4a28      	ldr	r2, [pc, #160]	; (1e10 <_usb_d_dev_handle_trfail+0xf8>)
    1d70:	4694      	mov	ip, r2
    1d72:	4463      	add	r3, ip
    1d74:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1d76:	2307      	movs	r3, #7
    1d78:	402b      	ands	r3, r5
    1d7a:	2b01      	cmp	r3, #1
    1d7c:	d13f      	bne.n	1dfe <_usb_d_dev_handle_trfail+0xe6>
    1d7e:	7cc3      	ldrb	r3, [r0, #19]
    1d80:	065b      	lsls	r3, r3, #25
    1d82:	d53c      	bpl.n	1dfe <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1d84:	7cc3      	ldrb	r3, [r0, #19]
    1d86:	09db      	lsrs	r3, r3, #7
    1d88:	4299      	cmp	r1, r3
    1d8a:	d038      	beq.n	1dfe <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1d8c:	2200      	movs	r2, #0
    1d8e:	0019      	movs	r1, r3
    1d90:	4b20      	ldr	r3, [pc, #128]	; (1e14 <_usb_d_dev_handle_trfail+0xfc>)
    1d92:	4798      	blx	r3
    1d94:	e033      	b.n	1dfe <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d96:	001a      	movs	r2, r3
    1d98:	3208      	adds	r2, #8
    1d9a:	0152      	lsls	r2, r2, #5
    1d9c:	4c19      	ldr	r4, [pc, #100]	; (1e04 <_usb_d_dev_handle_trfail+0xec>)
    1d9e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1da0:	2207      	movs	r2, #7
    1da2:	4014      	ands	r4, r2
    1da4:	e7cc      	b.n	1d40 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1da6:	07ec      	lsls	r4, r5, #31
    1da8:	d5d2      	bpl.n	1d50 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1daa:	7a94      	ldrb	r4, [r2, #10]
    1dac:	2501      	movs	r5, #1
    1dae:	43ac      	bics	r4, r5
    1db0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1db2:	aa01      	add	r2, sp, #4
    1db4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1db6:	015a      	lsls	r2, r3, #5
    1db8:	4d14      	ldr	r5, [pc, #80]	; (1e0c <_usb_d_dev_handle_trfail+0xf4>)
    1dba:	46ac      	mov	ip, r5
    1dbc:	4462      	add	r2, ip
    1dbe:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1dc0:	015b      	lsls	r3, r3, #5
    1dc2:	4a13      	ldr	r2, [pc, #76]	; (1e10 <_usb_d_dev_handle_trfail+0xf8>)
    1dc4:	4694      	mov	ip, r2
    1dc6:	4463      	add	r3, ip
    1dc8:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1dca:	1e4b      	subs	r3, r1, #1
    1dcc:	4199      	sbcs	r1, r3
    1dce:	b2c9      	uxtb	r1, r1
    1dd0:	2204      	movs	r2, #4
    1dd2:	4b10      	ldr	r3, [pc, #64]	; (1e14 <_usb_d_dev_handle_trfail+0xfc>)
    1dd4:	4798      	blx	r3
    1dd6:	e012      	b.n	1dfe <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    1dd8:	005a      	lsls	r2, r3, #1
    1dda:	1852      	adds	r2, r2, r1
    1ddc:	0112      	lsls	r2, r2, #4
    1dde:	480a      	ldr	r0, [pc, #40]	; (1e08 <_usb_d_dev_handle_trfail+0xf0>)
    1de0:	1882      	adds	r2, r0, r2
    1de2:	2000      	movs	r0, #0
    1de4:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1de6:	aa01      	add	r2, sp, #4
    1de8:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1dea:	015a      	lsls	r2, r3, #5
    1dec:	4807      	ldr	r0, [pc, #28]	; (1e0c <_usb_d_dev_handle_trfail+0xf4>)
    1dee:	4684      	mov	ip, r0
    1df0:	4462      	add	r2, ip
    1df2:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1df4:	015b      	lsls	r3, r3, #5
    1df6:	4a06      	ldr	r2, [pc, #24]	; (1e10 <_usb_d_dev_handle_trfail+0xf8>)
    1df8:	4694      	mov	ip, r2
    1dfa:	4463      	add	r3, ip
    1dfc:	7019      	strb	r1, [r3, #0]
}
    1dfe:	b002      	add	sp, #8
    1e00:	bd70      	pop	{r4, r5, r6, pc}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	41005000 	.word	0x41005000
    1e08:	20000284 	.word	0x20000284
    1e0c:	41005100 	.word	0x41005100
    1e10:	41005108 	.word	0x41005108
    1e14:	00001cad 	.word	0x00001cad

00001e18 <_usb_d_dev_reset_epts>:
{
    1e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e1a:	46c6      	mov	lr, r8
    1e1c:	b500      	push	{lr}
    1e1e:	4d0c      	ldr	r5, [pc, #48]	; (1e50 <_usb_d_dev_reset_epts+0x38>)
    1e20:	002c      	movs	r4, r5
    1e22:	3474      	adds	r4, #116	; 0x74
    1e24:	3529      	adds	r5, #41	; 0x29
    1e26:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e28:	4b0a      	ldr	r3, [pc, #40]	; (1e54 <_usb_d_dev_reset_epts+0x3c>)
    1e2a:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    1e2c:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    1e2e:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1e30:	2103      	movs	r1, #3
    1e32:	0020      	movs	r0, r4
    1e34:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    1e36:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1e38:	74e6      	strb	r6, [r4, #19]
    1e3a:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1e3c:	42ac      	cmp	r4, r5
    1e3e:	d1f7      	bne.n	1e30 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1e40:	2260      	movs	r2, #96	; 0x60
    1e42:	2100      	movs	r1, #0
    1e44:	4802      	ldr	r0, [pc, #8]	; (1e50 <_usb_d_dev_reset_epts+0x38>)
    1e46:	4b04      	ldr	r3, [pc, #16]	; (1e58 <_usb_d_dev_reset_epts+0x40>)
    1e48:	4798      	blx	r3
}
    1e4a:	bc04      	pop	{r2}
    1e4c:	4690      	mov	r8, r2
    1e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e50:	20000284 	.word	0x20000284
    1e54:	00001c85 	.word	0x00001c85
    1e58:	00003c47 	.word	0x00003c47

00001e5c <_usb_d_dev_in_next>:
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	46c6      	mov	lr, r8
    1e60:	b500      	push	{lr}
    1e62:	0004      	movs	r4, r0
    1e64:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1e66:	7c83      	ldrb	r3, [r0, #18]
    1e68:	250f      	movs	r5, #15
    1e6a:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e6c:	2900      	cmp	r1, #0
    1e6e:	d100      	bne.n	1e72 <_usb_d_dev_in_next+0x16>
    1e70:	e0aa      	b.n	1fc8 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1e72:	016a      	lsls	r2, r5, #5
    1e74:	4b5a      	ldr	r3, [pc, #360]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1e76:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1e78:	6958      	ldr	r0, [r3, #20]
    1e7a:	0480      	lsls	r0, r0, #18
    1e7c:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1e7e:	8a23      	ldrh	r3, [r4, #16]
    1e80:	4a58      	ldr	r2, [pc, #352]	; (1fe4 <_usb_d_dev_in_next+0x188>)
    1e82:	4293      	cmp	r3, r2
    1e84:	d100      	bne.n	1e88 <_usb_d_dev_in_next+0x2c>
    1e86:	e09a      	b.n	1fbe <_usb_d_dev_in_next+0x162>
    1e88:	3b01      	subs	r3, #1
    1e8a:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1e8c:	7ce3      	ldrb	r3, [r4, #19]
    1e8e:	2707      	movs	r7, #7
    1e90:	401f      	ands	r7, r3
	if (isr) {
    1e92:	2e00      	cmp	r6, #0
    1e94:	d005      	beq.n	1ea2 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1e96:	016b      	lsls	r3, r5, #5
    1e98:	4953      	ldr	r1, [pc, #332]	; (1fe8 <_usb_d_dev_in_next+0x18c>)
    1e9a:	468c      	mov	ip, r1
    1e9c:	4463      	add	r3, ip
    1e9e:	2102      	movs	r1, #2
    1ea0:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    1ea2:	68a3      	ldr	r3, [r4, #8]
    1ea4:	18c1      	adds	r1, r0, r3
    1ea6:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1ea8:	6863      	ldr	r3, [r4, #4]
    1eaa:	4299      	cmp	r1, r3
    1eac:	d24a      	bcs.n	1f44 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1eae:	1a5b      	subs	r3, r3, r1
    1eb0:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    1eb2:	7ce2      	ldrb	r2, [r4, #19]
    1eb4:	0692      	lsls	r2, r2, #26
    1eb6:	d535      	bpl.n	1f24 <_usb_d_dev_in_next+0xc8>
    1eb8:	8a22      	ldrh	r2, [r4, #16]
    1eba:	1c10      	adds	r0, r2, #0
    1ebc:	b292      	uxth	r2, r2
    1ebe:	429a      	cmp	r2, r3
    1ec0:	d900      	bls.n	1ec4 <_usb_d_dev_in_next+0x68>
    1ec2:	1c18      	adds	r0, r3, #0
    1ec4:	b283      	uxth	r3, r0
    1ec6:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1ec8:	6823      	ldr	r3, [r4, #0]
    1eca:	469c      	mov	ip, r3
    1ecc:	4461      	add	r1, ip
    1ece:	4642      	mov	r2, r8
    1ed0:	68e0      	ldr	r0, [r4, #12]
    1ed2:	4b46      	ldr	r3, [pc, #280]	; (1fec <_usb_d_dev_in_next+0x190>)
    1ed4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    1ed6:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    1ed8:	016a      	lsls	r2, r5, #5
    1eda:	4b41      	ldr	r3, [pc, #260]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1edc:	189b      	adds	r3, r3, r2
    1ede:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1ee0:	016a      	lsls	r2, r5, #5
    1ee2:	4b3f      	ldr	r3, [pc, #252]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1ee4:	189b      	adds	r3, r3, r2
    1ee6:	695a      	ldr	r2, [r3, #20]
    1ee8:	4641      	mov	r1, r8
    1eea:	0489      	lsls	r1, r1, #18
    1eec:	0c89      	lsrs	r1, r1, #18
    1eee:	0b92      	lsrs	r2, r2, #14
    1ef0:	0392      	lsls	r2, r2, #14
    1ef2:	430a      	orrs	r2, r1
    1ef4:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1ef6:	695a      	ldr	r2, [r3, #20]
    1ef8:	493d      	ldr	r1, [pc, #244]	; (1ff0 <_usb_d_dev_in_next+0x194>)
    1efa:	400a      	ands	r2, r1
    1efc:	615a      	str	r2, [r3, #20]
	if (!isr) {
    1efe:	2e00      	cmp	r6, #0
    1f00:	d107      	bne.n	1f12 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    1f02:	2f01      	cmp	r7, #1
    1f04:	d059      	beq.n	1fba <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    1f06:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1f08:	016b      	lsls	r3, r5, #5
    1f0a:	493a      	ldr	r1, [pc, #232]	; (1ff4 <_usb_d_dev_in_next+0x198>)
    1f0c:	468c      	mov	ip, r1
    1f0e:	4463      	add	r3, ip
    1f10:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1f12:	016d      	lsls	r5, r5, #5
    1f14:	4b34      	ldr	r3, [pc, #208]	; (1fe8 <_usb_d_dev_in_next+0x18c>)
    1f16:	469c      	mov	ip, r3
    1f18:	4465      	add	r5, ip
    1f1a:	2380      	movs	r3, #128	; 0x80
    1f1c:	716b      	strb	r3, [r5, #5]
}
    1f1e:	bc04      	pop	{r2}
    1f20:	4690      	mov	r8, r2
    1f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f24:	1c1a      	adds	r2, r3, #0
    1f26:	2080      	movs	r0, #128	; 0x80
    1f28:	0180      	lsls	r0, r0, #6
    1f2a:	4283      	cmp	r3, r0
    1f2c:	d901      	bls.n	1f32 <_usb_d_dev_in_next+0xd6>
    1f2e:	4b32      	ldr	r3, [pc, #200]	; (1ff8 <_usb_d_dev_in_next+0x19c>)
    1f30:	881a      	ldrh	r2, [r3, #0]
    1f32:	b293      	uxth	r3, r2
    1f34:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1f36:	6823      	ldr	r3, [r4, #0]
    1f38:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1f3a:	016a      	lsls	r2, r5, #5
    1f3c:	4b28      	ldr	r3, [pc, #160]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1f3e:	189b      	adds	r3, r3, r2
    1f40:	6119      	str	r1, [r3, #16]
    1f42:	e7cd      	b.n	1ee0 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    1f44:	7ce3      	ldrb	r3, [r4, #19]
    1f46:	06db      	lsls	r3, r3, #27
    1f48:	d50f      	bpl.n	1f6a <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1f4a:	7ce3      	ldrb	r3, [r4, #19]
    1f4c:	2210      	movs	r2, #16
    1f4e:	4393      	bics	r3, r2
    1f50:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1f52:	016a      	lsls	r2, r5, #5
    1f54:	4b22      	ldr	r3, [pc, #136]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1f56:	189b      	adds	r3, r3, r2
    1f58:	695a      	ldr	r2, [r3, #20]
    1f5a:	0b92      	lsrs	r2, r2, #14
    1f5c:	0392      	lsls	r2, r2, #14
    1f5e:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1f60:	695a      	ldr	r2, [r3, #20]
    1f62:	4923      	ldr	r1, [pc, #140]	; (1ff0 <_usb_d_dev_in_next+0x194>)
    1f64:	400a      	ands	r2, r1
    1f66:	615a      	str	r2, [r3, #20]
    1f68:	e7c9      	b.n	1efe <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1f6a:	2f01      	cmp	r7, #1
    1f6c:	d00e      	beq.n	1f8c <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f6e:	016d      	lsls	r5, r5, #5
    1f70:	4b22      	ldr	r3, [pc, #136]	; (1ffc <_usb_d_dev_in_next+0x1a0>)
    1f72:	469c      	mov	ip, r3
    1f74:	4465      	add	r5, ip
    1f76:	234a      	movs	r3, #74	; 0x4a
    1f78:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1f7a:	8a21      	ldrh	r1, [r4, #16]
    1f7c:	4002      	ands	r2, r0
    1f7e:	4291      	cmp	r1, r2
    1f80:	d00b      	beq.n	1f9a <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1f82:	2100      	movs	r1, #0
    1f84:	0020      	movs	r0, r4
    1f86:	4b1e      	ldr	r3, [pc, #120]	; (2000 <_usb_d_dev_in_next+0x1a4>)
    1f88:	4798      	blx	r3
	return;
    1f8a:	e7c8      	b.n	1f1e <_usb_d_dev_in_next+0xc2>
    1f8c:	016d      	lsls	r5, r5, #5
    1f8e:	4b1b      	ldr	r3, [pc, #108]	; (1ffc <_usb_d_dev_in_next+0x1a0>)
    1f90:	469c      	mov	ip, r3
    1f92:	4465      	add	r5, ip
    1f94:	234b      	movs	r3, #75	; 0x4b
    1f96:	702b      	strb	r3, [r5, #0]
    1f98:	e7ef      	b.n	1f7a <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1f9a:	7ce3      	ldrb	r3, [r4, #19]
    1f9c:	2240      	movs	r2, #64	; 0x40
    1f9e:	4393      	bics	r3, r2
    1fa0:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1fa2:	7ca0      	ldrb	r0, [r4, #18]
    1fa4:	4b0e      	ldr	r3, [pc, #56]	; (1fe0 <_usb_d_dev_in_next+0x184>)
    1fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1fa8:	68a1      	ldr	r1, [r4, #8]
    1faa:	4798      	blx	r3
    1fac:	2800      	cmp	r0, #0
    1fae:	d1b6      	bne.n	1f1e <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1fb0:	7ce3      	ldrb	r3, [r4, #19]
    1fb2:	2240      	movs	r2, #64	; 0x40
    1fb4:	4313      	orrs	r3, r2
    1fb6:	74e3      	strb	r3, [r4, #19]
    1fb8:	e7e3      	b.n	1f82 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1fba:	224e      	movs	r2, #78	; 0x4e
    1fbc:	e7a4      	b.n	1f08 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1fbe:	7ce7      	ldrb	r7, [r4, #19]
    1fc0:	2307      	movs	r3, #7
    1fc2:	401f      	ands	r7, r3
    1fc4:	4a07      	ldr	r2, [pc, #28]	; (1fe4 <_usb_d_dev_in_next+0x188>)
    1fc6:	e766      	b.n	1e96 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1fc8:	8a03      	ldrh	r3, [r0, #16]
    1fca:	4a06      	ldr	r2, [pc, #24]	; (1fe4 <_usb_d_dev_in_next+0x188>)
    1fcc:	2000      	movs	r0, #0
    1fce:	4293      	cmp	r3, r2
    1fd0:	d000      	beq.n	1fd4 <_usb_d_dev_in_next+0x178>
    1fd2:	e759      	b.n	1e88 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1fd4:	7ce3      	ldrb	r3, [r4, #19]
    1fd6:	2707      	movs	r7, #7
    1fd8:	401f      	ands	r7, r3
    1fda:	2000      	movs	r0, #0
    1fdc:	4a01      	ldr	r2, [pc, #4]	; (1fe4 <_usb_d_dev_in_next+0x188>)
    1fde:	e760      	b.n	1ea2 <_usb_d_dev_in_next+0x46>
    1fe0:	20000284 	.word	0x20000284
    1fe4:	000003ff 	.word	0x000003ff
    1fe8:	41005100 	.word	0x41005100
    1fec:	00003c35 	.word	0x00003c35
    1ff0:	f0003fff 	.word	0xf0003fff
    1ff4:	41005109 	.word	0x41005109
    1ff8:	00003d24 	.word	0x00003d24
    1ffc:	41005108 	.word	0x41005108
    2000:	00001c85 	.word	0x00001c85

00002004 <_usb_d_dev_out_next>:
{
    2004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2006:	46de      	mov	lr, fp
    2008:	4657      	mov	r7, sl
    200a:	464e      	mov	r6, r9
    200c:	4645      	mov	r5, r8
    200e:	b5e0      	push	{r5, r6, r7, lr}
    2010:	0004      	movs	r4, r0
    2012:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2014:	7c83      	ldrb	r3, [r0, #18]
    2016:	250f      	movs	r5, #15
    2018:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    201a:	2900      	cmp	r1, #0
    201c:	d057      	beq.n	20ce <_usb_d_dev_out_next+0xca>
    201e:	016a      	lsls	r2, r5, #5
    2020:	4b7d      	ldr	r3, [pc, #500]	; (2218 <_usb_d_dev_out_next+0x214>)
    2022:	189b      	adds	r3, r3, r2
    2024:	685a      	ldr	r2, [r3, #4]
    2026:	0112      	lsls	r2, r2, #4
    2028:	0c92      	lsrs	r2, r2, #18
    202a:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    202c:	685f      	ldr	r7, [r3, #4]
    202e:	04bf      	lsls	r7, r7, #18
    2030:	0cbf      	lsrs	r7, r7, #18
    2032:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2034:	8a06      	ldrh	r6, [r0, #16]
    2036:	4b79      	ldr	r3, [pc, #484]	; (221c <_usb_d_dev_out_next+0x218>)
    2038:	429e      	cmp	r6, r3
    203a:	d100      	bne.n	203e <_usb_d_dev_out_next+0x3a>
    203c:	e0cd      	b.n	21da <_usb_d_dev_out_next+0x1d6>
    203e:	3e01      	subs	r6, #1
    2040:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2042:	465f      	mov	r7, fp
    2044:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2046:	7ce3      	ldrb	r3, [r4, #19]
    2048:	2207      	movs	r2, #7
    204a:	401a      	ands	r2, r3
    204c:	4691      	mov	r9, r2
	if (isr) {
    204e:	4643      	mov	r3, r8
    2050:	2b00      	cmp	r3, #0
    2052:	d005      	beq.n	2060 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2054:	016b      	lsls	r3, r5, #5
    2056:	4a72      	ldr	r2, [pc, #456]	; (2220 <_usb_d_dev_out_next+0x21c>)
    2058:	4694      	mov	ip, r2
    205a:	4463      	add	r3, ip
    205c:	2201      	movs	r2, #1
    205e:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2060:	7ce3      	ldrb	r3, [r4, #19]
    2062:	069b      	lsls	r3, r3, #26
    2064:	d50f      	bpl.n	2086 <_usb_d_dev_out_next+0x82>
    2066:	6863      	ldr	r3, [r4, #4]
    2068:	2b00      	cmp	r3, #0
    206a:	d039      	beq.n	20e0 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    206c:	68a0      	ldr	r0, [r4, #8]
    206e:	1a1b      	subs	r3, r3, r0
    2070:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2072:	6822      	ldr	r2, [r4, #0]
    2074:	4694      	mov	ip, r2
    2076:	4460      	add	r0, ip
    2078:	68e1      	ldr	r1, [r4, #12]
    207a:	001a      	movs	r2, r3
    207c:	42bb      	cmp	r3, r7
    207e:	d900      	bls.n	2082 <_usb_d_dev_out_next+0x7e>
    2080:	003a      	movs	r2, r7
    2082:	4b68      	ldr	r3, [pc, #416]	; (2224 <_usb_d_dev_out_next+0x220>)
    2084:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2086:	6863      	ldr	r3, [r4, #4]
    2088:	2b00      	cmp	r3, #0
    208a:	d029      	beq.n	20e0 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    208c:	4642      	mov	r2, r8
    208e:	2a00      	cmp	r2, #0
    2090:	d042      	beq.n	2118 <_usb_d_dev_out_next+0x114>
    2092:	8a22      	ldrh	r2, [r4, #16]
    2094:	42ba      	cmp	r2, r7
    2096:	d93f      	bls.n	2118 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    2098:	7ce3      	ldrb	r3, [r4, #19]
    209a:	2210      	movs	r2, #16
    209c:	4393      	bics	r3, r2
    209e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    20a0:	68a3      	ldr	r3, [r4, #8]
    20a2:	445b      	add	r3, fp
    20a4:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    20a6:	464b      	mov	r3, r9
    20a8:	2b01      	cmp	r3, #1
    20aa:	d100      	bne.n	20ae <_usb_d_dev_out_next+0xaa>
    20ac:	e087      	b.n	21be <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    20ae:	016b      	lsls	r3, r5, #5
    20b0:	4a5d      	ldr	r2, [pc, #372]	; (2228 <_usb_d_dev_out_next+0x224>)
    20b2:	4694      	mov	ip, r2
    20b4:	4463      	add	r3, ip
    20b6:	2225      	movs	r2, #37	; 0x25
    20b8:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    20ba:	2d00      	cmp	r5, #0
    20bc:	d102      	bne.n	20c4 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    20be:	4b56      	ldr	r3, [pc, #344]	; (2218 <_usb_d_dev_out_next+0x214>)
    20c0:	68e2      	ldr	r2, [r4, #12]
    20c2:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    20c4:	2100      	movs	r1, #0
    20c6:	0020      	movs	r0, r4
    20c8:	4b58      	ldr	r3, [pc, #352]	; (222c <_usb_d_dev_out_next+0x228>)
    20ca:	4798      	blx	r3
	return;
    20cc:	e059      	b.n	2182 <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    20ce:	8a06      	ldrh	r6, [r0, #16]
    20d0:	4b52      	ldr	r3, [pc, #328]	; (221c <_usb_d_dev_out_next+0x218>)
    20d2:	429e      	cmp	r6, r3
    20d4:	d100      	bne.n	20d8 <_usb_d_dev_out_next+0xd4>
    20d6:	e08e      	b.n	21f6 <_usb_d_dev_out_next+0x1f2>
    20d8:	2300      	movs	r3, #0
    20da:	469b      	mov	fp, r3
    20dc:	469a      	mov	sl, r3
    20de:	e7ae      	b.n	203e <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    20e0:	7ce3      	ldrb	r3, [r4, #19]
    20e2:	06db      	lsls	r3, r3, #27
    20e4:	d400      	bmi.n	20e8 <_usb_d_dev_out_next+0xe4>
    20e6:	e07f      	b.n	21e8 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    20e8:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    20ea:	2210      	movs	r2, #16
    20ec:	4393      	bics	r3, r2
    20ee:	2220      	movs	r2, #32
    20f0:	4313      	orrs	r3, r2
    20f2:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    20f4:	4a48      	ldr	r2, [pc, #288]	; (2218 <_usb_d_dev_out_next+0x214>)
    20f6:	016b      	lsls	r3, r5, #5
    20f8:	68e1      	ldr	r1, [r4, #12]
    20fa:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    20fc:	8a21      	ldrh	r1, [r4, #16]
    20fe:	18d3      	adds	r3, r2, r3
    2100:	685a      	ldr	r2, [r3, #4]
    2102:	0489      	lsls	r1, r1, #18
    2104:	0909      	lsrs	r1, r1, #4
    2106:	484a      	ldr	r0, [pc, #296]	; (2230 <_usb_d_dev_out_next+0x22c>)
    2108:	4002      	ands	r2, r0
    210a:	430a      	orrs	r2, r1
    210c:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    210e:	685a      	ldr	r2, [r3, #4]
    2110:	0b92      	lsrs	r2, r2, #14
    2112:	0392      	lsls	r2, r2, #14
    2114:	605a      	str	r2, [r3, #4]
    2116:	e022      	b.n	215e <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    2118:	68a2      	ldr	r2, [r4, #8]
    211a:	4452      	add	r2, sl
    211c:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    211e:	4293      	cmp	r3, r2
    2120:	d9c1      	bls.n	20a6 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    2122:	1a9b      	subs	r3, r3, r2
    2124:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2126:	7ce1      	ldrb	r1, [r4, #19]
    2128:	0689      	lsls	r1, r1, #26
    212a:	d530      	bpl.n	218e <_usb_d_dev_out_next+0x18a>
    212c:	8a22      	ldrh	r2, [r4, #16]
    212e:	1c11      	adds	r1, r2, #0
    2130:	b292      	uxth	r2, r2
    2132:	429a      	cmp	r2, r3
    2134:	d900      	bls.n	2138 <_usb_d_dev_out_next+0x134>
    2136:	1c19      	adds	r1, r3, #0
    2138:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    213a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    213c:	016a      	lsls	r2, r5, #5
    213e:	4936      	ldr	r1, [pc, #216]	; (2218 <_usb_d_dev_out_next+0x214>)
    2140:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2142:	016a      	lsls	r2, r5, #5
    2144:	4934      	ldr	r1, [pc, #208]	; (2218 <_usb_d_dev_out_next+0x214>)
    2146:	1889      	adds	r1, r1, r2
    2148:	684a      	ldr	r2, [r1, #4]
    214a:	049b      	lsls	r3, r3, #18
    214c:	091b      	lsrs	r3, r3, #4
    214e:	4838      	ldr	r0, [pc, #224]	; (2230 <_usb_d_dev_out_next+0x22c>)
    2150:	4002      	ands	r2, r0
    2152:	4313      	orrs	r3, r2
    2154:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2156:	684b      	ldr	r3, [r1, #4]
    2158:	0b9b      	lsrs	r3, r3, #14
    215a:	039b      	lsls	r3, r3, #14
    215c:	604b      	str	r3, [r1, #4]
	if (!isr) {
    215e:	4643      	mov	r3, r8
    2160:	2b00      	cmp	r3, #0
    2162:	d108      	bne.n	2176 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    2164:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    2166:	464b      	mov	r3, r9
    2168:	2b01      	cmp	r3, #1
    216a:	d02f      	beq.n	21cc <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    216c:	016b      	lsls	r3, r5, #5
    216e:	4931      	ldr	r1, [pc, #196]	; (2234 <_usb_d_dev_out_next+0x230>)
    2170:	468c      	mov	ip, r1
    2172:	4463      	add	r3, ip
    2174:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2176:	016d      	lsls	r5, r5, #5
    2178:	4b29      	ldr	r3, [pc, #164]	; (2220 <_usb_d_dev_out_next+0x21c>)
    217a:	469c      	mov	ip, r3
    217c:	4465      	add	r5, ip
    217e:	2340      	movs	r3, #64	; 0x40
    2180:	712b      	strb	r3, [r5, #4]
}
    2182:	bc3c      	pop	{r2, r3, r4, r5}
    2184:	4690      	mov	r8, r2
    2186:	4699      	mov	r9, r3
    2188:	46a2      	mov	sl, r4
    218a:	46ab      	mov	fp, r5
    218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    218e:	8a21      	ldrh	r1, [r4, #16]
    2190:	428b      	cmp	r3, r1
    2192:	d90a      	bls.n	21aa <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2194:	2180      	movs	r1, #128	; 0x80
    2196:	0189      	lsls	r1, r1, #6
    2198:	428b      	cmp	r3, r1
    219a:	d80d      	bhi.n	21b8 <_usb_d_dev_out_next+0x1b4>
    219c:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    219e:	6821      	ldr	r1, [r4, #0]
    21a0:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    21a2:	0169      	lsls	r1, r5, #5
    21a4:	481c      	ldr	r0, [pc, #112]	; (2218 <_usb_d_dev_out_next+0x214>)
    21a6:	500a      	str	r2, [r1, r0]
    21a8:	e7cb      	b.n	2142 <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    21aa:	428b      	cmp	r3, r1
    21ac:	d2f7      	bcs.n	219e <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    21ae:	7ce1      	ldrb	r1, [r4, #19]
    21b0:	2020      	movs	r0, #32
    21b2:	4301      	orrs	r1, r0
    21b4:	74e1      	strb	r1, [r4, #19]
    21b6:	e7f2      	b.n	219e <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    21b8:	2380      	movs	r3, #128	; 0x80
    21ba:	019b      	lsls	r3, r3, #6
    21bc:	e7ef      	b.n	219e <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    21be:	016b      	lsls	r3, r5, #5
    21c0:	4a19      	ldr	r2, [pc, #100]	; (2228 <_usb_d_dev_out_next+0x224>)
    21c2:	4694      	mov	ip, r2
    21c4:	4463      	add	r3, ip
    21c6:	222d      	movs	r2, #45	; 0x2d
    21c8:	701a      	strb	r2, [r3, #0]
    21ca:	e776      	b.n	20ba <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    21cc:	016a      	lsls	r2, r5, #5
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <_usb_d_dev_out_next+0x214>)
    21d0:	189b      	adds	r3, r3, r2
    21d2:	2200      	movs	r2, #0
    21d4:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    21d6:	322d      	adds	r2, #45	; 0x2d
    21d8:	e7c8      	b.n	216c <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    21da:	05bf      	lsls	r7, r7, #22
    21dc:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    21de:	7cc3      	ldrb	r3, [r0, #19]
    21e0:	2207      	movs	r2, #7
    21e2:	401a      	ands	r2, r3
    21e4:	4691      	mov	r9, r2
    21e6:	e735      	b.n	2054 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    21e8:	4643      	mov	r3, r8
    21ea:	2b00      	cmp	r3, #0
    21ec:	d10c      	bne.n	2208 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    21ee:	68a3      	ldr	r3, [r4, #8]
    21f0:	4453      	add	r3, sl
    21f2:	60a3      	str	r3, [r4, #8]
    21f4:	e757      	b.n	20a6 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    21f6:	7cc3      	ldrb	r3, [r0, #19]
    21f8:	2207      	movs	r2, #7
    21fa:	401a      	ands	r2, r3
    21fc:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    21fe:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2200:	2300      	movs	r3, #0
    2202:	469b      	mov	fp, r3
    2204:	469a      	mov	sl, r3
    2206:	e72b      	b.n	2060 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2208:	8a23      	ldrh	r3, [r4, #16]
    220a:	42bb      	cmp	r3, r7
    220c:	d900      	bls.n	2210 <_usb_d_dev_out_next+0x20c>
    220e:	e743      	b.n	2098 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    2210:	68a3      	ldr	r3, [r4, #8]
    2212:	4453      	add	r3, sl
    2214:	60a3      	str	r3, [r4, #8]
    2216:	e746      	b.n	20a6 <_usb_d_dev_out_next+0xa2>
    2218:	20000284 	.word	0x20000284
    221c:	000003ff 	.word	0x000003ff
    2220:	41005100 	.word	0x41005100
    2224:	00003c35 	.word	0x00003c35
    2228:	41005108 	.word	0x41005108
    222c:	00001c85 	.word	0x00001c85
    2230:	f0003fff 	.word	0xf0003fff
    2234:	41005109 	.word	0x41005109

00002238 <_usb_d_dev_init>:
{
    2238:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    223a:	4b31      	ldr	r3, [pc, #196]	; (2300 <_usb_d_dev_init+0xc8>)
    223c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    223e:	07db      	lsls	r3, r3, #31
    2240:	d41f      	bmi.n	2282 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2242:	492f      	ldr	r1, [pc, #188]	; (2300 <_usb_d_dev_init+0xc8>)
    2244:	2203      	movs	r2, #3
    2246:	788b      	ldrb	r3, [r1, #2]
    2248:	4213      	tst	r3, r2
    224a:	d1fc      	bne.n	2246 <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    224c:	4b2c      	ldr	r3, [pc, #176]	; (2300 <_usb_d_dev_init+0xc8>)
    224e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2250:	079b      	lsls	r3, r3, #30
    2252:	d50e      	bpl.n	2272 <_usb_d_dev_init+0x3a>
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2254:	4a2a      	ldr	r2, [pc, #168]	; (2300 <_usb_d_dev_init+0xc8>)
    2256:	7813      	ldrb	r3, [r2, #0]
    2258:	2102      	movs	r1, #2
    225a:	438b      	bics	r3, r1
    225c:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    225e:	0011      	movs	r1, r2
    2260:	2203      	movs	r2, #3
    2262:	788b      	ldrb	r3, [r1, #2]
    2264:	4213      	tst	r3, r2
    2266:	d1fc      	bne.n	2262 <_usb_d_dev_init+0x2a>
    2268:	4925      	ldr	r1, [pc, #148]	; (2300 <_usb_d_dev_init+0xc8>)
    226a:	2202      	movs	r2, #2
    226c:	788b      	ldrb	r3, [r1, #2]
    226e:	4213      	tst	r3, r2
    2270:	d1fc      	bne.n	226c <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    2272:	2201      	movs	r2, #1
    2274:	4b22      	ldr	r3, [pc, #136]	; (2300 <_usb_d_dev_init+0xc8>)
    2276:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2278:	0019      	movs	r1, r3
    227a:	3202      	adds	r2, #2
    227c:	788b      	ldrb	r3, [r1, #2]
    227e:	4213      	tst	r3, r2
    2280:	d1fc      	bne.n	227c <_usb_d_dev_init+0x44>
    2282:	491f      	ldr	r1, [pc, #124]	; (2300 <_usb_d_dev_init+0xc8>)
    2284:	2201      	movs	r2, #1
    2286:	788b      	ldrb	r3, [r1, #2]
    2288:	4213      	tst	r3, r2
    228a:	d1fc      	bne.n	2286 <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    228c:	4b1d      	ldr	r3, [pc, #116]	; (2304 <_usb_d_dev_init+0xcc>)
    228e:	4a1e      	ldr	r2, [pc, #120]	; (2308 <_usb_d_dev_init+0xd0>)
    2290:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2292:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2294:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2296:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    2298:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    229a:	4b1c      	ldr	r3, [pc, #112]	; (230c <_usb_d_dev_init+0xd4>)
    229c:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    229e:	4b1c      	ldr	r3, [pc, #112]	; (2310 <_usb_d_dev_init+0xd8>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    22a4:	211f      	movs	r1, #31
    22a6:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    22a8:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    22aa:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    22ac:	019b      	lsls	r3, r3, #6
    22ae:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    22b0:	2a1f      	cmp	r2, #31
    22b2:	d01f      	beq.n	22f4 <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    22b4:	291f      	cmp	r1, #31
    22b6:	d01f      	beq.n	22f8 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    22b8:	2b07      	cmp	r3, #7
    22ba:	d01f      	beq.n	22fc <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    22bc:	0192      	lsls	r2, r2, #6
    22be:	430a      	orrs	r2, r1
    22c0:	031b      	lsls	r3, r3, #12
    22c2:	4313      	orrs	r3, r2
    22c4:	4a0e      	ldr	r2, [pc, #56]	; (2300 <_usb_d_dev_init+0xc8>)
    22c6:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    22c8:	78d3      	ldrb	r3, [r2, #3]
    22ca:	2103      	movs	r1, #3
    22cc:	430b      	orrs	r3, r1
    22ce:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    22d0:	78d3      	ldrb	r3, [r2, #3]
    22d2:	210c      	movs	r1, #12
    22d4:	430b      	orrs	r3, r1
    22d6:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    22d8:	2304      	movs	r3, #4
    22da:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    22dc:	0011      	movs	r1, r2
    22de:	2203      	movs	r2, #3
    22e0:	788b      	ldrb	r3, [r1, #2]
    22e2:	4213      	tst	r3, r2
    22e4:	d1fc      	bne.n	22e0 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    22e6:	4b06      	ldr	r3, [pc, #24]	; (2300 <_usb_d_dev_init+0xc8>)
    22e8:	4a06      	ldr	r2, [pc, #24]	; (2304 <_usb_d_dev_init+0xcc>)
    22ea:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    22ec:	2201      	movs	r2, #1
    22ee:	811a      	strh	r2, [r3, #8]
}
    22f0:	2000      	movs	r0, #0
    22f2:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    22f4:	3a1a      	subs	r2, #26
    22f6:	e7dd      	b.n	22b4 <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    22f8:	3902      	subs	r1, #2
    22fa:	e7dd      	b.n	22b8 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    22fc:	3b02      	subs	r3, #2
    22fe:	e7dd      	b.n	22bc <_usb_d_dev_init+0x84>
    2300:	41005000 	.word	0x41005000
    2304:	20000284 	.word	0x20000284
    2308:	00001bc5 	.word	0x00001bc5
    230c:	00001e19 	.word	0x00001e19
    2310:	00806024 	.word	0x00806024

00002314 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    2314:	4b10      	ldr	r3, [pc, #64]	; (2358 <_usb_d_dev_enable+0x44>)
    2316:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    2318:	079b      	lsls	r3, r3, #30
    231a:	d11a      	bne.n	2352 <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    231c:	490e      	ldr	r1, [pc, #56]	; (2358 <_usb_d_dev_enable+0x44>)
    231e:	2203      	movs	r2, #3
    2320:	788b      	ldrb	r3, [r1, #2]
    2322:	4213      	tst	r3, r2
    2324:	d1fc      	bne.n	2320 <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    2326:	4b0c      	ldr	r3, [pc, #48]	; (2358 <_usb_d_dev_enable+0x44>)
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    232c:	079a      	lsls	r2, r3, #30
    232e:	d408      	bmi.n	2342 <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    2330:	2202      	movs	r2, #2
    2332:	4313      	orrs	r3, r2
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    2334:	4a08      	ldr	r2, [pc, #32]	; (2358 <_usb_d_dev_enable+0x44>)
    2336:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2338:	0011      	movs	r1, r2
    233a:	2203      	movs	r2, #3
    233c:	788b      	ldrb	r3, [r1, #2]
    233e:	4213      	tst	r3, r2
    2340:	d1fc      	bne.n	233c <_usb_d_dev_enable+0x28>
    2342:	2280      	movs	r2, #128	; 0x80
    2344:	4b05      	ldr	r3, [pc, #20]	; (235c <_usb_d_dev_enable+0x48>)
    2346:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2348:	4a05      	ldr	r2, [pc, #20]	; (2360 <_usb_d_dev_enable+0x4c>)
    234a:	4b03      	ldr	r3, [pc, #12]	; (2358 <_usb_d_dev_enable+0x44>)
    234c:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    234e:	2000      	movs	r0, #0
}
    2350:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2352:	2011      	movs	r0, #17
    2354:	4240      	negs	r0, r0
    2356:	e7fb      	b.n	2350 <_usb_d_dev_enable+0x3c>
    2358:	41005000 	.word	0x41005000
    235c:	e000e100 	.word	0xe000e100
    2360:	0000028d 	.word	0x0000028d

00002364 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2364:	4a02      	ldr	r2, [pc, #8]	; (2370 <_usb_d_dev_attach+0xc>)
    2366:	8913      	ldrh	r3, [r2, #8]
    2368:	2101      	movs	r1, #1
    236a:	438b      	bics	r3, r1
    236c:	8113      	strh	r3, [r2, #8]
}
    236e:	4770      	bx	lr
    2370:	41005000 	.word	0x41005000

00002374 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    2374:	2380      	movs	r3, #128	; 0x80
    2376:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2378:	4b01      	ldr	r3, [pc, #4]	; (2380 <_usb_d_dev_set_address+0xc>)
    237a:	7298      	strb	r0, [r3, #10]
}
    237c:	4770      	bx	lr
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	41005000 	.word	0x41005000

00002384 <_usb_d_dev_ep_init>:
{
    2384:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    2386:	240f      	movs	r4, #15
    2388:	4004      	ands	r4, r0
    238a:	b243      	sxtb	r3, r0
    238c:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    238e:	2c00      	cmp	r4, #0
    2390:	d054      	beq.n	243c <_usb_d_dev_ep_init+0xb8>
    2392:	0025      	movs	r5, r4
    2394:	2b00      	cmp	r3, #0
    2396:	db07      	blt.n	23a8 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2398:	2303      	movs	r3, #3
    239a:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    239c:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    239e:	2c02      	cmp	r4, #2
    23a0:	d950      	bls.n	2444 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    23a2:	2012      	movs	r0, #18
    23a4:	4240      	negs	r0, r0
    23a6:	e025      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    23a8:	1ca5      	adds	r5, r4, #2
    23aa:	e7f5      	b.n	2398 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23ac:	4663      	mov	r3, ip
    23ae:	2b00      	cmp	r3, #0
    23b0:	db21      	blt.n	23f6 <_usb_d_dev_ep_init+0x72>
    23b2:	007b      	lsls	r3, r7, #1
    23b4:	19db      	adds	r3, r3, r7
    23b6:	009b      	lsls	r3, r3, #2
    23b8:	4c3b      	ldr	r4, [pc, #236]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    23ba:	591b      	ldr	r3, [r3, r4]
    23bc:	2b00      	cmp	r3, #0
    23be:	d166      	bne.n	248e <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    23c0:	007b      	lsls	r3, r7, #1
    23c2:	19df      	adds	r7, r3, r7
    23c4:	00bf      	lsls	r7, r7, #2
    23c6:	4b38      	ldr	r3, [pc, #224]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    23c8:	58ff      	ldr	r7, [r7, r3]
    23ca:	4b38      	ldr	r3, [pc, #224]	; (24ac <_usb_d_dev_ep_init+0x128>)
    23cc:	00ae      	lsls	r6, r5, #2
    23ce:	1974      	adds	r4, r6, r5
    23d0:	00a4      	lsls	r4, r4, #2
    23d2:	191c      	adds	r4, r3, r4
    23d4:	3480      	adds	r4, #128	; 0x80
    23d6:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    23d8:	3360      	adds	r3, #96	; 0x60
    23da:	1974      	adds	r4, r6, r5
    23dc:	00a4      	lsls	r4, r4, #2
    23de:	191c      	adds	r4, r3, r4
    23e0:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    23e2:	3427      	adds	r4, #39	; 0x27
    23e4:	3101      	adds	r1, #1
    23e6:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    23e8:	1975      	adds	r5, r6, r5
    23ea:	00ad      	lsls	r5, r5, #2
    23ec:	195b      	adds	r3, r3, r5
    23ee:	3326      	adds	r3, #38	; 0x26
    23f0:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    23f2:	2000      	movs	r0, #0
}
    23f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    23f6:	007b      	lsls	r3, r7, #1
    23f8:	19db      	adds	r3, r3, r7
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	4c2a      	ldr	r4, [pc, #168]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    23fe:	18e3      	adds	r3, r4, r3
    2400:	685b      	ldr	r3, [r3, #4]
    2402:	2b00      	cmp	r3, #0
    2404:	d106      	bne.n	2414 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2406:	007b      	lsls	r3, r7, #1
    2408:	19df      	adds	r7, r3, r7
    240a:	00bf      	lsls	r7, r7, #2
    240c:	4b26      	ldr	r3, [pc, #152]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    240e:	19df      	adds	r7, r3, r7
    2410:	687f      	ldr	r7, [r7, #4]
    2412:	e7da      	b.n	23ca <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2414:	007b      	lsls	r3, r7, #1
    2416:	19db      	adds	r3, r3, r7
    2418:	009b      	lsls	r3, r3, #2
    241a:	4c23      	ldr	r4, [pc, #140]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    241c:	18e3      	adds	r3, r4, r3
    241e:	895b      	ldrh	r3, [r3, #10]
    2420:	4293      	cmp	r3, r2
    2422:	daf0      	bge.n	2406 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    2424:	2013      	movs	r0, #19
    2426:	4240      	negs	r0, r0
    2428:	e7e4      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    242a:	2014      	movs	r0, #20
    242c:	4240      	negs	r0, r0
    242e:	e7e1      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    2430:	2014      	movs	r0, #20
    2432:	4240      	negs	r0, r0
    2434:	e7de      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    2436:	2013      	movs	r0, #19
    2438:	4240      	negs	r0, r0
    243a:	e7db      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    243c:	2303      	movs	r3, #3
    243e:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    2440:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2442:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    2444:	00ab      	lsls	r3, r5, #2
    2446:	195b      	adds	r3, r3, r5
    2448:	009e      	lsls	r6, r3, #2
    244a:	4b18      	ldr	r3, [pc, #96]	; (24ac <_usb_d_dev_ep_init+0x128>)
    244c:	199b      	adds	r3, r3, r6
    244e:	3386      	adds	r3, #134	; 0x86
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	2bff      	cmp	r3, #255	; 0xff
    2454:	d1e9      	bne.n	242a <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    2456:	2900      	cmp	r1, #0
    2458:	d1a8      	bne.n	23ac <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    245a:	2c00      	cmp	r4, #0
    245c:	d004      	beq.n	2468 <_usb_d_dev_ep_init+0xe4>
    245e:	4663      	mov	r3, ip
    2460:	2b00      	cmp	r3, #0
    2462:	db01      	blt.n	2468 <_usb_d_dev_ep_init+0xe4>
    2464:	3402      	adds	r4, #2
    2466:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    2468:	00a3      	lsls	r3, r4, #2
    246a:	191b      	adds	r3, r3, r4
    246c:	009b      	lsls	r3, r3, #2
    246e:	4c0f      	ldr	r4, [pc, #60]	; (24ac <_usb_d_dev_ep_init+0x128>)
    2470:	18e4      	adds	r4, r4, r3
    2472:	3486      	adds	r4, #134	; 0x86
    2474:	7823      	ldrb	r3, [r4, #0]
    2476:	2bff      	cmp	r3, #255	; 0xff
    2478:	d1da      	bne.n	2430 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    247a:	007b      	lsls	r3, r7, #1
    247c:	19db      	adds	r3, r3, r7
    247e:	009b      	lsls	r3, r3, #2
    2480:	4c09      	ldr	r4, [pc, #36]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    2482:	591b      	ldr	r3, [r3, r4]
    2484:	2b00      	cmp	r3, #0
    2486:	d0d6      	beq.n	2436 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2488:	4663      	mov	r3, ip
    248a:	2b00      	cmp	r3, #0
    248c:	dbb3      	blt.n	23f6 <_usb_d_dev_ep_init+0x72>
    248e:	007b      	lsls	r3, r7, #1
    2490:	19db      	adds	r3, r3, r7
    2492:	009b      	lsls	r3, r3, #2
    2494:	4c04      	ldr	r4, [pc, #16]	; (24a8 <_usb_d_dev_ep_init+0x124>)
    2496:	18e3      	adds	r3, r4, r3
    2498:	891b      	ldrh	r3, [r3, #8]
    249a:	4293      	cmp	r3, r2
    249c:	db00      	blt.n	24a0 <_usb_d_dev_ep_init+0x11c>
    249e:	e78f      	b.n	23c0 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    24a0:	2013      	movs	r0, #19
    24a2:	4240      	negs	r0, r0
    24a4:	e7a6      	b.n	23f4 <_usb_d_dev_ep_init+0x70>
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	00003d28 	.word	0x00003d28
    24ac:	20000284 	.word	0x20000284

000024b0 <_usb_d_dev_ep_deinit>:
{
    24b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24b2:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    24b4:	240f      	movs	r4, #15
    24b6:	4004      	ands	r4, r0
    24b8:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24ba:	2c00      	cmp	r4, #0
    24bc:	d010      	beq.n	24e0 <_usb_d_dev_ep_deinit+0x30>
    24be:	0020      	movs	r0, r4
    24c0:	2f00      	cmp	r7, #0
    24c2:	db02      	blt.n	24ca <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24c4:	2c02      	cmp	r4, #2
    24c6:	d902      	bls.n	24ce <_usb_d_dev_ep_deinit+0x1e>
}
    24c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24ca:	1ca0      	adds	r0, r4, #2
    24cc:	e7fa      	b.n	24c4 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    24ce:	0006      	movs	r6, r0
    24d0:	3001      	adds	r0, #1
    24d2:	0083      	lsls	r3, r0, #2
    24d4:	1818      	adds	r0, r3, r0
    24d6:	0080      	lsls	r0, r0, #2
    24d8:	4b25      	ldr	r3, [pc, #148]	; (2570 <_usb_d_dev_ep_deinit+0xc0>)
    24da:	3360      	adds	r3, #96	; 0x60
    24dc:	1818      	adds	r0, r3, r0
    24de:	e002      	b.n	24e6 <_usb_d_dev_ep_deinit+0x36>
    24e0:	4823      	ldr	r0, [pc, #140]	; (2570 <_usb_d_dev_ep_deinit+0xc0>)
    24e2:	3074      	adds	r0, #116	; 0x74
    24e4:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    24e6:	00b3      	lsls	r3, r6, #2
    24e8:	199b      	adds	r3, r3, r6
    24ea:	009a      	lsls	r2, r3, #2
    24ec:	4b20      	ldr	r3, [pc, #128]	; (2570 <_usb_d_dev_ep_deinit+0xc0>)
    24ee:	189b      	adds	r3, r3, r2
    24f0:	3386      	adds	r3, #134	; 0x86
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	2bff      	cmp	r3, #255	; 0xff
    24f6:	d0e7      	beq.n	24c8 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    24f8:	0ff9      	lsrs	r1, r7, #31
    24fa:	2203      	movs	r2, #3
    24fc:	4b1d      	ldr	r3, [pc, #116]	; (2574 <_usb_d_dev_ep_deinit+0xc4>)
    24fe:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2500:	00b3      	lsls	r3, r6, #2
    2502:	199b      	adds	r3, r3, r6
    2504:	009a      	lsls	r2, r3, #2
    2506:	4b1a      	ldr	r3, [pc, #104]	; (2570 <_usb_d_dev_ep_deinit+0xc0>)
    2508:	189b      	adds	r3, r3, r2
    250a:	3380      	adds	r3, #128	; 0x80
    250c:	79da      	ldrb	r2, [r3, #7]
    250e:	2307      	movs	r3, #7
    2510:	4013      	ands	r3, r2
    2512:	2b01      	cmp	r3, #1
    2514:	d01b      	beq.n	254e <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    2516:	2f00      	cmp	r7, #0
    2518:	db1f      	blt.n	255a <_usb_d_dev_ep_deinit+0xaa>
    251a:	016d      	lsls	r5, r5, #5
    251c:	4b16      	ldr	r3, [pc, #88]	; (2578 <_usb_d_dev_ep_deinit+0xc8>)
    251e:	469c      	mov	ip, r3
    2520:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    2522:	2280      	movs	r2, #128	; 0x80
    2524:	0052      	lsls	r2, r2, #1
    2526:	5cab      	ldrb	r3, [r5, r2]
    2528:	2107      	movs	r1, #7
    252a:	438b      	bics	r3, r1
    252c:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    252e:	4b10      	ldr	r3, [pc, #64]	; (2570 <_usb_d_dev_ep_deinit+0xc0>)
    2530:	3360      	adds	r3, #96	; 0x60
    2532:	00b1      	lsls	r1, r6, #2
    2534:	198a      	adds	r2, r1, r6
    2536:	0092      	lsls	r2, r2, #2
    2538:	189a      	adds	r2, r3, r2
    253a:	3227      	adds	r2, #39	; 0x27
    253c:	2000      	movs	r0, #0
    253e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    2540:	198e      	adds	r6, r1, r6
    2542:	00b6      	lsls	r6, r6, #2
    2544:	199b      	adds	r3, r3, r6
    2546:	3326      	adds	r3, #38	; 0x26
    2548:	22ff      	movs	r2, #255	; 0xff
    254a:	701a      	strb	r2, [r3, #0]
    254c:	e7bc      	b.n	24c8 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    254e:	3508      	adds	r5, #8
    2550:	016d      	lsls	r5, r5, #5
    2552:	2200      	movs	r2, #0
    2554:	4b08      	ldr	r3, [pc, #32]	; (2578 <_usb_d_dev_ep_deinit+0xc8>)
    2556:	54ea      	strb	r2, [r5, r3]
    2558:	e7e9      	b.n	252e <_usb_d_dev_ep_deinit+0x7e>
    255a:	0164      	lsls	r4, r4, #5
    255c:	4b06      	ldr	r3, [pc, #24]	; (2578 <_usb_d_dev_ep_deinit+0xc8>)
    255e:	469c      	mov	ip, r3
    2560:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    2562:	2280      	movs	r2, #128	; 0x80
    2564:	0052      	lsls	r2, r2, #1
    2566:	5ca3      	ldrb	r3, [r4, r2]
    2568:	2170      	movs	r1, #112	; 0x70
    256a:	438b      	bics	r3, r1
    256c:	54a3      	strb	r3, [r4, r2]
    256e:	e7de      	b.n	252e <_usb_d_dev_ep_deinit+0x7e>
    2570:	20000284 	.word	0x20000284
    2574:	00001cad 	.word	0x00001cad
    2578:	41005000 	.word	0x41005000

0000257c <_usb_d_dev_ep_enable>:
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
    257e:	46c6      	mov	lr, r8
    2580:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    2582:	220f      	movs	r2, #15
    2584:	4002      	ands	r2, r0
    2586:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2588:	2a00      	cmp	r2, #0
    258a:	d100      	bne.n	258e <_usb_d_dev_ep_enable+0x12>
    258c:	e092      	b.n	26b4 <_usb_d_dev_ep_enable+0x138>
    258e:	0013      	movs	r3, r2
    2590:	2800      	cmp	r0, #0
    2592:	db0b      	blt.n	25ac <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2594:	0011      	movs	r1, r2
    2596:	3208      	adds	r2, #8
    2598:	0152      	lsls	r2, r2, #5
    259a:	4caa      	ldr	r4, [pc, #680]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    259c:	5d15      	ldrb	r5, [r2, r4]
    259e:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    25a0:	2902      	cmp	r1, #2
    25a2:	d800      	bhi.n	25a6 <_usb_d_dev_ep_enable+0x2a>
    25a4:	e08d      	b.n	26c2 <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    25a6:	2012      	movs	r0, #18
    25a8:	4240      	negs	r0, r0
    25aa:	e0e5      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    25ac:	1c93      	adds	r3, r2, #2
    25ae:	e7f1      	b.n	2594 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    25b0:	3276      	adds	r2, #118	; 0x76
    25b2:	422a      	tst	r2, r5
    25b4:	d175      	bne.n	26a2 <_usb_d_dev_ep_enable+0x126>
    25b6:	4aa3      	ldr	r2, [pc, #652]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    25b8:	4690      	mov	r8, r2
    25ba:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    25bc:	2011      	movs	r0, #17
    25be:	2280      	movs	r2, #128	; 0x80
    25c0:	0052      	lsls	r2, r2, #1
    25c2:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    25c4:	009a      	lsls	r2, r3, #2
    25c6:	18d2      	adds	r2, r2, r3
    25c8:	0095      	lsls	r5, r2, #2
    25ca:	4a9f      	ldr	r2, [pc, #636]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    25cc:	3260      	adds	r2, #96	; 0x60
    25ce:	1952      	adds	r2, r2, r5
    25d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    25d2:	0395      	lsls	r5, r2, #14
    25d4:	489d      	ldr	r0, [pc, #628]	; (284c <_usb_d_dev_ep_enable+0x2d0>)
    25d6:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    25d8:	2080      	movs	r0, #128	; 0x80
    25da:	0080      	lsls	r0, r0, #2
    25dc:	4282      	cmp	r2, r0
    25de:	d900      	bls.n	25e2 <_usb_d_dev_ep_enable+0x66>
    25e0:	e0cd      	b.n	277e <_usb_d_dev_ep_enable+0x202>
    25e2:	3801      	subs	r0, #1
    25e4:	38ff      	subs	r0, #255	; 0xff
    25e6:	4282      	cmp	r2, r0
    25e8:	d900      	bls.n	25ec <_usb_d_dev_ep_enable+0x70>
    25ea:	e113      	b.n	2814 <_usb_d_dev_ep_enable+0x298>
    25ec:	2a80      	cmp	r2, #128	; 0x80
    25ee:	d900      	bls.n	25f2 <_usb_d_dev_ep_enable+0x76>
    25f0:	e100      	b.n	27f4 <_usb_d_dev_ep_enable+0x278>
    25f2:	2a40      	cmp	r2, #64	; 0x40
    25f4:	d900      	bls.n	25f8 <_usb_d_dev_ep_enable+0x7c>
    25f6:	e115      	b.n	2824 <_usb_d_dev_ep_enable+0x2a8>
    25f8:	2a20      	cmp	r2, #32
    25fa:	d900      	bls.n	25fe <_usb_d_dev_ep_enable+0x82>
    25fc:	e102      	b.n	2804 <_usb_d_dev_ep_enable+0x288>
    25fe:	2a10      	cmp	r2, #16
    2600:	d900      	bls.n	2604 <_usb_d_dev_ep_enable+0x88>
    2602:	e117      	b.n	2834 <_usb_d_dev_ep_enable+0x2b8>
    2604:	38f8      	subs	r0, #248	; 0xf8
    2606:	4290      	cmp	r0, r2
    2608:	4180      	sbcs	r0, r0
    260a:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    260c:	0706      	lsls	r6, r0, #28
    260e:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2610:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2612:	0495      	lsls	r5, r2, #18
    2614:	0cad      	lsrs	r5, r5, #18
    2616:	e0b9      	b.n	278c <_usb_d_dev_ep_enable+0x210>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2618:	2270      	movs	r2, #112	; 0x70
    261a:	422a      	tst	r2, r5
    261c:	d144      	bne.n	26a8 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    261e:	488a      	ldr	r0, [pc, #552]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    2620:	009e      	lsls	r6, r3, #2
    2622:	18f2      	adds	r2, r6, r3
    2624:	0092      	lsls	r2, r2, #2
    2626:	1882      	adds	r2, r0, r2
    2628:	3280      	adds	r2, #128	; 0x80
    262a:	79d2      	ldrb	r2, [r2, #7]
    262c:	0752      	lsls	r2, r2, #29
    262e:	0e52      	lsrs	r2, r2, #25
    2630:	4315      	orrs	r5, r2
    2632:	4a84      	ldr	r2, [pc, #528]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    2634:	4694      	mov	ip, r2
    2636:	4464      	add	r4, ip
    2638:	2280      	movs	r2, #128	; 0x80
    263a:	0052      	lsls	r2, r2, #1
    263c:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    263e:	3060      	adds	r0, #96	; 0x60
    2640:	18f6      	adds	r6, r6, r3
    2642:	00b6      	lsls	r6, r6, #2
    2644:	1980      	adds	r0, r0, r6
    2646:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    2648:	0485      	lsls	r5, r0, #18
    264a:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    264c:	3201      	adds	r2, #1
    264e:	32ff      	adds	r2, #255	; 0xff
    2650:	2307      	movs	r3, #7
    2652:	4290      	cmp	r0, r2
    2654:	d814      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    2656:	3a01      	subs	r2, #1
    2658:	3aff      	subs	r2, #255	; 0xff
    265a:	3b01      	subs	r3, #1
    265c:	4290      	cmp	r0, r2
    265e:	d80f      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    2660:	3b01      	subs	r3, #1
    2662:	2880      	cmp	r0, #128	; 0x80
    2664:	d80c      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    2666:	3b01      	subs	r3, #1
    2668:	2840      	cmp	r0, #64	; 0x40
    266a:	d809      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    266c:	3b01      	subs	r3, #1
    266e:	2820      	cmp	r0, #32
    2670:	d806      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    2672:	3b01      	subs	r3, #1
    2674:	2810      	cmp	r0, #16
    2676:	d803      	bhi.n	2680 <_usb_d_dev_ep_enable+0x104>
    2678:	3af8      	subs	r2, #248	; 0xf8
    267a:	4282      	cmp	r2, r0
    267c:	4192      	sbcs	r2, r2
    267e:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2680:	071b      	lsls	r3, r3, #28
    2682:	432b      	orrs	r3, r5
    2684:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2686:	2280      	movs	r2, #128	; 0x80
    2688:	2382      	movs	r3, #130	; 0x82
    268a:	005b      	lsls	r3, r3, #1
    268c:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    268e:	0149      	lsls	r1, r1, #5
    2690:	4b6d      	ldr	r3, [pc, #436]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    2692:	1859      	adds	r1, r3, r1
    2694:	2300      	movs	r3, #0
    2696:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    2698:	2000      	movs	r0, #0
    269a:	e06d      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
		return -USB_ERR_PARAM;
    269c:	2012      	movs	r0, #18
    269e:	4240      	negs	r0, r0
    26a0:	e06a      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26a2:	2014      	movs	r0, #20
    26a4:	4240      	negs	r0, r0
    26a6:	e067      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26a8:	2014      	movs	r0, #20
    26aa:	4240      	negs	r0, r0
    26ac:	e064      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
			return -USB_ERR_REDO;
    26ae:	2014      	movs	r0, #20
    26b0:	4240      	negs	r0, r0
    26b2:	e061      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    26b4:	2380      	movs	r3, #128	; 0x80
    26b6:	005b      	lsls	r3, r3, #1
    26b8:	4a62      	ldr	r2, [pc, #392]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    26ba:	5cd5      	ldrb	r5, [r2, r3]
    26bc:	b2ed      	uxtb	r5, r5
    26be:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    26c0:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    26c2:	009a      	lsls	r2, r3, #2
    26c4:	18d2      	adds	r2, r2, r3
    26c6:	0094      	lsls	r4, r2, #2
    26c8:	4a5f      	ldr	r2, [pc, #380]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    26ca:	1912      	adds	r2, r2, r4
    26cc:	3286      	adds	r2, #134	; 0x86
    26ce:	7812      	ldrb	r2, [r2, #0]
    26d0:	4694      	mov	ip, r2
    26d2:	2aff      	cmp	r2, #255	; 0xff
    26d4:	d0e2      	beq.n	269c <_usb_d_dev_ep_enable+0x120>
    26d6:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    26d8:	4a5b      	ldr	r2, [pc, #364]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    26da:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    26dc:	009e      	lsls	r6, r3, #2
    26de:	18f6      	adds	r6, r6, r3
    26e0:	00b6      	lsls	r6, r6, #2
    26e2:	1992      	adds	r2, r2, r6
    26e4:	3280      	adds	r2, #128	; 0x80
    26e6:	79d6      	ldrb	r6, [r2, #7]
    26e8:	2207      	movs	r2, #7
    26ea:	4032      	ands	r2, r6
    26ec:	2a01      	cmp	r2, #1
    26ee:	d100      	bne.n	26f2 <_usb_d_dev_ep_enable+0x176>
    26f0:	e75e      	b.n	25b0 <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    26f2:	2800      	cmp	r0, #0
    26f4:	db90      	blt.n	2618 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    26f6:	076a      	lsls	r2, r5, #29
    26f8:	d1d9      	bne.n	26ae <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    26fa:	4853      	ldr	r0, [pc, #332]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    26fc:	009e      	lsls	r6, r3, #2
    26fe:	18f2      	adds	r2, r6, r3
    2700:	0092      	lsls	r2, r2, #2
    2702:	1882      	adds	r2, r0, r2
    2704:	3280      	adds	r2, #128	; 0x80
    2706:	79d2      	ldrb	r2, [r2, #7]
    2708:	0752      	lsls	r2, r2, #29
    270a:	0f52      	lsrs	r2, r2, #29
    270c:	4315      	orrs	r5, r2
    270e:	4a4d      	ldr	r2, [pc, #308]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    2710:	4694      	mov	ip, r2
    2712:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2714:	2280      	movs	r2, #128	; 0x80
    2716:	0052      	lsls	r2, r2, #1
    2718:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    271a:	3060      	adds	r0, #96	; 0x60
    271c:	18f6      	adds	r6, r6, r3
    271e:	00b6      	lsls	r6, r6, #2
    2720:	1980      	adds	r0, r0, r6
    2722:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    2724:	03ab      	lsls	r3, r5, #14
    2726:	4849      	ldr	r0, [pc, #292]	; (284c <_usb_d_dev_ep_enable+0x2d0>)
    2728:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    272a:	3201      	adds	r2, #1
    272c:	32ff      	adds	r2, #255	; 0xff
    272e:	2307      	movs	r3, #7
    2730:	4295      	cmp	r5, r2
    2732:	d814      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    2734:	3a01      	subs	r2, #1
    2736:	3aff      	subs	r2, #255	; 0xff
    2738:	3b01      	subs	r3, #1
    273a:	4295      	cmp	r5, r2
    273c:	d80f      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    273e:	3b01      	subs	r3, #1
    2740:	2d80      	cmp	r5, #128	; 0x80
    2742:	d80c      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    2744:	3b01      	subs	r3, #1
    2746:	2d40      	cmp	r5, #64	; 0x40
    2748:	d809      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    274a:	3b01      	subs	r3, #1
    274c:	2d20      	cmp	r5, #32
    274e:	d806      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    2750:	3b01      	subs	r3, #1
    2752:	2d10      	cmp	r5, #16
    2754:	d803      	bhi.n	275e <_usb_d_dev_ep_enable+0x1e2>
    2756:	3af8      	subs	r2, #248	; 0xf8
    2758:	42aa      	cmp	r2, r5
    275a:	4192      	sbcs	r2, r2
    275c:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    275e:	071b      	lsls	r3, r3, #28
    2760:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2762:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2764:	2240      	movs	r2, #64	; 0x40
    2766:	2306      	movs	r3, #6
    2768:	33ff      	adds	r3, #255	; 0xff
    276a:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    276c:	0149      	lsls	r1, r1, #5
    276e:	4b36      	ldr	r3, [pc, #216]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    2770:	1859      	adds	r1, r3, r1
    2772:	2300      	movs	r3, #0
    2774:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    2776:	2000      	movs	r0, #0
}
    2778:	bc04      	pop	{r2}
    277a:	4690      	mov	r8, r2
    277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    277e:	20e0      	movs	r0, #224	; 0xe0
    2780:	05c0      	lsls	r0, r0, #23
    2782:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2784:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2786:	0495      	lsls	r5, r2, #18
    2788:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    278a:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    278c:	0700      	lsls	r0, r0, #28
    278e:	4328      	orrs	r0, r5
    2790:	6178      	str	r0, [r7, #20]
    2792:	2506      	movs	r5, #6
    2794:	35ff      	adds	r5, #255	; 0xff
    2796:	2640      	movs	r6, #64	; 0x40
    2798:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    279a:	2782      	movs	r7, #130	; 0x82
    279c:	007f      	lsls	r7, r7, #1
    279e:	2080      	movs	r0, #128	; 0x80
    27a0:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    27a2:	4829      	ldr	r0, [pc, #164]	; (2848 <_usb_d_dev_ep_enable+0x2cc>)
    27a4:	0149      	lsls	r1, r1, #5
    27a6:	1841      	adds	r1, r0, r1
    27a8:	2400      	movs	r4, #0
    27aa:	728c      	strb	r4, [r1, #10]
    27ac:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    27ae:	340f      	adds	r4, #15
    27b0:	4661      	mov	r1, ip
    27b2:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    27b4:	0099      	lsls	r1, r3, #2
    27b6:	18c9      	adds	r1, r1, r3
    27b8:	0089      	lsls	r1, r1, #2
    27ba:	1841      	adds	r1, r0, r1
    27bc:	3180      	adds	r1, #128	; 0x80
    27be:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    27c0:	0163      	lsls	r3, r4, #5
    27c2:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    27c4:	18c0      	adds	r0, r0, r3
    27c6:	6841      	ldr	r1, [r0, #4]
    27c8:	0492      	lsls	r2, r2, #18
    27ca:	0914      	lsrs	r4, r2, #4
    27cc:	4a20      	ldr	r2, [pc, #128]	; (2850 <_usb_d_dev_ep_enable+0x2d4>)
    27ce:	400a      	ands	r2, r1
    27d0:	4322      	orrs	r2, r4
    27d2:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    27d4:	6842      	ldr	r2, [r0, #4]
    27d6:	0b92      	lsrs	r2, r2, #14
    27d8:	0392      	lsls	r2, r2, #14
    27da:	6042      	str	r2, [r0, #4]
    27dc:	4a19      	ldr	r2, [pc, #100]	; (2844 <_usb_d_dev_ep_enable+0x2c8>)
    27de:	189a      	adds	r2, r3, r2
    27e0:	21b0      	movs	r1, #176	; 0xb0
    27e2:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    27e4:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    27e6:	4a1b      	ldr	r2, [pc, #108]	; (2854 <_usb_d_dev_ep_enable+0x2d8>)
    27e8:	4694      	mov	ip, r2
    27ea:	4463      	add	r3, ip
    27ec:	2210      	movs	r2, #16
    27ee:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    27f0:	2000      	movs	r0, #0
    27f2:	e7c1      	b.n	2778 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27f4:	20a0      	movs	r0, #160	; 0xa0
    27f6:	05c0      	lsls	r0, r0, #23
    27f8:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    27fa:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    27fc:	0495      	lsls	r5, r2, #18
    27fe:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2800:	2005      	movs	r0, #5
    2802:	e7c3      	b.n	278c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2804:	20c0      	movs	r0, #192	; 0xc0
    2806:	0580      	lsls	r0, r0, #22
    2808:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    280a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    280c:	0495      	lsls	r5, r2, #18
    280e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2810:	2003      	movs	r0, #3
    2812:	e7bb      	b.n	278c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2814:	20c0      	movs	r0, #192	; 0xc0
    2816:	05c0      	lsls	r0, r0, #23
    2818:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    281a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    281c:	0495      	lsls	r5, r2, #18
    281e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2820:	2006      	movs	r0, #6
    2822:	e7b3      	b.n	278c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2824:	2080      	movs	r0, #128	; 0x80
    2826:	05c0      	lsls	r0, r0, #23
    2828:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    282a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    282c:	0495      	lsls	r5, r2, #18
    282e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2830:	2004      	movs	r0, #4
    2832:	e7ab      	b.n	278c <_usb_d_dev_ep_enable+0x210>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2834:	2080      	movs	r0, #128	; 0x80
    2836:	0580      	lsls	r0, r0, #22
    2838:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    283a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    283c:	0495      	lsls	r5, r2, #18
    283e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2840:	2002      	movs	r0, #2
    2842:	e7a3      	b.n	278c <_usb_d_dev_ep_enable+0x210>
    2844:	41005000 	.word	0x41005000
    2848:	20000284 	.word	0x20000284
    284c:	0fffc000 	.word	0x0fffc000
    2850:	f0003fff 	.word	0xf0003fff
    2854:	41005109 	.word	0x41005109

00002858 <_usb_d_dev_ep_stall>:
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    285a:	230f      	movs	r3, #15
    285c:	4003      	ands	r3, r0
    285e:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2860:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2862:	2b00      	cmp	r3, #0
    2864:	d009      	beq.n	287a <_usb_d_dev_ep_stall+0x22>
    2866:	001a      	movs	r2, r3
    2868:	2800      	cmp	r0, #0
    286a:	db04      	blt.n	2876 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    286c:	2b02      	cmp	r3, #2
    286e:	d905      	bls.n	287c <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    2870:	2012      	movs	r0, #18
    2872:	4240      	negs	r0, r0
    2874:	e019      	b.n	28aa <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2876:	1c9a      	adds	r2, r3, #2
    2878:	e7f8      	b.n	286c <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    287a:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    287c:	2901      	cmp	r1, #1
    287e:	d015      	beq.n	28ac <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2880:	2900      	cmp	r1, #0
    2882:	d036      	beq.n	28f2 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2884:	0093      	lsls	r3, r2, #2
    2886:	189b      	adds	r3, r3, r2
    2888:	009b      	lsls	r3, r3, #2
    288a:	4a47      	ldr	r2, [pc, #284]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    288c:	18d2      	adds	r2, r2, r3
    288e:	3286      	adds	r2, #134	; 0x86
    2890:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2892:	230f      	movs	r3, #15
    2894:	4013      	ands	r3, r2
    2896:	015b      	lsls	r3, r3, #5
    2898:	4a44      	ldr	r2, [pc, #272]	; (29ac <_usb_d_dev_ep_stall+0x154>)
    289a:	4694      	mov	ip, r2
    289c:	4463      	add	r3, ip
    289e:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28a0:	2310      	movs	r3, #16
    28a2:	40a3      	lsls	r3, r4
    28a4:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    28a6:	1e43      	subs	r3, r0, #1
    28a8:	4198      	sbcs	r0, r3
}
    28aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28ac:	2510      	movs	r5, #16
    28ae:	40a5      	lsls	r5, r4
    28b0:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28b2:	493d      	ldr	r1, [pc, #244]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    28b4:	0090      	lsls	r0, r2, #2
    28b6:	1883      	adds	r3, r0, r2
    28b8:	009b      	lsls	r3, r3, #2
    28ba:	18cb      	adds	r3, r1, r3
    28bc:	3386      	adds	r3, #134	; 0x86
    28be:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28c0:	230f      	movs	r3, #15
    28c2:	4033      	ands	r3, r6
    28c4:	015e      	lsls	r6, r3, #5
    28c6:	4f39      	ldr	r7, [pc, #228]	; (29ac <_usb_d_dev_ep_stall+0x154>)
    28c8:	46bc      	mov	ip, r7
    28ca:	4466      	add	r6, ip
    28cc:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    28ce:	2520      	movs	r5, #32
    28d0:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    28d2:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    28d4:	015b      	lsls	r3, r3, #5
    28d6:	4d36      	ldr	r5, [pc, #216]	; (29b0 <_usb_d_dev_ep_stall+0x158>)
    28d8:	46ac      	mov	ip, r5
    28da:	4463      	add	r3, ip
    28dc:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    28de:	1882      	adds	r2, r0, r2
    28e0:	0092      	lsls	r2, r2, #2
    28e2:	188a      	adds	r2, r1, r2
    28e4:	3280      	adds	r2, #128	; 0x80
    28e6:	79d3      	ldrb	r3, [r2, #7]
    28e8:	2108      	movs	r1, #8
    28ea:	430b      	orrs	r3, r1
    28ec:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    28ee:	2000      	movs	r0, #0
    28f0:	e7db      	b.n	28aa <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    28f2:	0093      	lsls	r3, r2, #2
    28f4:	189b      	adds	r3, r3, r2
    28f6:	0099      	lsls	r1, r3, #2
    28f8:	4b2b      	ldr	r3, [pc, #172]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    28fa:	185b      	adds	r3, r3, r1
    28fc:	3386      	adds	r3, #134	; 0x86
    28fe:	781b      	ldrb	r3, [r3, #0]
    2900:	210f      	movs	r1, #15
    2902:	400b      	ands	r3, r1
    2904:	015d      	lsls	r5, r3, #5
    2906:	492b      	ldr	r1, [pc, #172]	; (29b4 <_usb_d_dev_ep_stall+0x15c>)
    2908:	468c      	mov	ip, r1
    290a:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    290c:	2183      	movs	r1, #131	; 0x83
    290e:	0049      	lsls	r1, r1, #1
    2910:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2912:	39f6      	subs	r1, #246	; 0xf6
    2914:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2916:	2000      	movs	r0, #0
	if (!is_stalled) {
    2918:	420e      	tst	r6, r1
    291a:	d0c6      	beq.n	28aa <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    291c:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    291e:	3005      	adds	r0, #5
    2920:	30ff      	adds	r0, #255	; 0xff
    2922:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2924:	2120      	movs	r1, #32
    2926:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2928:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    292a:	015b      	lsls	r3, r3, #5
    292c:	4e22      	ldr	r6, [pc, #136]	; (29b8 <_usb_d_dev_ep_stall+0x160>)
    292e:	46b4      	mov	ip, r6
    2930:	4463      	add	r3, ip
    2932:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2934:	2308      	movs	r3, #8
    2936:	33ff      	adds	r3, #255	; 0xff
    2938:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    293a:	420b      	tst	r3, r1
    293c:	d009      	beq.n	2952 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    293e:	2308      	movs	r3, #8
    2940:	33ff      	adds	r3, #255	; 0xff
    2942:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2944:	3b07      	subs	r3, #7
    2946:	3bff      	subs	r3, #255	; 0xff
    2948:	40a3      	lsls	r3, r4
    294a:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    294c:	2182      	movs	r1, #130	; 0x82
    294e:	0049      	lsls	r1, r1, #1
    2950:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2952:	0093      	lsls	r3, r2, #2
    2954:	189b      	adds	r3, r3, r2
    2956:	0099      	lsls	r1, r3, #2
    2958:	4b13      	ldr	r3, [pc, #76]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    295a:	185b      	adds	r3, r3, r1
    295c:	3380      	adds	r3, #128	; 0x80
    295e:	79d9      	ldrb	r1, [r3, #7]
    2960:	2307      	movs	r3, #7
    2962:	400b      	ands	r3, r1
    2964:	2b01      	cmp	r3, #1
    2966:	d00b      	beq.n	2980 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    2968:	0093      	lsls	r3, r2, #2
    296a:	189a      	adds	r2, r3, r2
    296c:	0092      	lsls	r2, r2, #2
    296e:	4b0e      	ldr	r3, [pc, #56]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    2970:	189b      	adds	r3, r3, r2
    2972:	3380      	adds	r3, #128	; 0x80
    2974:	79da      	ldrb	r2, [r3, #7]
    2976:	2108      	movs	r1, #8
    2978:	438a      	bics	r2, r1
    297a:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    297c:	2000      	movs	r0, #0
    297e:	e794      	b.n	28aa <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2980:	3306      	adds	r3, #6
    2982:	33ff      	adds	r3, #255	; 0xff
    2984:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    2986:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2988:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    298a:	4219      	tst	r1, r3
    298c:	d000      	beq.n	2990 <_usb_d_dev_ep_stall+0x138>
    298e:	e78c      	b.n	28aa <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    2990:	0093      	lsls	r3, r2, #2
    2992:	189a      	adds	r2, r3, r2
    2994:	0092      	lsls	r2, r2, #2
    2996:	4b04      	ldr	r3, [pc, #16]	; (29a8 <_usb_d_dev_ep_stall+0x150>)
    2998:	189b      	adds	r3, r3, r2
    299a:	3380      	adds	r3, #128	; 0x80
    299c:	79da      	ldrb	r2, [r3, #7]
    299e:	2108      	movs	r1, #8
    29a0:	438a      	bics	r2, r1
    29a2:	71da      	strb	r2, [r3, #7]
    29a4:	e781      	b.n	28aa <_usb_d_dev_ep_stall+0x52>
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	20000284 	.word	0x20000284
    29ac:	41005100 	.word	0x41005100
    29b0:	41005109 	.word	0x41005109
    29b4:	41005000 	.word	0x41005000
    29b8:	41005108 	.word	0x41005108

000029bc <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    29bc:	b570      	push	{r4, r5, r6, lr}
    29be:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    29c0:	230f      	movs	r3, #15
    29c2:	4018      	ands	r0, r3
    29c4:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    29c6:	4b16      	ldr	r3, [pc, #88]	; (2a20 <_usb_d_dev_ep_read_req+0x64>)
    29c8:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    29ca:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    29cc:	685b      	ldr	r3, [r3, #4]
    29ce:	049b      	lsls	r3, r3, #18
    29d0:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    29d2:	2802      	cmp	r0, #2
    29d4:	d81a      	bhi.n	2a0c <_usb_d_dev_ep_read_req+0x50>
    29d6:	2d00      	cmp	r5, #0
    29d8:	d01b      	beq.n	2a12 <_usb_d_dev_ep_read_req+0x56>
    29da:	4b12      	ldr	r3, [pc, #72]	; (2a24 <_usb_d_dev_ep_read_req+0x68>)
    29dc:	469c      	mov	ip, r3
    29de:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29e0:	2380      	movs	r3, #128	; 0x80
    29e2:	005b      	lsls	r3, r3, #1
    29e4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    29e6:	2b11      	cmp	r3, #17
    29e8:	d116      	bne.n	2a18 <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    29ea:	2308      	movs	r3, #8
    29ec:	33ff      	adds	r3, #255	; 0xff
    29ee:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    29f0:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    29f2:	06db      	lsls	r3, r3, #27
    29f4:	d400      	bmi.n	29f8 <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    29f6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    29f8:	2208      	movs	r2, #8
    29fa:	0028      	movs	r0, r5
    29fc:	4b0a      	ldr	r3, [pc, #40]	; (2a28 <_usb_d_dev_ep_read_req+0x6c>)
    29fe:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a00:	2210      	movs	r2, #16
    2a02:	2308      	movs	r3, #8
    2a04:	33ff      	adds	r3, #255	; 0xff
    2a06:	54e2      	strb	r2, [r4, r3]
	return bytes;
    2a08:	0030      	movs	r0, r6
    2a0a:	e7f4      	b.n	29f6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    2a0c:	2012      	movs	r0, #18
    2a0e:	4240      	negs	r0, r0
    2a10:	e7f1      	b.n	29f6 <_usb_d_dev_ep_read_req+0x3a>
    2a12:	2012      	movs	r0, #18
    2a14:	4240      	negs	r0, r0
    2a16:	e7ee      	b.n	29f6 <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    2a18:	2013      	movs	r0, #19
    2a1a:	4240      	negs	r0, r0
    2a1c:	e7eb      	b.n	29f6 <_usb_d_dev_ep_read_req+0x3a>
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	20000284 	.word	0x20000284
    2a24:	41005000 	.word	0x41005000
    2a28:	00003c35 	.word	0x00003c35

00002a2c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2e:	46de      	mov	lr, fp
    2a30:	4657      	mov	r7, sl
    2a32:	464e      	mov	r6, r9
    2a34:	4645      	mov	r5, r8
    2a36:	b5e0      	push	{r5, r6, r7, lr}
    2a38:	b085      	sub	sp, #20
    2a3a:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2a3c:	7a06      	ldrb	r6, [r0, #8]
    2a3e:	230f      	movs	r3, #15
    2a40:	4033      	ands	r3, r6
    2a42:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a44:	2b00      	cmp	r3, #0
    2a46:	d100      	bne.n	2a4a <_usb_d_dev_ep_trans+0x1e>
    2a48:	e0d3      	b.n	2bf2 <_usb_d_dev_ep_trans+0x1c6>
    2a4a:	0018      	movs	r0, r3
    2a4c:	2e00      	cmp	r6, #0
    2a4e:	db39      	blt.n	2ac4 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    2a50:	0004      	movs	r4, r0
    2a52:	4a73      	ldr	r2, [pc, #460]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2a54:	3260      	adds	r2, #96	; 0x60
    2a56:	1c41      	adds	r1, r0, #1
    2a58:	008d      	lsls	r5, r1, #2
    2a5a:	186d      	adds	r5, r5, r1
    2a5c:	00ad      	lsls	r5, r5, #2
    2a5e:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a60:	0081      	lsls	r1, r0, #2
    2a62:	1809      	adds	r1, r1, r0
    2a64:	0089      	lsls	r1, r1, #2
    2a66:	1852      	adds	r2, r2, r1
    2a68:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2a6a:	4a6e      	ldr	r2, [pc, #440]	; (2c24 <_usb_d_dev_ep_trans+0x1f8>)
    2a6c:	4291      	cmp	r1, r2
    2a6e:	d02b      	beq.n	2ac8 <_usb_d_dev_ep_trans+0x9c>
    2a70:	1e4f      	subs	r7, r1, #1
    2a72:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    2a74:	4642      	mov	r2, r8
    2a76:	6852      	ldr	r2, [r2, #4]
    2a78:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2a7a:	2b02      	cmp	r3, #2
    2a7c:	d900      	bls.n	2a80 <_usb_d_dev_ep_trans+0x54>
    2a7e:	e0a4      	b.n	2bca <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2a80:	4643      	mov	r3, r8
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	4868      	ldr	r0, [pc, #416]	; (2c28 <_usb_d_dev_ep_trans+0x1fc>)
    2a86:	4283      	cmp	r3, r0
    2a88:	d920      	bls.n	2acc <_usb_d_dev_ep_trans+0xa0>
    2a8a:	1898      	adds	r0, r3, r2
    2a8c:	9001      	str	r0, [sp, #4]
    2a8e:	4867      	ldr	r0, [pc, #412]	; (2c2c <_usb_d_dev_ep_trans+0x200>)
    2a90:	4684      	mov	ip, r0
    2a92:	9801      	ldr	r0, [sp, #4]
    2a94:	4560      	cmp	r0, ip
    2a96:	d819      	bhi.n	2acc <_usb_d_dev_ep_trans+0xa0>
    2a98:	079b      	lsls	r3, r3, #30
    2a9a:	d117      	bne.n	2acc <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    2a9c:	2e00      	cmp	r6, #0
    2a9e:	db32      	blt.n	2b06 <_usb_d_dev_ep_trans+0xda>
    2aa0:	4291      	cmp	r1, r2
    2aa2:	d900      	bls.n	2aa6 <_usb_d_dev_ep_trans+0x7a>
    2aa4:	e0af      	b.n	2c06 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2aa6:	2f00      	cmp	r7, #0
    2aa8:	d030      	beq.n	2b0c <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    2aaa:	00a3      	lsls	r3, r4, #2
    2aac:	191b      	adds	r3, r3, r4
    2aae:	009a      	lsls	r2, r3, #2
    2ab0:	4b5b      	ldr	r3, [pc, #364]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2ab2:	189b      	adds	r3, r3, r2
    2ab4:	3380      	adds	r3, #128	; 0x80
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d100      	bne.n	2abe <_usb_d_dev_ep_trans+0x92>
    2abc:	e08b      	b.n	2bd6 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    2abe:	2300      	movs	r3, #0
    2ac0:	4699      	mov	r9, r3
    2ac2:	e00f      	b.n	2ae4 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2ac4:	1c98      	adds	r0, r3, #2
    2ac6:	e7c3      	b.n	2a50 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2ac8:	000f      	movs	r7, r1
    2aca:	e7d3      	b.n	2a74 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    2acc:	00a3      	lsls	r3, r4, #2
    2ace:	191b      	adds	r3, r3, r4
    2ad0:	009a      	lsls	r2, r3, #2
    2ad2:	4b53      	ldr	r3, [pc, #332]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2ad4:	189b      	adds	r3, r3, r2
    2ad6:	3380      	adds	r3, #128	; 0x80
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d100      	bne.n	2ae0 <_usb_d_dev_ep_trans+0xb4>
    2ade:	e077      	b.n	2bd0 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    2ae0:	2301      	movs	r3, #1
    2ae2:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2ae4:	00a3      	lsls	r3, r4, #2
    2ae6:	191b      	adds	r3, r3, r4
    2ae8:	009a      	lsls	r2, r3, #2
    2aea:	4b4d      	ldr	r3, [pc, #308]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2aec:	189b      	adds	r3, r3, r2
    2aee:	3380      	adds	r3, #128	; 0x80
    2af0:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    2af2:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    2af4:	071b      	lsls	r3, r3, #28
    2af6:	d50c      	bpl.n	2b12 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2af8:	b005      	add	sp, #20
    2afa:	bc3c      	pop	{r2, r3, r4, r5}
    2afc:	4690      	mov	r8, r2
    2afe:	4699      	mov	r9, r3
    2b00:	46a2      	mov	sl, r4
    2b02:	46ab      	mov	fp, r5
    2b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    2b06:	2300      	movs	r3, #0
    2b08:	4699      	mov	r9, r3
    2b0a:	e7eb      	b.n	2ae4 <_usb_d_dev_ep_trans+0xb8>
    2b0c:	2300      	movs	r3, #0
    2b0e:	4699      	mov	r9, r3
    2b10:	e7e8      	b.n	2ae4 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    2b12:	a803      	add	r0, sp, #12
    2b14:	4b46      	ldr	r3, [pc, #280]	; (2c30 <_usb_d_dev_ep_trans+0x204>)
    2b16:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2b18:	00a3      	lsls	r3, r4, #2
    2b1a:	191b      	adds	r3, r3, r4
    2b1c:	009a      	lsls	r2, r3, #2
    2b1e:	4b40      	ldr	r3, [pc, #256]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2b20:	189b      	adds	r3, r3, r2
    2b22:	3380      	adds	r3, #128	; 0x80
    2b24:	79db      	ldrb	r3, [r3, #7]
    2b26:	065b      	lsls	r3, r3, #25
    2b28:	d444      	bmi.n	2bb4 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    2b2a:	00a3      	lsls	r3, r4, #2
    2b2c:	191b      	adds	r3, r3, r4
    2b2e:	009b      	lsls	r3, r3, #2
    2b30:	4a3b      	ldr	r2, [pc, #236]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2b32:	4693      	mov	fp, r2
    2b34:	449b      	add	fp, r3
    2b36:	2380      	movs	r3, #128	; 0x80
    2b38:	445b      	add	r3, fp
    2b3a:	469a      	mov	sl, r3
    2b3c:	79db      	ldrb	r3, [r3, #7]
    2b3e:	2240      	movs	r2, #64	; 0x40
    2b40:	4313      	orrs	r3, r2
    2b42:	4652      	mov	r2, sl
    2b44:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    2b46:	a803      	add	r0, sp, #12
    2b48:	4b3a      	ldr	r3, [pc, #232]	; (2c34 <_usb_d_dev_ep_trans+0x208>)
    2b4a:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2b4c:	465b      	mov	r3, fp
    2b4e:	4642      	mov	r2, r8
    2b50:	6812      	ldr	r2, [r2, #0]
    2b52:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    2b54:	4642      	mov	r2, r8
    2b56:	6852      	ldr	r2, [r2, #4]
    2b58:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    2b5a:	2300      	movs	r3, #0
    2b5c:	465a      	mov	r2, fp
    2b5e:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2b60:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2b62:	01d2      	lsls	r2, r2, #7
    2b64:	4653      	mov	r3, sl
    2b66:	79d9      	ldrb	r1, [r3, #7]
    2b68:	237f      	movs	r3, #127	; 0x7f
    2b6a:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    2b6c:	4649      	mov	r1, r9
    2b6e:	0149      	lsls	r1, r1, #5
    2b70:	4313      	orrs	r3, r2
    2b72:	2220      	movs	r2, #32
    2b74:	4393      	bics	r3, r2
    2b76:	430b      	orrs	r3, r1
    2b78:	4652      	mov	r2, sl
    2b7a:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b7c:	4643      	mov	r3, r8
    2b7e:	7a5b      	ldrb	r3, [r3, #9]
    2b80:	2200      	movs	r2, #0
    2b82:	2b00      	cmp	r3, #0
    2b84:	d002      	beq.n	2b8c <_usb_d_dev_ep_trans+0x160>
    2b86:	427a      	negs	r2, r7
    2b88:	417a      	adcs	r2, r7
    2b8a:	b2d2      	uxtb	r2, r2
    2b8c:	00a3      	lsls	r3, r4, #2
    2b8e:	191c      	adds	r4, r3, r4
    2b90:	00a4      	lsls	r4, r4, #2
    2b92:	4b23      	ldr	r3, [pc, #140]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2b94:	191b      	adds	r3, r3, r4
    2b96:	3380      	adds	r3, #128	; 0x80
    2b98:	0112      	lsls	r2, r2, #4
    2b9a:	79df      	ldrb	r7, [r3, #7]
    2b9c:	2110      	movs	r1, #16
    2b9e:	438f      	bics	r7, r1
    2ba0:	4317      	orrs	r7, r2
    2ba2:	71df      	strb	r7, [r3, #7]
	if (dir) {
    2ba4:	2e00      	cmp	r6, #0
    2ba6:	db0a      	blt.n	2bbe <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    2ba8:	2100      	movs	r1, #0
    2baa:	0028      	movs	r0, r5
    2bac:	4b22      	ldr	r3, [pc, #136]	; (2c38 <_usb_d_dev_ep_trans+0x20c>)
    2bae:	4798      	blx	r3
	return ERR_NONE;
    2bb0:	2000      	movs	r0, #0
    2bb2:	e7a1      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    2bb4:	a803      	add	r0, sp, #12
    2bb6:	4b1f      	ldr	r3, [pc, #124]	; (2c34 <_usb_d_dev_ep_trans+0x208>)
    2bb8:	4798      	blx	r3
		return USB_BUSY;
    2bba:	2001      	movs	r0, #1
    2bbc:	e79c      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    2bbe:	2100      	movs	r1, #0
    2bc0:	0028      	movs	r0, r5
    2bc2:	4b1e      	ldr	r3, [pc, #120]	; (2c3c <_usb_d_dev_ep_trans+0x210>)
    2bc4:	4798      	blx	r3
	return ERR_NONE;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e796      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    2bca:	2012      	movs	r0, #18
    2bcc:	4240      	negs	r0, r0
    2bce:	e793      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2bd0:	2013      	movs	r0, #19
    2bd2:	4240      	negs	r0, r0
    2bd4:	e790      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    2bd6:	2012      	movs	r0, #18
    2bd8:	4240      	negs	r0, r0
    2bda:	e78d      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    2bdc:	2013      	movs	r0, #19
    2bde:	4240      	negs	r0, r0
    2be0:	e78a      	b.n	2af8 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    2be2:	4643      	mov	r3, r8
    2be4:	685a      	ldr	r2, [r3, #4]
    2be6:	0597      	lsls	r7, r2, #22
    2be8:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    2bea:	4d0d      	ldr	r5, [pc, #52]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2bec:	3574      	adds	r5, #116	; 0x74
    2bee:	2400      	movs	r4, #0
    2bf0:	e746      	b.n	2a80 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2bf2:	4a0b      	ldr	r2, [pc, #44]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2bf4:	3260      	adds	r2, #96	; 0x60
    2bf6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2bf8:	4a0a      	ldr	r2, [pc, #40]	; (2c24 <_usb_d_dev_ep_trans+0x1f8>)
    2bfa:	4291      	cmp	r1, r2
    2bfc:	d0f1      	beq.n	2be2 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    2bfe:	4d08      	ldr	r5, [pc, #32]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2c00:	3574      	adds	r5, #116	; 0x74
    2c02:	2400      	movs	r4, #0
    2c04:	e734      	b.n	2a70 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2c06:	00a3      	lsls	r3, r4, #2
    2c08:	191b      	adds	r3, r3, r4
    2c0a:	009a      	lsls	r2, r3, #2
    2c0c:	4b04      	ldr	r3, [pc, #16]	; (2c20 <_usb_d_dev_ep_trans+0x1f4>)
    2c0e:	189b      	adds	r3, r3, r2
    2c10:	3380      	adds	r3, #128	; 0x80
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d0e1      	beq.n	2bdc <_usb_d_dev_ep_trans+0x1b0>
    2c18:	2301      	movs	r3, #1
    2c1a:	4699      	mov	r9, r3
    2c1c:	e762      	b.n	2ae4 <_usb_d_dev_ep_trans+0xb8>
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	20000284 	.word	0x20000284
    2c24:	000003ff 	.word	0x000003ff
    2c28:	1fffffff 	.word	0x1fffffff
    2c2c:	20000fff 	.word	0x20000fff
    2c30:	0000094d 	.word	0x0000094d
    2c34:	0000095b 	.word	0x0000095b
    2c38:	00002005 	.word	0x00002005
    2c3c:	00001e5d 	.word	0x00001e5d

00002c40 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c40:	1e0b      	subs	r3, r1, #0
    2c42:	d006      	beq.n	2c52 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    2c44:	2801      	cmp	r0, #1
    2c46:	d006      	beq.n	2c56 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2c48:	2800      	cmp	r0, #0
    2c4a:	d101      	bne.n	2c50 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2c4c:	4a03      	ldr	r2, [pc, #12]	; (2c5c <_usb_d_dev_register_callback+0x1c>)
    2c4e:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    2c50:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c52:	4b03      	ldr	r3, [pc, #12]	; (2c60 <_usb_d_dev_register_callback+0x20>)
    2c54:	e7f6      	b.n	2c44 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2c56:	4a01      	ldr	r2, [pc, #4]	; (2c5c <_usb_d_dev_register_callback+0x1c>)
    2c58:	6653      	str	r3, [r2, #100]	; 0x64
    2c5a:	e7f9      	b.n	2c50 <_usb_d_dev_register_callback+0x10>
    2c5c:	20000284 	.word	0x20000284
    2c60:	00001bc5 	.word	0x00001bc5

00002c64 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c64:	1e0b      	subs	r3, r1, #0
    2c66:	d008      	beq.n	2c7a <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2c68:	2800      	cmp	r0, #0
    2c6a:	d008      	beq.n	2c7e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2c6c:	2801      	cmp	r0, #1
    2c6e:	d009      	beq.n	2c84 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2c70:	2802      	cmp	r0, #2
    2c72:	d106      	bne.n	2c82 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2c74:	4a05      	ldr	r2, [pc, #20]	; (2c8c <_usb_d_dev_register_ep_callback+0x28>)
    2c76:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    2c78:	e003      	b.n	2c82 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2c7a:	4b05      	ldr	r3, [pc, #20]	; (2c90 <_usb_d_dev_register_ep_callback+0x2c>)
    2c7c:	e7f4      	b.n	2c68 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2c7e:	4a03      	ldr	r2, [pc, #12]	; (2c8c <_usb_d_dev_register_ep_callback+0x28>)
    2c80:	6693      	str	r3, [r2, #104]	; 0x68
}
    2c82:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2c84:	4a01      	ldr	r2, [pc, #4]	; (2c8c <_usb_d_dev_register_ep_callback+0x28>)
    2c86:	66d3      	str	r3, [r2, #108]	; 0x6c
    2c88:	e7fb      	b.n	2c82 <_usb_d_dev_register_ep_callback+0x1e>
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	20000284 	.word	0x20000284
    2c90:	00001bc5 	.word	0x00001bc5

00002c94 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    2c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2c96:	4b82      	ldr	r3, [pc, #520]	; (2ea0 <USB_Handler+0x20c>)
    2c98:	8c1e      	ldrh	r6, [r3, #32]
    2c9a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    2c9c:	2e00      	cmp	r6, #0
    2c9e:	d003      	beq.n	2ca8 <USB_Handler+0x14>
    2ca0:	4c80      	ldr	r4, [pc, #512]	; (2ea4 <USB_Handler+0x210>)
    2ca2:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    2ca4:	2500      	movs	r5, #0
    2ca6:	e0b9      	b.n	2e1c <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2ca8:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2caa:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    2cac:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    2cae:	075a      	lsls	r2, r3, #29
    2cb0:	d417      	bmi.n	2ce2 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2cb2:	059a      	lsls	r2, r3, #22
    2cb4:	d41c      	bmi.n	2cf0 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2cb6:	061a      	lsls	r2, r3, #24
    2cb8:	d43e      	bmi.n	2d38 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    2cba:	2270      	movs	r2, #112	; 0x70
    2cbc:	421a      	tst	r2, r3
    2cbe:	d144      	bne.n	2d4a <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2cc0:	071a      	lsls	r2, r3, #28
    2cc2:	d45e      	bmi.n	2d82 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    2cc4:	07db      	lsls	r3, r3, #31
    2cc6:	d5eb      	bpl.n	2ca0 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2cc8:	4b75      	ldr	r3, [pc, #468]	; (2ea0 <USB_Handler+0x20c>)
    2cca:	4a77      	ldr	r2, [pc, #476]	; (2ea8 <USB_Handler+0x214>)
    2ccc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cce:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2cd0:	3a92      	subs	r2, #146	; 0x92
    2cd2:	3aff      	subs	r2, #255	; 0xff
    2cd4:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    2cd6:	4b73      	ldr	r3, [pc, #460]	; (2ea4 <USB_Handler+0x210>)
    2cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2cda:	2100      	movs	r1, #0
    2cdc:	2004      	movs	r0, #4
    2cde:	4798      	blx	r3
    2ce0:	e005      	b.n	2cee <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2ce2:	2204      	movs	r2, #4
    2ce4:	4b6e      	ldr	r3, [pc, #440]	; (2ea0 <USB_Handler+0x20c>)
    2ce6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    2ce8:	4b6e      	ldr	r3, [pc, #440]	; (2ea4 <USB_Handler+0x210>)
    2cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2cec:	4798      	blx	r3

	_usb_d_dev_handler();
}
    2cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf0:	4b6b      	ldr	r3, [pc, #428]	; (2ea0 <USB_Handler+0x20c>)
    2cf2:	4a6d      	ldr	r2, [pc, #436]	; (2ea8 <USB_Handler+0x214>)
    2cf4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2cf6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2cf8:	3a92      	subs	r2, #146	; 0x92
    2cfa:	3aff      	subs	r2, #255	; 0xff
    2cfc:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2cfe:	4b69      	ldr	r3, [pc, #420]	; (2ea4 <USB_Handler+0x210>)
    2d00:	891b      	ldrh	r3, [r3, #8]
    2d02:	071b      	lsls	r3, r3, #28
    2d04:	0f1b      	lsrs	r3, r3, #28
    2d06:	2b03      	cmp	r3, #3
    2d08:	d00c      	beq.n	2d24 <USB_Handler+0x90>
    2d0a:	4b66      	ldr	r3, [pc, #408]	; (2ea4 <USB_Handler+0x210>)
    2d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d0e:	071b      	lsls	r3, r3, #28
    2d10:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    2d12:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d14:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2d16:	2b03      	cmp	r3, #3
    2d18:	d005      	beq.n	2d26 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    2d1a:	4b62      	ldr	r3, [pc, #392]	; (2ea4 <USB_Handler+0x210>)
    2d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d1e:	2003      	movs	r0, #3
    2d20:	4798      	blx	r3
    2d22:	e7e4      	b.n	2cee <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2d24:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2d26:	0152      	lsls	r2, r2, #5
    2d28:	4b5e      	ldr	r3, [pc, #376]	; (2ea4 <USB_Handler+0x210>)
    2d2a:	189b      	adds	r3, r3, r2
    2d2c:	8919      	ldrh	r1, [r3, #8]
    2d2e:	0449      	lsls	r1, r1, #17
    2d30:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    2d32:	2200      	movs	r2, #0
    2d34:	811a      	strh	r2, [r3, #8]
    2d36:	e7f0      	b.n	2d1a <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d38:	2280      	movs	r2, #128	; 0x80
    2d3a:	4b59      	ldr	r3, [pc, #356]	; (2ea0 <USB_Handler+0x20c>)
    2d3c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    2d3e:	4b59      	ldr	r3, [pc, #356]	; (2ea4 <USB_Handler+0x210>)
    2d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d42:	2100      	movs	r1, #0
    2d44:	2005      	movs	r0, #5
    2d46:	4798      	blx	r3
    2d48:	e7d1      	b.n	2cee <USB_Handler+0x5a>
    2d4a:	4b55      	ldr	r3, [pc, #340]	; (2ea0 <USB_Handler+0x20c>)
    2d4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d50:	4a55      	ldr	r2, [pc, #340]	; (2ea8 <USB_Handler+0x214>)
    2d52:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2d54:	4b55      	ldr	r3, [pc, #340]	; (2eac <USB_Handler+0x218>)
    2d56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2d58:	069b      	lsls	r3, r3, #26
    2d5a:	d40c      	bmi.n	2d76 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d5c:	4953      	ldr	r1, [pc, #332]	; (2eac <USB_Handler+0x218>)
	tmp &= mask;
    2d5e:	3a32      	subs	r2, #50	; 0x32
    2d60:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d62:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    2d64:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    2d66:	2bd0      	cmp	r3, #208	; 0xd0
    2d68:	d1fb      	bne.n	2d62 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    2d6a:	4b4e      	ldr	r3, [pc, #312]	; (2ea4 <USB_Handler+0x210>)
    2d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2d6e:	2100      	movs	r1, #0
    2d70:	2002      	movs	r0, #2
    2d72:	4798      	blx	r3
    2d74:	e7bb      	b.n	2cee <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d76:	494d      	ldr	r1, [pc, #308]	; (2eac <USB_Handler+0x218>)
	tmp &= mask;
    2d78:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d7a:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    2d7c:	421a      	tst	r2, r3
    2d7e:	d0fc      	beq.n	2d7a <USB_Handler+0xe6>
    2d80:	e7f3      	b.n	2d6a <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2d82:	4b47      	ldr	r3, [pc, #284]	; (2ea0 <USB_Handler+0x20c>)
    2d84:	2100      	movs	r1, #0
    2d86:	2280      	movs	r2, #128	; 0x80
    2d88:	0052      	lsls	r2, r2, #1
    2d8a:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2d8c:	3af8      	subs	r2, #248	; 0xf8
    2d8e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2d90:	3268      	adds	r2, #104	; 0x68
    2d92:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2d94:	4a44      	ldr	r2, [pc, #272]	; (2ea8 <USB_Handler+0x214>)
    2d96:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    2d98:	4b45      	ldr	r3, [pc, #276]	; (2eb0 <USB_Handler+0x21c>)
    2d9a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    2d9c:	4b41      	ldr	r3, [pc, #260]	; (2ea4 <USB_Handler+0x210>)
    2d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2da0:	2100      	movs	r1, #0
    2da2:	2001      	movs	r0, #1
    2da4:	4798      	blx	r3
    2da6:	e7a2      	b.n	2cee <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2da8:	06cb      	lsls	r3, r1, #27
    2daa:	d407      	bmi.n	2dbc <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2dac:	064b      	lsls	r3, r1, #25
    2dae:	d408      	bmi.n	2dc2 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2db0:	068b      	lsls	r3, r1, #26
    2db2:	d52e      	bpl.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2db4:	2100      	movs	r1, #0
    2db6:	4b3f      	ldr	r3, [pc, #252]	; (2eb4 <USB_Handler+0x220>)
    2db8:	4798      	blx	r3
    2dba:	e02a      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    2dbc:	4b3e      	ldr	r3, [pc, #248]	; (2eb8 <USB_Handler+0x224>)
    2dbe:	4798      	blx	r3
    2dc0:	e027      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2dc2:	2101      	movs	r1, #1
    2dc4:	4b3b      	ldr	r3, [pc, #236]	; (2eb4 <USB_Handler+0x220>)
    2dc6:	4798      	blx	r3
    2dc8:	e023      	b.n	2e12 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2dca:	064b      	lsls	r3, r1, #25
    2dcc:	d40e      	bmi.n	2dec <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2dce:	070b      	lsls	r3, r1, #28
    2dd0:	d410      	bmi.n	2df4 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2dd2:	078b      	lsls	r3, r1, #30
    2dd4:	d412      	bmi.n	2dfc <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2dd6:	2307      	movs	r3, #7
    2dd8:	401a      	ands	r2, r3
    2dda:	2a01      	cmp	r2, #1
    2ddc:	d119      	bne.n	2e12 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2dde:	074b      	lsls	r3, r1, #29
    2de0:	d410      	bmi.n	2e04 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2de2:	06cb      	lsls	r3, r1, #27
    2de4:	d515      	bpl.n	2e12 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2de6:	4b34      	ldr	r3, [pc, #208]	; (2eb8 <USB_Handler+0x224>)
    2de8:	4798      	blx	r3
    2dea:	e012      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    2dec:	2101      	movs	r1, #1
    2dee:	4b31      	ldr	r3, [pc, #196]	; (2eb4 <USB_Handler+0x220>)
    2df0:	4798      	blx	r3
    2df2:	e00e      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    2df4:	2101      	movs	r1, #1
    2df6:	4b31      	ldr	r3, [pc, #196]	; (2ebc <USB_Handler+0x228>)
    2df8:	4798      	blx	r3
    2dfa:	e00a      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    2dfc:	2101      	movs	r1, #1
    2dfe:	4b30      	ldr	r3, [pc, #192]	; (2ec0 <USB_Handler+0x22c>)
    2e00:	4798      	blx	r3
    2e02:	e006      	b.n	2e12 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    2e04:	2100      	movs	r1, #0
    2e06:	4b2d      	ldr	r3, [pc, #180]	; (2ebc <USB_Handler+0x228>)
    2e08:	4798      	blx	r3
    2e0a:	e002      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    2e0c:	2100      	movs	r1, #0
    2e0e:	4b29      	ldr	r3, [pc, #164]	; (2eb4 <USB_Handler+0x220>)
    2e10:	4798      	blx	r3
    2e12:	3501      	adds	r5, #1
    2e14:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e16:	2d09      	cmp	r5, #9
    2e18:	d100      	bne.n	2e1c <USB_Handler+0x188>
    2e1a:	e768      	b.n	2cee <USB_Handler+0x5a>
    2e1c:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    2e1e:	7ca1      	ldrb	r1, [r4, #18]
    2e20:	29ff      	cmp	r1, #255	; 0xff
    2e22:	d0f6      	beq.n	2e12 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    2e24:	230f      	movs	r3, #15
    2e26:	400b      	ands	r3, r1
    2e28:	2101      	movs	r1, #1
    2e2a:	4099      	lsls	r1, r3
    2e2c:	420e      	tst	r6, r1
    2e2e:	d0f0      	beq.n	2e12 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    2e30:	0159      	lsls	r1, r3, #5
    2e32:	4f24      	ldr	r7, [pc, #144]	; (2ec4 <USB_Handler+0x230>)
    2e34:	46bc      	mov	ip, r7
    2e36:	4461      	add	r1, ip
    2e38:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2e3a:	015b      	lsls	r3, r3, #5
    2e3c:	4f22      	ldr	r7, [pc, #136]	; (2ec8 <USB_Handler+0x234>)
    2e3e:	46bc      	mov	ip, r7
    2e40:	4463      	add	r3, ip
    2e42:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    2e44:	4019      	ands	r1, r3
	if (flags) {
    2e46:	d0e4      	beq.n	2e12 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2e48:	00ab      	lsls	r3, r5, #2
    2e4a:	195a      	adds	r2, r3, r5
    2e4c:	0092      	lsls	r2, r2, #2
    2e4e:	4b15      	ldr	r3, [pc, #84]	; (2ea4 <USB_Handler+0x210>)
    2e50:	469c      	mov	ip, r3
    2e52:	4462      	add	r2, ip
    2e54:	3270      	adds	r2, #112	; 0x70
    2e56:	7dd2      	ldrb	r2, [r2, #23]
    2e58:	2347      	movs	r3, #71	; 0x47
    2e5a:	4013      	ands	r3, r2
    2e5c:	2b01      	cmp	r3, #1
    2e5e:	d0a3      	beq.n	2da8 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2e60:	b253      	sxtb	r3, r2
    2e62:	2b00      	cmp	r3, #0
    2e64:	dbb1      	blt.n	2dca <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2e66:	068b      	lsls	r3, r1, #26
    2e68:	d4d0      	bmi.n	2e0c <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2e6a:	074b      	lsls	r3, r1, #29
    2e6c:	d40c      	bmi.n	2e88 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2e6e:	07cb      	lsls	r3, r1, #31
    2e70:	d40e      	bmi.n	2e90 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2e72:	2307      	movs	r3, #7
    2e74:	401a      	ands	r2, r3
    2e76:	2a01      	cmp	r2, #1
    2e78:	d1cb      	bne.n	2e12 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2e7a:	070b      	lsls	r3, r1, #28
    2e7c:	d40c      	bmi.n	2e98 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2e7e:	06cb      	lsls	r3, r1, #27
    2e80:	d5c7      	bpl.n	2e12 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    2e82:	4b0d      	ldr	r3, [pc, #52]	; (2eb8 <USB_Handler+0x224>)
    2e84:	4798      	blx	r3
    2e86:	e7c4      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    2e88:	2100      	movs	r1, #0
    2e8a:	4b0c      	ldr	r3, [pc, #48]	; (2ebc <USB_Handler+0x228>)
    2e8c:	4798      	blx	r3
    2e8e:	e7c0      	b.n	2e12 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    2e90:	2101      	movs	r1, #1
    2e92:	4b0e      	ldr	r3, [pc, #56]	; (2ecc <USB_Handler+0x238>)
    2e94:	4798      	blx	r3
    2e96:	e7bc      	b.n	2e12 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    2e98:	2101      	movs	r1, #1
    2e9a:	4b08      	ldr	r3, [pc, #32]	; (2ebc <USB_Handler+0x228>)
    2e9c:	4798      	blx	r3
    2e9e:	e7b8      	b.n	2e12 <USB_Handler+0x17e>
    2ea0:	41005000 	.word	0x41005000
    2ea4:	20000284 	.word	0x20000284
    2ea8:	00000201 	.word	0x00000201
    2eac:	40000800 	.word	0x40000800
    2eb0:	00001e19 	.word	0x00001e19
    2eb4:	00001c55 	.word	0x00001c55
    2eb8:	00001bc9 	.word	0x00001bc9
    2ebc:	00001d19 	.word	0x00001d19
    2ec0:	00001e5d 	.word	0x00001e5d
    2ec4:	41005100 	.word	0x41005100
    2ec8:	41005109 	.word	0x41005109
    2ecc:	00002005 	.word	0x00002005

00002ed0 <leds_off>:
#include <atmel_start.h>
#include "app/application.h"

// Turn all LEDs off
void leds_off () {
    2ed0:	b530      	push	{r4, r5, lr}
    2ed2:	2302      	movs	r3, #2
	for (int i=1; i<=8; i++)
		gpio_set_pin_level(GPIO(GPIO_PORTA, i+1), false);
    2ed4:	241f      	movs	r4, #31
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    2ed6:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ed8:	21c0      	movs	r1, #192	; 0xc0
    2eda:	05c9      	lsls	r1, r1, #23
    2edc:	0022      	movs	r2, r4
    2ede:	401a      	ands	r2, r3
    2ee0:	0005      	movs	r5, r0
    2ee2:	4095      	lsls	r5, r2
    2ee4:	614d      	str	r5, [r1, #20]
    2ee6:	3301      	adds	r3, #1
	for (int i=1; i<=8; i++)
    2ee8:	2b0a      	cmp	r3, #10
    2eea:	d1f7      	bne.n	2edc <leds_off+0xc>
}
    2eec:	bd30      	pop	{r4, r5, pc}

00002eee <leds_on>:

// Turn all LEDs on
void leds_on () {
    2eee:	b530      	push	{r4, r5, lr}
    2ef0:	2302      	movs	r3, #2
	for (int i=1; i<=8; i++)
		gpio_set_pin_level(GPIO(GPIO_PORTA, i+1), true);
    2ef2:	241f      	movs	r4, #31
    2ef4:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ef6:	21c0      	movs	r1, #192	; 0xc0
    2ef8:	05c9      	lsls	r1, r1, #23
    2efa:	0022      	movs	r2, r4
    2efc:	401a      	ands	r2, r3
    2efe:	0005      	movs	r5, r0
    2f00:	4095      	lsls	r5, r2
    2f02:	618d      	str	r5, [r1, #24]
    2f04:	3301      	adds	r3, #1
	for (int i=1; i<=8; i++)
    2f06:	2b0a      	cmp	r3, #10
    2f08:	d1f7      	bne.n	2efa <leds_on+0xc>
}
    2f0a:	bd30      	pop	{r4, r5, pc}

00002f0c <toggle_led>:

// Toggle an LED
void toggle_led (int led) {
	gpio_toggle_pin_level(GPIO(GPIO_PORTA, led+1));
    2f0c:	1c43      	adds	r3, r0, #1
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    2f0e:	201f      	movs	r0, #31
    2f10:	4018      	ands	r0, r3
    2f12:	2301      	movs	r3, #1
    2f14:	4083      	lsls	r3, r0
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2f16:	22c0      	movs	r2, #192	; 0xc0
    2f18:	05d2      	lsls	r2, r2, #23
    2f1a:	61d3      	str	r3, [r2, #28]
}
    2f1c:	4770      	bx	lr
	...

00002f20 <blink>:

// Blink an LED
void blink(int led, int ms) {
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	0006      	movs	r6, r0
    2f24:	000c      	movs	r4, r1
	toggle_led(led);
    2f26:	4d04      	ldr	r5, [pc, #16]	; (2f38 <blink+0x18>)
    2f28:	47a8      	blx	r5
	delay_ms(ms);
    2f2a:	b2a0      	uxth	r0, r4
    2f2c:	4b03      	ldr	r3, [pc, #12]	; (2f3c <blink+0x1c>)
    2f2e:	4798      	blx	r3
	toggle_led(led);
    2f30:	0030      	movs	r0, r6
    2f32:	47a8      	blx	r5
}
    2f34:	bd70      	pop	{r4, r5, r6, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	00002f0d 	.word	0x00002f0d
    2f3c:	0000097d 	.word	0x0000097d

00002f40 <blinkall>:

// Blink all LEDs
void blinkall (int count, int ms) {
    2f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f42:	46d6      	mov	lr, sl
    2f44:	4647      	mov	r7, r8
    2f46:	b580      	push	{r7, lr}
    2f48:	b083      	sub	sp, #12
    2f4a:	4680      	mov	r8, r0
    2f4c:	9101      	str	r1, [sp, #4]
	for (int x=0; x<count; x++) {
    2f4e:	2800      	cmp	r0, #0
    2f50:	dd0f      	ble.n	2f72 <blinkall+0x32>
    2f52:	2400      	movs	r4, #0
		leds_on();
    2f54:	4b09      	ldr	r3, [pc, #36]	; (2f7c <blinkall+0x3c>)
    2f56:	469a      	mov	sl, r3
		delay_ms(ms);
    2f58:	4e09      	ldr	r6, [pc, #36]	; (2f80 <blinkall+0x40>)
		leds_off();
    2f5a:	4f0a      	ldr	r7, [pc, #40]	; (2f84 <blinkall+0x44>)
		leds_on();
    2f5c:	47d0      	blx	sl
		delay_ms(ms);
    2f5e:	466b      	mov	r3, sp
    2f60:	889d      	ldrh	r5, [r3, #4]
    2f62:	0028      	movs	r0, r5
    2f64:	47b0      	blx	r6
		leds_off();
    2f66:	47b8      	blx	r7
		delay_ms(ms);
    2f68:	0028      	movs	r0, r5
    2f6a:	47b0      	blx	r6
	for (int x=0; x<count; x++) {
    2f6c:	3401      	adds	r4, #1
    2f6e:	45a0      	cmp	r8, r4
    2f70:	d1f4      	bne.n	2f5c <blinkall+0x1c>
	}
}
    2f72:	b003      	add	sp, #12
    2f74:	bc0c      	pop	{r2, r3}
    2f76:	4690      	mov	r8, r2
    2f78:	469a      	mov	sl, r3
    2f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7c:	00002eef 	.word	0x00002eef
    2f80:	0000097d 	.word	0x0000097d
    2f84:	00002ed1 	.word	0x00002ed1

00002f88 <progress>:

// Progress LEDs left to right
void progress (int speed) {
    2f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f8a:	0005      	movs	r5, r0
	leds_off();
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <progress+0x20>)
    2f8e:	4798      	blx	r3
	for (int i=1; i<=8; i++) {
    2f90:	2401      	movs	r4, #1
		toggle_led(i);
    2f92:	4f06      	ldr	r7, [pc, #24]	; (2fac <progress+0x24>)
		delay_ms(speed);
    2f94:	b2ad      	uxth	r5, r5
    2f96:	4e06      	ldr	r6, [pc, #24]	; (2fb0 <progress+0x28>)
		toggle_led(i);
    2f98:	0020      	movs	r0, r4
    2f9a:	47b8      	blx	r7
		delay_ms(speed);
    2f9c:	0028      	movs	r0, r5
    2f9e:	47b0      	blx	r6
	for (int i=1; i<=8; i++) {
    2fa0:	3401      	adds	r4, #1
    2fa2:	2c09      	cmp	r4, #9
    2fa4:	d1f8      	bne.n	2f98 <progress+0x10>
	}
}
    2fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fa8:	00002ed1 	.word	0x00002ed1
    2fac:	00002f0d 	.word	0x00002f0d
    2fb0:	0000097d 	.word	0x0000097d

00002fb4 <marquee>:
		delay_ms(speed);
	}
}

// Marquee LEDs left to right
void marquee (int speed) {
    2fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb6:	b083      	sub	sp, #12
    2fb8:	9001      	str	r0, [sp, #4]
	leds_off();
    2fba:	4b08      	ldr	r3, [pc, #32]	; (2fdc <marquee+0x28>)
    2fbc:	4798      	blx	r3
	for (int i=1; i<=8; i++) {
    2fbe:	2401      	movs	r4, #1
		blink(i, speed);
    2fc0:	4d07      	ldr	r5, [pc, #28]	; (2fe0 <marquee+0x2c>)
		delay_ms(speed);
    2fc2:	466b      	mov	r3, sp
    2fc4:	889f      	ldrh	r7, [r3, #4]
    2fc6:	4e07      	ldr	r6, [pc, #28]	; (2fe4 <marquee+0x30>)
		blink(i, speed);
    2fc8:	9901      	ldr	r1, [sp, #4]
    2fca:	0020      	movs	r0, r4
    2fcc:	47a8      	blx	r5
		delay_ms(speed);
    2fce:	0038      	movs	r0, r7
    2fd0:	47b0      	blx	r6
	for (int i=1; i<=8; i++) {
    2fd2:	3401      	adds	r4, #1
    2fd4:	2c09      	cmp	r4, #9
    2fd6:	d1f7      	bne.n	2fc8 <marquee+0x14>
	}
}
    2fd8:	b003      	add	sp, #12
    2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fdc:	00002ed1 	.word	0x00002ed1
    2fe0:	00002f21 	.word	0x00002f21
    2fe4:	0000097d 	.word	0x0000097d

00002fe8 <test>:
		delay_ms(speed);
	}
}

// Test an init result and give feedback with LEDs
void test (uint8_t val) {
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	2406      	movs	r4, #6
	if (val == 1) {
    2fec:	2801      	cmp	r0, #1
    2fee:	d009      	beq.n	3004 <test+0x1c>
		// Failed - blink LEDs
		blinkall(6, 500);
	} else {
		// Succeeded! blink a marquee
		for(int i=0; i<6; i++) {
			marquee(20);
    2ff0:	4e07      	ldr	r6, [pc, #28]	; (3010 <test+0x28>)
			delay_ms(200);
    2ff2:	4d08      	ldr	r5, [pc, #32]	; (3014 <test+0x2c>)
			marquee(20);
    2ff4:	2014      	movs	r0, #20
    2ff6:	47b0      	blx	r6
			delay_ms(200);
    2ff8:	20c8      	movs	r0, #200	; 0xc8
    2ffa:	47a8      	blx	r5
    2ffc:	3c01      	subs	r4, #1
		for(int i=0; i<6; i++) {
    2ffe:	2c00      	cmp	r4, #0
    3000:	d1f8      	bne.n	2ff4 <test+0xc>
		}
	}
}
    3002:	bd70      	pop	{r4, r5, r6, pc}
		blinkall(6, 500);
    3004:	21fa      	movs	r1, #250	; 0xfa
    3006:	0049      	lsls	r1, r1, #1
    3008:	3005      	adds	r0, #5
    300a:	4b03      	ldr	r3, [pc, #12]	; (3018 <test+0x30>)
    300c:	4798      	blx	r3
    300e:	e7f8      	b.n	3002 <test+0x1a>
    3010:	00002fb5 	.word	0x00002fb5
    3014:	0000097d 	.word	0x0000097d
    3018:	00002f41 	.word	0x00002f41

0000301c <main>:

/* MAIN */
int main (void) {
    301c:	b510      	push	{r4, lr}
	// Initialize MCU, drivers and middleware
	atmel_start_init();
    301e:	4b06      	ldr	r3, [pc, #24]	; (3038 <main+0x1c>)
    3020:	4798      	blx	r3
	millis_init();
    3022:	4b06      	ldr	r3, [pc, #24]	; (303c <main+0x20>)
    3024:	4798      	blx	r3
	progress(500);
	test(serial_writeString(banner));
	*/
	
	// Init CR95HF
	progress(100);
    3026:	2064      	movs	r0, #100	; 0x64
    3028:	4b05      	ldr	r3, [pc, #20]	; (3040 <main+0x24>)
    302a:	4798      	blx	r3
	test(CR95HF_init());
    302c:	4b05      	ldr	r3, [pc, #20]	; (3044 <main+0x28>)
    302e:	4798      	blx	r3
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <main+0x2c>)
    3032:	4798      	blx	r3
		if (tag != CR95HF_CARD_NONE) {
			// Found a valid tag - blink!
			marquee(40);
		}
	}*/
}
    3034:	2000      	movs	r0, #0
    3036:	bd10      	pop	{r4, pc}
    3038:	00000491 	.word	0x00000491
    303c:	00000451 	.word	0x00000451
    3040:	00002f89 	.word	0x00002f89
    3044:	000002b9 	.word	0x000002b9
    3048:	00002fe9 	.word	0x00002fe9

0000304c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    304c:	b5f0      	push	{r4, r5, r6, r7, lr}
    304e:	b083      	sub	sp, #12
    3050:	0006      	movs	r6, r0
    3052:	000c      	movs	r4, r1
    3054:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3056:	780a      	ldrb	r2, [r1, #0]
    3058:	0653      	lsls	r3, r2, #25
    305a:	0f9b      	lsrs	r3, r3, #30
    305c:	2b01      	cmp	r3, #1
    305e:	d000      	beq.n	3062 <cdcdf_acm_req+0x16>
    3060:	e06c      	b.n	313c <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3062:	7909      	ldrb	r1, [r1, #4]
    3064:	7963      	ldrb	r3, [r4, #5]
    3066:	021b      	lsls	r3, r3, #8
    3068:	430b      	orrs	r3, r1
    306a:	493b      	ldr	r1, [pc, #236]	; (3158 <cdcdf_acm_req+0x10c>)
    306c:	7809      	ldrb	r1, [r1, #0]
    306e:	4299      	cmp	r1, r3
    3070:	d003      	beq.n	307a <cdcdf_acm_req+0x2e>
    3072:	4939      	ldr	r1, [pc, #228]	; (3158 <cdcdf_acm_req+0x10c>)
    3074:	7849      	ldrb	r1, [r1, #1]
    3076:	4299      	cmp	r1, r3
    3078:	d163      	bne.n	3142 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    307a:	b252      	sxtb	r2, r2
    307c:	2a00      	cmp	r2, #0
    307e:	db0e      	blt.n	309e <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    3080:	79a7      	ldrb	r7, [r4, #6]
    3082:	79e3      	ldrb	r3, [r4, #7]
    3084:	021b      	lsls	r3, r3, #8
    3086:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3088:	4b34      	ldr	r3, [pc, #208]	; (315c <cdcdf_acm_req+0x110>)
    308a:	4798      	blx	r3
	switch (req->bRequest) {
    308c:	7863      	ldrb	r3, [r4, #1]
    308e:	2b20      	cmp	r3, #32
    3090:	d018      	beq.n	30c4 <cdcdf_acm_req+0x78>
    3092:	2b22      	cmp	r3, #34	; 0x22
    3094:	d03c      	beq.n	3110 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    3096:	200d      	movs	r0, #13
    3098:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    309a:	b003      	add	sp, #12
    309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    309e:	2d01      	cmp	r5, #1
    30a0:	d052      	beq.n	3148 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    30a2:	7863      	ldrb	r3, [r4, #1]
    30a4:	2b21      	cmp	r3, #33	; 0x21
    30a6:	d151      	bne.n	314c <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    30a8:	79a2      	ldrb	r2, [r4, #6]
    30aa:	79e3      	ldrb	r3, [r4, #7]
    30ac:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    30ae:	4313      	orrs	r3, r2
    30b0:	2b07      	cmp	r3, #7
    30b2:	d14e      	bne.n	3152 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    30b4:	2300      	movs	r3, #0
    30b6:	2207      	movs	r2, #7
    30b8:	4927      	ldr	r1, [pc, #156]	; (3158 <cdcdf_acm_req+0x10c>)
    30ba:	3108      	adds	r1, #8
    30bc:	0030      	movs	r0, r6
    30be:	4c28      	ldr	r4, [pc, #160]	; (3160 <cdcdf_acm_req+0x114>)
    30c0:	47a0      	blx	r4
    30c2:	e7ea      	b.n	309a <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    30c4:	2f07      	cmp	r7, #7
    30c6:	d134      	bne.n	3132 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    30c8:	2d00      	cmp	r5, #0
    30ca:	d01a      	beq.n	3102 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    30cc:	2207      	movs	r2, #7
    30ce:	0001      	movs	r1, r0
    30d0:	4668      	mov	r0, sp
    30d2:	4b24      	ldr	r3, [pc, #144]	; (3164 <cdcdf_acm_req+0x118>)
    30d4:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    30d6:	4b20      	ldr	r3, [pc, #128]	; (3158 <cdcdf_acm_req+0x10c>)
    30d8:	691b      	ldr	r3, [r3, #16]
    30da:	2b00      	cmp	r3, #0
    30dc:	d005      	beq.n	30ea <cdcdf_acm_req+0x9e>
    30de:	4668      	mov	r0, sp
    30e0:	4798      	blx	r3
    30e2:	0003      	movs	r3, r0
			return ERR_NONE;
    30e4:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    30e6:	2b00      	cmp	r3, #0
    30e8:	d0d7      	beq.n	309a <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    30ea:	4a1b      	ldr	r2, [pc, #108]	; (3158 <cdcdf_acm_req+0x10c>)
    30ec:	0013      	movs	r3, r2
    30ee:	9900      	ldr	r1, [sp, #0]
    30f0:	6091      	str	r1, [r2, #8]
    30f2:	466a      	mov	r2, sp
    30f4:	8892      	ldrh	r2, [r2, #4]
    30f6:	819a      	strh	r2, [r3, #12]
    30f8:	466a      	mov	r2, sp
    30fa:	7992      	ldrb	r2, [r2, #6]
    30fc:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    30fe:	2000      	movs	r0, #0
    3100:	e7cb      	b.n	309a <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3102:	2300      	movs	r3, #0
    3104:	2207      	movs	r2, #7
    3106:	0001      	movs	r1, r0
    3108:	0030      	movs	r0, r6
    310a:	4c15      	ldr	r4, [pc, #84]	; (3160 <cdcdf_acm_req+0x114>)
    310c:	47a0      	blx	r4
    310e:	e7c4      	b.n	309a <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    3110:	2300      	movs	r3, #0
    3112:	2200      	movs	r2, #0
    3114:	2100      	movs	r1, #0
    3116:	2000      	movs	r0, #0
    3118:	4d11      	ldr	r5, [pc, #68]	; (3160 <cdcdf_acm_req+0x114>)
    311a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    311c:	4b0e      	ldr	r3, [pc, #56]	; (3158 <cdcdf_acm_req+0x10c>)
    311e:	695b      	ldr	r3, [r3, #20]
    3120:	2b00      	cmp	r3, #0
    3122:	d009      	beq.n	3138 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    3124:	78a2      	ldrb	r2, [r4, #2]
    3126:	78e0      	ldrb	r0, [r4, #3]
    3128:	0200      	lsls	r0, r0, #8
    312a:	4310      	orrs	r0, r2
    312c:	4798      	blx	r3
		return ERR_NONE;
    312e:	2000      	movs	r0, #0
    3130:	e7b3      	b.n	309a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3132:	2001      	movs	r0, #1
    3134:	4240      	negs	r0, r0
    3136:	e7b0      	b.n	309a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3138:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    313a:	e7ae      	b.n	309a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    313c:	200a      	movs	r0, #10
    313e:	4240      	negs	r0, r0
    3140:	e7ab      	b.n	309a <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3142:	200a      	movs	r0, #10
    3144:	4240      	negs	r0, r0
    3146:	e7a8      	b.n	309a <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3148:	2000      	movs	r0, #0
    314a:	e7a6      	b.n	309a <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    314c:	200d      	movs	r0, #13
    314e:	4240      	negs	r0, r0
    3150:	e7a3      	b.n	309a <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3152:	2001      	movs	r0, #1
    3154:	4240      	negs	r0, r0
    3156:	e7a0      	b.n	309a <cdcdf_acm_req+0x4e>
    3158:	2000046c 	.word	0x2000046c
    315c:	00003a1d 	.word	0x00003a1d
    3160:	000034cd 	.word	0x000034cd
    3164:	00003c35 	.word	0x00003c35

00003168 <cdcdf_acm_ctrl>:
{
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	46de      	mov	lr, fp
    316c:	4657      	mov	r7, sl
    316e:	464e      	mov	r6, r9
    3170:	4645      	mov	r5, r8
    3172:	b5e0      	push	{r5, r6, r7, lr}
    3174:	b083      	sub	sp, #12
    3176:	0016      	movs	r6, r2
	switch (ctrl) {
    3178:	2901      	cmp	r1, #1
    317a:	d068      	beq.n	324e <cdcdf_acm_ctrl+0xe6>
    317c:	2900      	cmp	r1, #0
    317e:	d00b      	beq.n	3198 <cdcdf_acm_ctrl+0x30>
    3180:	2902      	cmp	r1, #2
    3182:	d100      	bne.n	3186 <cdcdf_acm_ctrl+0x1e>
    3184:	e093      	b.n	32ae <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    3186:	200d      	movs	r0, #13
    3188:	4240      	negs	r0, r0
}
    318a:	b003      	add	sp, #12
    318c:	bc3c      	pop	{r2, r3, r4, r5}
    318e:	4690      	mov	r8, r2
    3190:	4699      	mov	r9, r3
    3192:	46a2      	mov	sl, r4
    3194:	46ab      	mov	fp, r5
    3196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3198:	6883      	ldr	r3, [r0, #8]
    319a:	4698      	mov	r8, r3
	ifc = desc->sod;
    319c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    319e:	2800      	cmp	r0, #0
    31a0:	d100      	bne.n	31a4 <cdcdf_acm_ctrl+0x3c>
    31a2:	e087      	b.n	32b4 <cdcdf_acm_ctrl+0x14c>
    31a4:	9301      	str	r3, [sp, #4]
    31a6:	2301      	movs	r3, #1
    31a8:	4443      	add	r3, r8
    31aa:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    31ac:	4f47      	ldr	r7, [pc, #284]	; (32cc <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    31ae:	4b48      	ldr	r3, [pc, #288]	; (32d0 <cdcdf_acm_ctrl+0x168>)
    31b0:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    31b2:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    31b4:	7943      	ldrb	r3, [r0, #5]
    31b6:	2108      	movs	r1, #8
    31b8:	438b      	bics	r3, r1
    31ba:	2b02      	cmp	r3, #2
    31bc:	d002      	beq.n	31c4 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    31be:	200a      	movs	r0, #10
    31c0:	4240      	negs	r0, r0
    31c2:	e7e2      	b.n	318a <cdcdf_acm_ctrl+0x22>
    31c4:	9901      	ldr	r1, [sp, #4]
    31c6:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    31c8:	780b      	ldrb	r3, [r1, #0]
    31ca:	429a      	cmp	r2, r3
    31cc:	d075      	beq.n	32ba <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    31ce:	2bff      	cmp	r3, #255	; 0xff
    31d0:	d176      	bne.n	32c0 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    31d2:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    31d4:	2205      	movs	r2, #5
    31d6:	6871      	ldr	r1, [r6, #4]
    31d8:	4b3e      	ldr	r3, [pc, #248]	; (32d4 <cdcdf_acm_ctrl+0x16c>)
    31da:	4798      	blx	r3
    31dc:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    31de:	d11e      	bne.n	321e <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    31e0:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    31e2:	7803      	ldrb	r3, [r0, #0]
    31e4:	18c0      	adds	r0, r0, r3
    31e6:	2204      	movs	r2, #4
    31e8:	6871      	ldr	r1, [r6, #4]
    31ea:	4b3a      	ldr	r3, [pc, #232]	; (32d4 <cdcdf_acm_ctrl+0x16c>)
    31ec:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    31ee:	9b01      	ldr	r3, [sp, #4]
    31f0:	455b      	cmp	r3, fp
    31f2:	d027      	beq.n	3244 <cdcdf_acm_ctrl+0xdc>
    31f4:	9b01      	ldr	r3, [sp, #4]
    31f6:	3301      	adds	r3, #1
    31f8:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    31fa:	2800      	cmp	r0, #0
    31fc:	d1d9      	bne.n	31b2 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    31fe:	200a      	movs	r0, #10
    3200:	4240      	negs	r0, r0
    3202:	e7c2      	b.n	318a <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3204:	4653      	mov	r3, sl
    3206:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    3208:	0028      	movs	r0, r5
    320a:	4b31      	ldr	r3, [pc, #196]	; (32d0 <cdcdf_acm_ctrl+0x168>)
    320c:	4798      	blx	r3
			desc->sod = ep;
    320e:	6034      	str	r4, [r6, #0]
    3210:	7820      	ldrb	r0, [r4, #0]
    3212:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3214:	6871      	ldr	r1, [r6, #4]
    3216:	4b30      	ldr	r3, [pc, #192]	; (32d8 <cdcdf_acm_ctrl+0x170>)
    3218:	4798      	blx	r3
    321a:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    321c:	d0e0      	beq.n	31e0 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    321e:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    3220:	7963      	ldrb	r3, [r4, #5]
    3222:	021b      	lsls	r3, r3, #8
    3224:	7922      	ldrb	r2, [r4, #4]
    3226:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3228:	b292      	uxth	r2, r2
    322a:	78e1      	ldrb	r1, [r4, #3]
    322c:	0028      	movs	r0, r5
    322e:	47b8      	blx	r7
    3230:	2800      	cmp	r0, #0
    3232:	d148      	bne.n	32c6 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3234:	b26b      	sxtb	r3, r5
    3236:	2b00      	cmp	r3, #0
    3238:	dbe4      	blt.n	3204 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    323a:	4643      	mov	r3, r8
    323c:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    323e:	0028      	movs	r0, r5
    3240:	47c8      	blx	r9
    3242:	e7e4      	b.n	320e <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    3244:	2201      	movs	r2, #1
    3246:	4b25      	ldr	r3, [pc, #148]	; (32dc <cdcdf_acm_ctrl+0x174>)
    3248:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    324a:	2000      	movs	r0, #0
    324c:	e79d      	b.n	318a <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    324e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3250:	2a00      	cmp	r2, #0
    3252:	d008      	beq.n	3266 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3254:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3256:	795b      	ldrb	r3, [r3, #5]
    3258:	2208      	movs	r2, #8
    325a:	4393      	bics	r3, r2
    325c:	2b02      	cmp	r3, #2
    325e:	d002      	beq.n	3266 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    3260:	200a      	movs	r0, #10
    3262:	4240      	negs	r0, r0
    3264:	e791      	b.n	318a <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    3266:	7823      	ldrb	r3, [r4, #0]
    3268:	2bff      	cmp	r3, #255	; 0xff
    326a:	d008      	beq.n	327e <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    326c:	23ff      	movs	r3, #255	; 0xff
    326e:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3270:	78a0      	ldrb	r0, [r4, #2]
    3272:	28ff      	cmp	r0, #255	; 0xff
    3274:	d003      	beq.n	327e <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3276:	4b1a      	ldr	r3, [pc, #104]	; (32e0 <cdcdf_acm_ctrl+0x178>)
    3278:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    327a:	23ff      	movs	r3, #255	; 0xff
    327c:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    327e:	7863      	ldrb	r3, [r4, #1]
    3280:	2bff      	cmp	r3, #255	; 0xff
    3282:	d008      	beq.n	3296 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3284:	23ff      	movs	r3, #255	; 0xff
    3286:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3288:	78e0      	ldrb	r0, [r4, #3]
    328a:	28ff      	cmp	r0, #255	; 0xff
    328c:	d003      	beq.n	3296 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    328e:	4b14      	ldr	r3, [pc, #80]	; (32e0 <cdcdf_acm_ctrl+0x178>)
    3290:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3292:	23ff      	movs	r3, #255	; 0xff
    3294:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3296:	7920      	ldrb	r0, [r4, #4]
    3298:	28ff      	cmp	r0, #255	; 0xff
    329a:	d003      	beq.n	32a4 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    329c:	4b10      	ldr	r3, [pc, #64]	; (32e0 <cdcdf_acm_ctrl+0x178>)
    329e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    32a0:	23ff      	movs	r3, #255	; 0xff
    32a2:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    32a4:	2200      	movs	r2, #0
    32a6:	4b0d      	ldr	r3, [pc, #52]	; (32dc <cdcdf_acm_ctrl+0x174>)
    32a8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    32aa:	2000      	movs	r0, #0
    32ac:	e76d      	b.n	318a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    32ae:	201b      	movs	r0, #27
    32b0:	4240      	negs	r0, r0
    32b2:	e76a      	b.n	318a <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    32b4:	200a      	movs	r0, #10
    32b6:	4240      	negs	r0, r0
    32b8:	e767      	b.n	318a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    32ba:	2012      	movs	r0, #18
    32bc:	4240      	negs	r0, r0
    32be:	e764      	b.n	318a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    32c0:	201c      	movs	r0, #28
    32c2:	4240      	negs	r0, r0
    32c4:	e761      	b.n	318a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    32c6:	2014      	movs	r0, #20
    32c8:	4240      	negs	r0, r0
    32ca:	e75e      	b.n	318a <cdcdf_acm_ctrl+0x22>
    32cc:	00001119 	.word	0x00001119
    32d0:	000011ad 	.word	0x000011ad
    32d4:	00003a39 	.word	0x00003a39
    32d8:	00003a6f 	.word	0x00003a6f
    32dc:	2000046c 	.word	0x2000046c
    32e0:	00001181 	.word	0x00001181

000032e4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    32e4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    32e6:	4b0a      	ldr	r3, [pc, #40]	; (3310 <cdcdf_acm_init+0x2c>)
    32e8:	4798      	blx	r3
    32ea:	2801      	cmp	r0, #1
    32ec:	d80c      	bhi.n	3308 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    32ee:	4809      	ldr	r0, [pc, #36]	; (3314 <cdcdf_acm_init+0x30>)
    32f0:	4b09      	ldr	r3, [pc, #36]	; (3318 <cdcdf_acm_init+0x34>)
    32f2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    32f4:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    32f6:	3018      	adds	r0, #24
    32f8:	4b08      	ldr	r3, [pc, #32]	; (331c <cdcdf_acm_init+0x38>)
    32fa:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    32fc:	4908      	ldr	r1, [pc, #32]	; (3320 <cdcdf_acm_init+0x3c>)
    32fe:	2001      	movs	r0, #1
    3300:	4b08      	ldr	r3, [pc, #32]	; (3324 <cdcdf_acm_init+0x40>)
    3302:	4798      	blx	r3
	return ERR_NONE;
    3304:	2000      	movs	r0, #0
}
    3306:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3308:	2011      	movs	r0, #17
    330a:	4240      	negs	r0, r0
    330c:	e7fb      	b.n	3306 <cdcdf_acm_init+0x22>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	00003a29 	.word	0x00003a29
    3314:	2000046c 	.word	0x2000046c
    3318:	00003169 	.word	0x00003169
    331c:	000039c1 	.word	0x000039c1
    3320:	20000004 	.word	0x20000004
    3324:	00003929 	.word	0x00003929

00003328 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    3328:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    332a:	4b06      	ldr	r3, [pc, #24]	; (3344 <usbdc_unconfig+0x1c>)
    332c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    332e:	2c00      	cmp	r4, #0
    3330:	d007      	beq.n	3342 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    3332:	2200      	movs	r2, #0
    3334:	2101      	movs	r1, #1
    3336:	0020      	movs	r0, r4
    3338:	6863      	ldr	r3, [r4, #4]
    333a:	4798      	blx	r3
		func = func->next;
    333c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    333e:	2c00      	cmp	r4, #0
    3340:	d1f7      	bne.n	3332 <usbdc_unconfig+0xa>
	}
}
    3342:	bd10      	pop	{r4, pc}
    3344:	20000490 	.word	0x20000490

00003348 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    3348:	b570      	push	{r4, r5, r6, lr}
    334a:	0006      	movs	r6, r0
    334c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    334e:	4b07      	ldr	r3, [pc, #28]	; (336c <usbdc_change_notify+0x24>)
    3350:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    3352:	2c00      	cmp	r4, #0
    3354:	d103      	bne.n	335e <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    3356:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    3358:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    335a:	2c00      	cmp	r4, #0
    335c:	d0fb      	beq.n	3356 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    335e:	6863      	ldr	r3, [r4, #4]
    3360:	2b00      	cmp	r3, #0
    3362:	d0f9      	beq.n	3358 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    3364:	0029      	movs	r1, r5
    3366:	0030      	movs	r0, r6
    3368:	4798      	blx	r3
    336a:	e7f5      	b.n	3358 <usbdc_change_notify+0x10>
    336c:	20000490 	.word	0x20000490

00003370 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3372:	0007      	movs	r7, r0
    3374:	000e      	movs	r6, r1
    3376:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    3378:	4b0d      	ldr	r3, [pc, #52]	; (33b0 <usbdc_request_handler+0x40>)
    337a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    337c:	2c00      	cmp	r4, #0
    337e:	d104      	bne.n	338a <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    3380:	2000      	movs	r0, #0
    3382:	e011      	b.n	33a8 <usbdc_request_handler+0x38>
		h = h->next;
    3384:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    3386:	2c00      	cmp	r4, #0
    3388:	d00d      	beq.n	33a6 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    338a:	6863      	ldr	r3, [r4, #4]
    338c:	2b00      	cmp	r3, #0
    338e:	d0f9      	beq.n	3384 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    3390:	002a      	movs	r2, r5
    3392:	0031      	movs	r1, r6
    3394:	0038      	movs	r0, r7
    3396:	4798      	blx	r3
			if (0 == rc) {
    3398:	2800      	cmp	r0, #0
    339a:	d006      	beq.n	33aa <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    339c:	300a      	adds	r0, #10
    339e:	d0f1      	beq.n	3384 <usbdc_request_handler+0x14>
				return -1;
    33a0:	2001      	movs	r0, #1
    33a2:	4240      	negs	r0, r0
    33a4:	e000      	b.n	33a8 <usbdc_request_handler+0x38>
	return false;
    33a6:	2000      	movs	r0, #0
}
    33a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    33aa:	2001      	movs	r0, #1
    33ac:	e7fc      	b.n	33a8 <usbdc_request_handler+0x38>
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	20000490 	.word	0x20000490

000033b4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    33b4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    33b6:	4b06      	ldr	r3, [pc, #24]	; (33d0 <usbd_sof_cb+0x1c>)
    33b8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    33ba:	2c00      	cmp	r4, #0
    33bc:	d103      	bne.n	33c6 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    33be:	bd10      	pop	{r4, pc}
		sof = sof->next;
    33c0:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    33c2:	2c00      	cmp	r4, #0
    33c4:	d0fb      	beq.n	33be <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    33c6:	6863      	ldr	r3, [r4, #4]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d0f9      	beq.n	33c0 <usbd_sof_cb+0xc>
			sof->cb();
    33cc:	4798      	blx	r3
    33ce:	e7f7      	b.n	33c0 <usbd_sof_cb+0xc>
    33d0:	20000490 	.word	0x20000490

000033d4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    33d4:	b510      	push	{r4, lr}
    33d6:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    33d8:	2900      	cmp	r1, #0
    33da:	d003      	beq.n	33e4 <usbdc_cb_ctl_done+0x10>
    33dc:	2901      	cmp	r1, #1
    33de:	d029      	beq.n	3434 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    33e0:	2000      	movs	r0, #0
    33e2:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    33e4:	7813      	ldrb	r3, [r2, #0]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d1fa      	bne.n	33e0 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    33ea:	7853      	ldrb	r3, [r2, #1]
    33ec:	2b05      	cmp	r3, #5
    33ee:	d011      	beq.n	3414 <usbdc_cb_ctl_done+0x40>
    33f0:	2b09      	cmp	r3, #9
    33f2:	d1f5      	bne.n	33e0 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    33f4:	7892      	ldrb	r2, [r2, #2]
    33f6:	4b12      	ldr	r3, [pc, #72]	; (3440 <usbdc_cb_ctl_done+0x6c>)
    33f8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    33fa:	78a3      	ldrb	r3, [r4, #2]
    33fc:	78e1      	ldrb	r1, [r4, #3]
    33fe:	0209      	lsls	r1, r1, #8
    3400:	4319      	orrs	r1, r3
    3402:	1e4b      	subs	r3, r1, #1
    3404:	4199      	sbcs	r1, r3
    3406:	3103      	adds	r1, #3
    3408:	4b0d      	ldr	r3, [pc, #52]	; (3440 <usbdc_cb_ctl_done+0x6c>)
    340a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    340c:	2001      	movs	r0, #1
    340e:	4b0d      	ldr	r3, [pc, #52]	; (3444 <usbdc_cb_ctl_done+0x70>)
    3410:	4798      	blx	r3
    3412:	e7e5      	b.n	33e0 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    3414:	7890      	ldrb	r0, [r2, #2]
    3416:	4b0c      	ldr	r3, [pc, #48]	; (3448 <usbdc_cb_ctl_done+0x74>)
    3418:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    341a:	78a3      	ldrb	r3, [r4, #2]
    341c:	78e1      	ldrb	r1, [r4, #3]
    341e:	0209      	lsls	r1, r1, #8
    3420:	4319      	orrs	r1, r3
    3422:	1e4b      	subs	r3, r1, #1
    3424:	4199      	sbcs	r1, r3
    3426:	3102      	adds	r1, #2
    3428:	4b05      	ldr	r3, [pc, #20]	; (3440 <usbdc_cb_ctl_done+0x6c>)
    342a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    342c:	2001      	movs	r0, #1
    342e:	4b05      	ldr	r3, [pc, #20]	; (3444 <usbdc_cb_ctl_done+0x70>)
    3430:	4798      	blx	r3
    3432:	e7d5      	b.n	33e0 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    3434:	2201      	movs	r2, #1
    3436:	0021      	movs	r1, r4
    3438:	2000      	movs	r0, #0
    343a:	4b04      	ldr	r3, [pc, #16]	; (344c <usbdc_cb_ctl_done+0x78>)
    343c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    343e:	e7cf      	b.n	33e0 <usbdc_cb_ctl_done+0xc>
    3440:	20000490 	.word	0x20000490
    3444:	00003349 	.word	0x00003349
    3448:	0000110d 	.word	0x0000110d
    344c:	00003371 	.word	0x00003371

00003450 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    3450:	b510      	push	{r4, lr}
	usbdc_unconfig();
    3452:	4b0d      	ldr	r3, [pc, #52]	; (3488 <usbdc_reset+0x38>)
    3454:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    3456:	4c0d      	ldr	r4, [pc, #52]	; (348c <usbdc_reset+0x3c>)
    3458:	2302      	movs	r3, #2
    345a:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    345c:	2300      	movs	r3, #0
    345e:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    3460:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    3462:	2000      	movs	r0, #0
    3464:	4b0a      	ldr	r3, [pc, #40]	; (3490 <usbdc_reset+0x40>)
    3466:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    3468:	7f20      	ldrb	r0, [r4, #28]
    346a:	4b0a      	ldr	r3, [pc, #40]	; (3494 <usbdc_reset+0x44>)
    346c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    346e:	4a0a      	ldr	r2, [pc, #40]	; (3498 <usbdc_reset+0x48>)
    3470:	2100      	movs	r1, #0
    3472:	2000      	movs	r0, #0
    3474:	4c09      	ldr	r4, [pc, #36]	; (349c <usbdc_reset+0x4c>)
    3476:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    3478:	4a09      	ldr	r2, [pc, #36]	; (34a0 <usbdc_reset+0x50>)
    347a:	2102      	movs	r1, #2
    347c:	2000      	movs	r0, #0
    347e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    3480:	2000      	movs	r0, #0
    3482:	4b08      	ldr	r3, [pc, #32]	; (34a4 <usbdc_reset+0x54>)
    3484:	4798      	blx	r3
}
    3486:	bd10      	pop	{r4, pc}
    3488:	00003329 	.word	0x00003329
    348c:	20000490 	.word	0x20000490
    3490:	00001181 	.word	0x00001181
    3494:	0000116d 	.word	0x0000116d
    3498:	000034e9 	.word	0x000034e9
    349c:	00001389 	.word	0x00001389
    34a0:	000033d5 	.word	0x000033d5
    34a4:	000011ad 	.word	0x000011ad

000034a8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    34a8:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    34aa:	2800      	cmp	r0, #0
    34ac:	d002      	beq.n	34b4 <usbd_event_cb+0xc>
    34ae:	2801      	cmp	r0, #1
    34b0:	d004      	beq.n	34bc <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    34b2:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    34b4:	2000      	movs	r0, #0
    34b6:	4b03      	ldr	r3, [pc, #12]	; (34c4 <usbd_event_cb+0x1c>)
    34b8:	4798      	blx	r3
		break;
    34ba:	e7fa      	b.n	34b2 <usbd_event_cb+0xa>
		usbdc_reset();
    34bc:	4b02      	ldr	r3, [pc, #8]	; (34c8 <usbd_event_cb+0x20>)
    34be:	4798      	blx	r3
}
    34c0:	e7f7      	b.n	34b2 <usbd_event_cb+0xa>
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	00003349 	.word	0x00003349
    34c8:	00003451 	.word	0x00003451

000034cc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    34cc:	b510      	push	{r4, lr}
    34ce:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    34d0:	ac01      	add	r4, sp, #4
    34d2:	9101      	str	r1, [sp, #4]
    34d4:	9202      	str	r2, [sp, #8]
    34d6:	7220      	strb	r0, [r4, #8]
    34d8:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    34da:	0020      	movs	r0, r4
    34dc:	4b01      	ldr	r3, [pc, #4]	; (34e4 <usbdc_xfer+0x18>)
    34de:	4798      	blx	r3
}
    34e0:	b004      	add	sp, #16
    34e2:	bd10      	pop	{r4, pc}
    34e4:	000011f9 	.word	0x000011f9

000034e8 <usbdc_cb_ctl_req>:
{
    34e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ea:	46c6      	mov	lr, r8
    34ec:	b500      	push	{lr}
    34ee:	b084      	sub	sp, #16
    34f0:	0005      	movs	r5, r0
    34f2:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    34f4:	2200      	movs	r2, #0
    34f6:	4bb5      	ldr	r3, [pc, #724]	; (37cc <usbdc_cb_ctl_req+0x2e4>)
    34f8:	4798      	blx	r3
    34fa:	1c43      	adds	r3, r0, #1
    34fc:	d00d      	beq.n	351a <usbdc_cb_ctl_req+0x32>
		return true;
    34fe:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    3500:	2801      	cmp	r0, #1
    3502:	d00b      	beq.n	351c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    3504:	7822      	ldrb	r2, [r4, #0]
    3506:	231f      	movs	r3, #31
    3508:	0011      	movs	r1, r2
    350a:	4399      	bics	r1, r3
    350c:	d00b      	beq.n	3526 <usbdc_cb_ctl_req+0x3e>
    350e:	b2cb      	uxtb	r3, r1
    3510:	2b80      	cmp	r3, #128	; 0x80
    3512:	d100      	bne.n	3516 <usbdc_cb_ctl_req+0x2e>
    3514:	e0f8      	b.n	3708 <usbdc_cb_ctl_req+0x220>
		return false;
    3516:	2300      	movs	r3, #0
    3518:	e000      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    351a:	2300      	movs	r3, #0
}
    351c:	0018      	movs	r0, r3
    351e:	b004      	add	sp, #16
    3520:	bc04      	pop	{r2}
    3522:	4690      	mov	r8, r2
    3524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    3526:	7863      	ldrb	r3, [r4, #1]
    3528:	2b0b      	cmp	r3, #11
    352a:	d900      	bls.n	352e <usbdc_cb_ctl_req+0x46>
    352c:	e1e4      	b.n	38f8 <usbdc_cb_ctl_req+0x410>
    352e:	009b      	lsls	r3, r3, #2
    3530:	49a7      	ldr	r1, [pc, #668]	; (37d0 <usbdc_cb_ctl_req+0x2e8>)
    3532:	58cb      	ldr	r3, [r1, r3]
    3534:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    3536:	2301      	movs	r3, #1
    3538:	2200      	movs	r2, #0
    353a:	2100      	movs	r1, #0
    353c:	0028      	movs	r0, r5
    353e:	4ca5      	ldr	r4, [pc, #660]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    3540:	47a0      	blx	r4
    3542:	4243      	negs	r3, r0
    3544:	4143      	adcs	r3, r0
    3546:	b2db      	uxtb	r3, r3
    3548:	e7e8      	b.n	351c <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    354a:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    354c:	2a00      	cmp	r2, #0
    354e:	d01a      	beq.n	3586 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    3550:	4ba1      	ldr	r3, [pc, #644]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	6859      	ldr	r1, [r3, #4]
    3556:	6818      	ldr	r0, [r3, #0]
    3558:	4ba0      	ldr	r3, [pc, #640]	; (37dc <usbdc_cb_ctl_req+0x2f4>)
    355a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    355c:	2800      	cmp	r0, #0
    355e:	d100      	bne.n	3562 <usbdc_cb_ctl_req+0x7a>
    3560:	e1d4      	b.n	390c <usbdc_cb_ctl_req+0x424>
    3562:	78c3      	ldrb	r3, [r0, #3]
    3564:	021b      	lsls	r3, r3, #8
    3566:	7881      	ldrb	r1, [r0, #2]
    3568:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    356a:	b289      	uxth	r1, r1
    356c:	1841      	adds	r1, r0, r1
    356e:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    3570:	2204      	movs	r2, #4
    3572:	4b9b      	ldr	r3, [pc, #620]	; (37e0 <usbdc_cb_ctl_req+0x2f8>)
    3574:	4798      	blx	r3
    3576:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    3578:	2800      	cmp	r0, #0
    357a:	d006      	beq.n	358a <usbdc_cb_ctl_req+0xa2>
    357c:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    357e:	4f96      	ldr	r7, [pc, #600]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3580:	4b97      	ldr	r3, [pc, #604]	; (37e0 <usbdc_cb_ctl_req+0x2f8>)
    3582:	4698      	mov	r8, r3
    3584:	e01a      	b.n	35bc <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    3586:	4b97      	ldr	r3, [pc, #604]	; (37e4 <usbdc_cb_ctl_req+0x2fc>)
    3588:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    358a:	2301      	movs	r3, #1
    358c:	2200      	movs	r2, #0
    358e:	2100      	movs	r1, #0
    3590:	0028      	movs	r0, r5
    3592:	4c90      	ldr	r4, [pc, #576]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    3594:	47a0      	blx	r4
    3596:	4243      	negs	r3, r0
    3598:	4143      	adcs	r3, r0
    359a:	b2db      	uxtb	r3, r3
    359c:	e7be      	b.n	351c <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    359e:	0034      	movs	r4, r6
    35a0:	e000      	b.n	35a4 <usbdc_cb_ctl_req+0xbc>
    35a2:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    35a4:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    35a6:	7803      	ldrb	r3, [r0, #0]
    35a8:	18c0      	adds	r0, r0, r3
    35aa:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    35ac:	9b03      	ldr	r3, [sp, #12]
    35ae:	9301      	str	r3, [sp, #4]
    35b0:	2204      	movs	r2, #4
    35b2:	0019      	movs	r1, r3
    35b4:	47c0      	blx	r8
    35b6:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    35b8:	2800      	cmp	r0, #0
    35ba:	d0e6      	beq.n	358a <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    35bc:	7886      	ldrb	r6, [r0, #2]
    35be:	42a6      	cmp	r6, r4
    35c0:	d0f0      	beq.n	35a4 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    35c2:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    35c4:	2c00      	cmp	r4, #0
    35c6:	d0ea      	beq.n	359e <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    35c8:	aa02      	add	r2, sp, #8
    35ca:	2100      	movs	r1, #0
    35cc:	0020      	movs	r0, r4
    35ce:	6863      	ldr	r3, [r4, #4]
    35d0:	4798      	blx	r3
    35d2:	2800      	cmp	r0, #0
    35d4:	d0e5      	beq.n	35a2 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    35d6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    35d8:	2c00      	cmp	r4, #0
    35da:	d1f5      	bne.n	35c8 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    35dc:	0034      	movs	r4, r6
    35de:	e7e1      	b.n	35a4 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35e0:	231f      	movs	r3, #31
    35e2:	401a      	ands	r2, r3
		return false;
    35e4:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    35e6:	2a02      	cmp	r2, #2
    35e8:	d198      	bne.n	351c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    35ea:	79a3      	ldrb	r3, [r4, #6]
    35ec:	79e2      	ldrb	r2, [r4, #7]
    35ee:	0212      	lsls	r2, r2, #8
    35f0:	431a      	orrs	r2, r3
			return false;
    35f2:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    35f4:	2a00      	cmp	r2, #0
    35f6:	d000      	beq.n	35fa <usbdc_cb_ctl_req+0x112>
    35f8:	e790      	b.n	351c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    35fa:	7920      	ldrb	r0, [r4, #4]
    35fc:	2100      	movs	r1, #0
    35fe:	4b7a      	ldr	r3, [pc, #488]	; (37e8 <usbdc_cb_ctl_req+0x300>)
    3600:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3602:	2301      	movs	r3, #1
    3604:	2200      	movs	r2, #0
    3606:	2100      	movs	r1, #0
    3608:	0028      	movs	r0, r5
    360a:	4c72      	ldr	r4, [pc, #456]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    360c:	47a0      	blx	r4
		return true;
    360e:	2301      	movs	r3, #1
    3610:	e784      	b.n	351c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3612:	231f      	movs	r3, #31
    3614:	401a      	ands	r2, r3
		return false;
    3616:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3618:	2a02      	cmp	r2, #2
    361a:	d000      	beq.n	361e <usbdc_cb_ctl_req+0x136>
    361c:	e77e      	b.n	351c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    361e:	79a3      	ldrb	r3, [r4, #6]
    3620:	79e2      	ldrb	r2, [r4, #7]
    3622:	0212      	lsls	r2, r2, #8
    3624:	431a      	orrs	r2, r3
			return false;
    3626:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    3628:	2a00      	cmp	r2, #0
    362a:	d000      	beq.n	362e <usbdc_cb_ctl_req+0x146>
    362c:	e776      	b.n	351c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    362e:	7920      	ldrb	r0, [r4, #4]
    3630:	2101      	movs	r1, #1
    3632:	4b6d      	ldr	r3, [pc, #436]	; (37e8 <usbdc_cb_ctl_req+0x300>)
    3634:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    3636:	2301      	movs	r3, #1
    3638:	2200      	movs	r2, #0
    363a:	2100      	movs	r1, #0
    363c:	0028      	movs	r0, r5
    363e:	4c65      	ldr	r4, [pc, #404]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    3640:	47a0      	blx	r4
		return true;
    3642:	2301      	movs	r3, #1
    3644:	e76a      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    3646:	78a3      	ldrb	r3, [r4, #2]
    3648:	78e5      	ldrb	r5, [r4, #3]
    364a:	022d      	lsls	r5, r5, #8
    364c:	431d      	orrs	r5, r3
    364e:	7923      	ldrb	r3, [r4, #4]
    3650:	7964      	ldrb	r4, [r4, #5]
    3652:	0224      	lsls	r4, r4, #8
    3654:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    3656:	4a60      	ldr	r2, [pc, #384]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    3658:	6813      	ldr	r3, [r2, #0]
    365a:	7ed2      	ldrb	r2, [r2, #27]
    365c:	6859      	ldr	r1, [r3, #4]
    365e:	6818      	ldr	r0, [r3, #0]
    3660:	4b5e      	ldr	r3, [pc, #376]	; (37dc <usbdc_cb_ctl_req+0x2f4>)
    3662:	4798      	blx	r3
	if (NULL == ifc) {
    3664:	2800      	cmp	r0, #0
    3666:	d047      	beq.n	36f8 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    3668:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    366a:	78c3      	ldrb	r3, [r0, #3]
    366c:	021b      	lsls	r3, r3, #8
    366e:	7881      	ldrb	r1, [r0, #2]
    3670:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    3672:	b289      	uxth	r1, r1
    3674:	1841      	adds	r1, r0, r1
    3676:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    3678:	2204      	movs	r2, #4
    367a:	4b59      	ldr	r3, [pc, #356]	; (37e0 <usbdc_cb_ctl_req+0x2f8>)
    367c:	4798      	blx	r3
    367e:	2800      	cmp	r0, #0
    3680:	d03c      	beq.n	36fc <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    3682:	4e57      	ldr	r6, [pc, #348]	; (37e0 <usbdc_cb_ctl_req+0x2f8>)
    3684:	e008      	b.n	3698 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    3686:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    3688:	7803      	ldrb	r3, [r0, #0]
    368a:	18c0      	adds	r0, r0, r3
    368c:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    368e:	2204      	movs	r2, #4
    3690:	9903      	ldr	r1, [sp, #12]
    3692:	47b0      	blx	r6
		if (NULL == ifc) {
    3694:	2800      	cmp	r0, #0
    3696:	d033      	beq.n	3700 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    3698:	7883      	ldrb	r3, [r0, #2]
    369a:	42a3      	cmp	r3, r4
    369c:	d1f3      	bne.n	3686 <usbdc_cb_ctl_req+0x19e>
    369e:	78c3      	ldrb	r3, [r0, #3]
    36a0:	42ab      	cmp	r3, r5
    36a2:	d1f0      	bne.n	3686 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    36a4:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    36a6:	4b4c      	ldr	r3, [pc, #304]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    36a8:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    36aa:	2e00      	cmp	r6, #0
    36ac:	d02a      	beq.n	3704 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    36ae:	aa02      	add	r2, sp, #8
    36b0:	2101      	movs	r1, #1
    36b2:	0030      	movs	r0, r6
    36b4:	6873      	ldr	r3, [r6, #4]
    36b6:	4798      	blx	r3
    36b8:	2800      	cmp	r0, #0
    36ba:	d004      	beq.n	36c6 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    36bc:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    36be:	2e00      	cmp	r6, #0
    36c0:	d1f5      	bne.n	36ae <usbdc_cb_ctl_req+0x1c6>
	return false;
    36c2:	2300      	movs	r3, #0
    36c4:	e72a      	b.n	351c <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    36c6:	6873      	ldr	r3, [r6, #4]
    36c8:	aa02      	add	r2, sp, #8
    36ca:	2100      	movs	r1, #0
    36cc:	0030      	movs	r0, r6
    36ce:	4798      	blx	r3
			return false;
    36d0:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    36d2:	2800      	cmp	r0, #0
    36d4:	d000      	beq.n	36d8 <usbdc_cb_ctl_req+0x1f0>
    36d6:	e721      	b.n	351c <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    36d8:	2d00      	cmp	r5, #0
    36da:	d005      	beq.n	36e8 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    36dc:	493e      	ldr	r1, [pc, #248]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    36de:	2201      	movs	r2, #1
    36e0:	40a2      	lsls	r2, r4
    36e2:	7f4b      	ldrb	r3, [r1, #29]
    36e4:	4313      	orrs	r3, r2
    36e6:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    36e8:	2300      	movs	r3, #0
    36ea:	2200      	movs	r2, #0
    36ec:	2100      	movs	r1, #0
    36ee:	2000      	movs	r0, #0
    36f0:	4c38      	ldr	r4, [pc, #224]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    36f2:	47a0      	blx	r4
			return true;
    36f4:	2301      	movs	r3, #1
    36f6:	e711      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    36f8:	2300      	movs	r3, #0
    36fa:	e70f      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    36fc:	2300      	movs	r3, #0
    36fe:	e70d      	b.n	351c <usbdc_cb_ctl_req+0x34>
			return false;
    3700:	2300      	movs	r3, #0
    3702:	e70b      	b.n	351c <usbdc_cb_ctl_req+0x34>
	return false;
    3704:	2300      	movs	r3, #0
    3706:	e709      	b.n	351c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    3708:	7863      	ldrb	r3, [r4, #1]
    370a:	2b06      	cmp	r3, #6
    370c:	d033      	beq.n	3776 <usbdc_cb_ctl_req+0x28e>
    370e:	b2d9      	uxtb	r1, r3
    3710:	2906      	cmp	r1, #6
    3712:	d922      	bls.n	375a <usbdc_cb_ctl_req+0x272>
    3714:	2b08      	cmp	r3, #8
    3716:	d100      	bne.n	371a <usbdc_cb_ctl_req+0x232>
    3718:	e0af      	b.n	387a <usbdc_cb_ctl_req+0x392>
    371a:	2b0a      	cmp	r3, #10
    371c:	d000      	beq.n	3720 <usbdc_cb_ctl_req+0x238>
    371e:	e0ed      	b.n	38fc <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    3720:	4b2d      	ldr	r3, [pc, #180]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    3722:	7f5a      	ldrb	r2, [r3, #29]
    3724:	7921      	ldrb	r1, [r4, #4]
    3726:	7963      	ldrb	r3, [r4, #5]
    3728:	021b      	lsls	r3, r3, #8
    372a:	430b      	orrs	r3, r1
    372c:	411a      	asrs	r2, r3
    372e:	07d3      	lsls	r3, r2, #31
    3730:	d400      	bmi.n	3734 <usbdc_cb_ctl_req+0x24c>
    3732:	e0ca      	b.n	38ca <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    3734:	4b28      	ldr	r3, [pc, #160]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    3736:	691d      	ldr	r5, [r3, #16]
	return false;
    3738:	2300      	movs	r3, #0
	while (NULL != func) {
    373a:	2d00      	cmp	r5, #0
    373c:	d100      	bne.n	3740 <usbdc_cb_ctl_req+0x258>
    373e:	e6ed      	b.n	351c <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    3740:	0022      	movs	r2, r4
    3742:	2102      	movs	r1, #2
    3744:	0028      	movs	r0, r5
    3746:	686b      	ldr	r3, [r5, #4]
    3748:	4798      	blx	r3
    374a:	2800      	cmp	r0, #0
    374c:	db00      	blt.n	3750 <usbdc_cb_ctl_req+0x268>
    374e:	e0c8      	b.n	38e2 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    3750:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    3752:	2d00      	cmp	r5, #0
    3754:	d1f4      	bne.n	3740 <usbdc_cb_ctl_req+0x258>
	return false;
    3756:	2300      	movs	r3, #0
    3758:	e6e0      	b.n	351c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    375a:	2b00      	cmp	r3, #0
    375c:	d000      	beq.n	3760 <usbdc_cb_ctl_req+0x278>
    375e:	e0cd      	b.n	38fc <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3760:	231f      	movs	r3, #31
    3762:	401a      	ands	r2, r3
    3764:	b2d3      	uxtb	r3, r2
    3766:	2b01      	cmp	r3, #1
    3768:	d800      	bhi.n	376c <usbdc_cb_ctl_req+0x284>
    376a:	e092      	b.n	3892 <usbdc_cb_ctl_req+0x3aa>
    376c:	2a02      	cmp	r2, #2
    376e:	d100      	bne.n	3772 <usbdc_cb_ctl_req+0x28a>
    3770:	e09f      	b.n	38b2 <usbdc_cb_ctl_req+0x3ca>
		return false;
    3772:	2300      	movs	r3, #0
    3774:	e6d2      	b.n	351c <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    3776:	78a3      	ldrb	r3, [r4, #2]
    3778:	78e2      	ldrb	r2, [r4, #3]
    377a:	0212      	lsls	r2, r2, #8
    377c:	431a      	orrs	r2, r3
    377e:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    3780:	2b02      	cmp	r3, #2
    3782:	d033      	beq.n	37ec <usbdc_cb_ctl_req+0x304>
    3784:	2b03      	cmp	r3, #3
    3786:	d056      	beq.n	3836 <usbdc_cb_ctl_req+0x34e>
    3788:	2b01      	cmp	r3, #1
    378a:	d001      	beq.n	3790 <usbdc_cb_ctl_req+0x2a8>
	return false;
    378c:	2300      	movs	r3, #0
    378e:	e6c5      	b.n	351c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3790:	79a2      	ldrb	r2, [r4, #6]
    3792:	79e3      	ldrb	r3, [r4, #7]
    3794:	021b      	lsls	r3, r3, #8
    3796:	4313      	orrs	r3, r2
    3798:	1c1a      	adds	r2, r3, #0
    379a:	2b12      	cmp	r3, #18
    379c:	d900      	bls.n	37a0 <usbdc_cb_ctl_req+0x2b8>
    379e:	2212      	movs	r2, #18
    37a0:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    37a2:	4b0d      	ldr	r3, [pc, #52]	; (37d8 <usbdc_cb_ctl_req+0x2f0>)
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	6859      	ldr	r1, [r3, #4]
    37a8:	6818      	ldr	r0, [r3, #0]
    37aa:	2201      	movs	r2, #1
    37ac:	4b0c      	ldr	r3, [pc, #48]	; (37e0 <usbdc_cb_ctl_req+0x2f8>)
    37ae:	4798      	blx	r3
	if (!dev_desc) {
    37b0:	2800      	cmp	r0, #0
    37b2:	d100      	bne.n	37b6 <usbdc_cb_ctl_req+0x2ce>
    37b4:	e0a4      	b.n	3900 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    37b6:	2300      	movs	r3, #0
    37b8:	0022      	movs	r2, r4
    37ba:	0001      	movs	r1, r0
    37bc:	0028      	movs	r0, r5
    37be:	4c05      	ldr	r4, [pc, #20]	; (37d4 <usbdc_cb_ctl_req+0x2ec>)
    37c0:	47a0      	blx	r4
    37c2:	4243      	negs	r3, r0
    37c4:	4143      	adcs	r3, r0
    37c6:	b2db      	uxtb	r3, r3
    37c8:	e6a8      	b.n	351c <usbdc_cb_ctl_req+0x34>
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	00003371 	.word	0x00003371
    37d0:	00003d4c 	.word	0x00003d4c
    37d4:	000034cd 	.word	0x000034cd
    37d8:	20000490 	.word	0x20000490
    37dc:	00003ab5 	.word	0x00003ab5
    37e0:	00003a39 	.word	0x00003a39
    37e4:	00003329 	.word	0x00003329
    37e8:	00001321 	.word	0x00001321
	uint16_t length   = req->wLength;
    37ec:	79a3      	ldrb	r3, [r4, #6]
    37ee:	79e6      	ldrb	r6, [r4, #7]
    37f0:	0236      	lsls	r6, r6, #8
    37f2:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    37f4:	4b46      	ldr	r3, [pc, #280]	; (3910 <usbdc_cb_ctl_req+0x428>)
    37f6:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	3201      	adds	r2, #1
    37fc:	b2d2      	uxtb	r2, r2
    37fe:	6859      	ldr	r1, [r3, #4]
    3800:	6818      	ldr	r0, [r3, #0]
    3802:	4b44      	ldr	r3, [pc, #272]	; (3914 <usbdc_cb_ctl_req+0x42c>)
    3804:	4798      	blx	r3
    3806:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    3808:	d07c      	beq.n	3904 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    380a:	78c3      	ldrb	r3, [r0, #3]
    380c:	021b      	lsls	r3, r3, #8
    380e:	7884      	ldrb	r4, [r0, #2]
    3810:	18e4      	adds	r4, r4, r3
    3812:	b2a4      	uxth	r4, r4
		need_zlp = false;
    3814:	2300      	movs	r3, #0
	if (length <= total_len) {
    3816:	42a6      	cmp	r6, r4
    3818:	d905      	bls.n	3826 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    381a:	3f01      	subs	r7, #1
    381c:	403e      	ands	r6, r7
    381e:	4273      	negs	r3, r6
    3820:	4173      	adcs	r3, r6
    3822:	b2db      	uxtb	r3, r3
		length = total_len;
    3824:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    3826:	0032      	movs	r2, r6
    3828:	0028      	movs	r0, r5
    382a:	4c3b      	ldr	r4, [pc, #236]	; (3918 <usbdc_cb_ctl_req+0x430>)
    382c:	47a0      	blx	r4
    382e:	4243      	negs	r3, r0
    3830:	4143      	adcs	r3, r0
    3832:	b2db      	uxtb	r3, r3
    3834:	e672      	b.n	351c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    3836:	79a3      	ldrb	r3, [r4, #6]
    3838:	79e1      	ldrb	r1, [r4, #7]
    383a:	0209      	lsls	r1, r1, #8
    383c:	4319      	orrs	r1, r3
    383e:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3840:	4b33      	ldr	r3, [pc, #204]	; (3910 <usbdc_cb_ctl_req+0x428>)
    3842:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	b2d2      	uxtb	r2, r2
    3848:	6859      	ldr	r1, [r3, #4]
    384a:	6818      	ldr	r0, [r3, #0]
    384c:	4b33      	ldr	r3, [pc, #204]	; (391c <usbdc_cb_ctl_req+0x434>)
    384e:	4798      	blx	r3
    3850:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    3852:	d059      	beq.n	3908 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    3854:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    3856:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    3858:	4294      	cmp	r4, r2
    385a:	d906      	bls.n	386a <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    385c:	1e73      	subs	r3, r6, #1
    385e:	4023      	ands	r3, r4
    3860:	0018      	movs	r0, r3
    3862:	4243      	negs	r3, r0
    3864:	4143      	adcs	r3, r0
    3866:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    3868:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    386a:	0022      	movs	r2, r4
    386c:	0028      	movs	r0, r5
    386e:	4c2a      	ldr	r4, [pc, #168]	; (3918 <usbdc_cb_ctl_req+0x430>)
    3870:	47a0      	blx	r4
    3872:	4243      	negs	r3, r0
    3874:	4143      	adcs	r3, r0
    3876:	b2db      	uxtb	r3, r3
    3878:	e650      	b.n	351c <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    387a:	4b25      	ldr	r3, [pc, #148]	; (3910 <usbdc_cb_ctl_req+0x428>)
    387c:	7eda      	ldrb	r2, [r3, #27]
    387e:	6959      	ldr	r1, [r3, #20]
    3880:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3882:	6959      	ldr	r1, [r3, #20]
    3884:	2300      	movs	r3, #0
    3886:	2201      	movs	r2, #1
    3888:	0028      	movs	r0, r5
    388a:	4c23      	ldr	r4, [pc, #140]	; (3918 <usbdc_cb_ctl_req+0x430>)
    388c:	47a0      	blx	r4
		return true;
    388e:	2301      	movs	r3, #1
    3890:	e644      	b.n	351c <usbdc_cb_ctl_req+0x34>
		st = 0;
    3892:	2300      	movs	r3, #0
    3894:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    3896:	4c1e      	ldr	r4, [pc, #120]	; (3910 <usbdc_cb_ctl_req+0x428>)
    3898:	2202      	movs	r2, #2
    389a:	a902      	add	r1, sp, #8
    389c:	6960      	ldr	r0, [r4, #20]
    389e:	4b20      	ldr	r3, [pc, #128]	; (3920 <usbdc_cb_ctl_req+0x438>)
    38a0:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    38a2:	6961      	ldr	r1, [r4, #20]
    38a4:	2300      	movs	r3, #0
    38a6:	2202      	movs	r2, #2
    38a8:	0028      	movs	r0, r5
    38aa:	4c1b      	ldr	r4, [pc, #108]	; (3918 <usbdc_cb_ctl_req+0x430>)
    38ac:	47a0      	blx	r4
	return true;
    38ae:	2301      	movs	r3, #1
    38b0:	e634      	b.n	351c <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    38b2:	7920      	ldrb	r0, [r4, #4]
    38b4:	2102      	movs	r1, #2
    38b6:	4b1b      	ldr	r3, [pc, #108]	; (3924 <usbdc_cb_ctl_req+0x43c>)
    38b8:	4798      	blx	r3
		if (st < 0) {
    38ba:	2800      	cmp	r0, #0
    38bc:	db03      	blt.n	38c6 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    38be:	2301      	movs	r3, #1
    38c0:	4018      	ands	r0, r3
    38c2:	9002      	str	r0, [sp, #8]
    38c4:	e7e7      	b.n	3896 <usbdc_cb_ctl_req+0x3ae>
			return false;
    38c6:	2300      	movs	r3, #0
    38c8:	e628      	b.n	351c <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    38ca:	4b11      	ldr	r3, [pc, #68]	; (3910 <usbdc_cb_ctl_req+0x428>)
    38cc:	2200      	movs	r2, #0
    38ce:	6959      	ldr	r1, [r3, #20]
    38d0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    38d2:	6959      	ldr	r1, [r3, #20]
    38d4:	2300      	movs	r3, #0
    38d6:	3201      	adds	r2, #1
    38d8:	2000      	movs	r0, #0
    38da:	4c0f      	ldr	r4, [pc, #60]	; (3918 <usbdc_cb_ctl_req+0x430>)
    38dc:	47a0      	blx	r4
		return true;
    38de:	2301      	movs	r3, #1
    38e0:	e61c      	b.n	351c <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    38e2:	4b0b      	ldr	r3, [pc, #44]	; (3910 <usbdc_cb_ctl_req+0x428>)
    38e4:	695a      	ldr	r2, [r3, #20]
    38e6:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    38e8:	6959      	ldr	r1, [r3, #20]
    38ea:	2300      	movs	r3, #0
    38ec:	2201      	movs	r2, #1
    38ee:	2000      	movs	r0, #0
    38f0:	4c09      	ldr	r4, [pc, #36]	; (3918 <usbdc_cb_ctl_req+0x430>)
    38f2:	47a0      	blx	r4
			return true;
    38f4:	2301      	movs	r3, #1
    38f6:	e611      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    38f8:	2300      	movs	r3, #0
    38fa:	e60f      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    38fc:	2300      	movs	r3, #0
    38fe:	e60d      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    3900:	2300      	movs	r3, #0
    3902:	e60b      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    3904:	2300      	movs	r3, #0
    3906:	e609      	b.n	351c <usbdc_cb_ctl_req+0x34>
		return false;
    3908:	2300      	movs	r3, #0
    390a:	e607      	b.n	351c <usbdc_cb_ctl_req+0x34>
			return false;
    390c:	2300      	movs	r3, #0
    390e:	e605      	b.n	351c <usbdc_cb_ctl_req+0x34>
    3910:	20000490 	.word	0x20000490
    3914:	00003ab5 	.word	0x00003ab5
    3918:	000034cd 	.word	0x000034cd
    391c:	00003b1d 	.word	0x00003b1d
    3920:	00003c35 	.word	0x00003c35
    3924:	00001321 	.word	0x00001321

00003928 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3928:	b510      	push	{r4, lr}
	switch (type) {
    392a:	2801      	cmp	r0, #1
    392c:	d009      	beq.n	3942 <usbdc_register_handler+0x1a>
    392e:	2800      	cmp	r0, #0
    3930:	d002      	beq.n	3938 <usbdc_register_handler+0x10>
    3932:	2802      	cmp	r0, #2
    3934:	d00a      	beq.n	394c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    3936:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3938:	4807      	ldr	r0, [pc, #28]	; (3958 <usbdc_register_handler+0x30>)
    393a:	3004      	adds	r0, #4
    393c:	4b07      	ldr	r3, [pc, #28]	; (395c <usbdc_register_handler+0x34>)
    393e:	4798      	blx	r3
		break;
    3940:	e7f9      	b.n	3936 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    3942:	4805      	ldr	r0, [pc, #20]	; (3958 <usbdc_register_handler+0x30>)
    3944:	3008      	adds	r0, #8
    3946:	4b05      	ldr	r3, [pc, #20]	; (395c <usbdc_register_handler+0x34>)
    3948:	4798      	blx	r3
		break;
    394a:	e7f4      	b.n	3936 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    394c:	4802      	ldr	r0, [pc, #8]	; (3958 <usbdc_register_handler+0x30>)
    394e:	300c      	adds	r0, #12
    3950:	4b02      	ldr	r3, [pc, #8]	; (395c <usbdc_register_handler+0x34>)
    3952:	4798      	blx	r3
}
    3954:	e7ef      	b.n	3936 <usbdc_register_handler+0xe>
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	20000490 	.word	0x20000490
    395c:	00001439 	.word	0x00001439

00003960 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    3960:	b570      	push	{r4, r5, r6, lr}
    3962:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    3964:	1e43      	subs	r3, r0, #1
    3966:	4198      	sbcs	r0, r3
    3968:	b2c0      	uxtb	r0, r0
    396a:	4a0c      	ldr	r2, [pc, #48]	; (399c <usbdc_init+0x3c>)
    396c:	490c      	ldr	r1, [pc, #48]	; (39a0 <usbdc_init+0x40>)
    396e:	4b0d      	ldr	r3, [pc, #52]	; (39a4 <usbdc_init+0x44>)
    3970:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    3972:	4b0d      	ldr	r3, [pc, #52]	; (39a8 <usbdc_init+0x48>)
    3974:	4798      	blx	r3
	if (rc < 0) {
    3976:	2800      	cmp	r0, #0
    3978:	db0e      	blt.n	3998 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    397a:	4d0c      	ldr	r5, [pc, #48]	; (39ac <usbdc_init+0x4c>)
    397c:	2220      	movs	r2, #32
    397e:	2100      	movs	r1, #0
    3980:	0028      	movs	r0, r5
    3982:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <usbdc_init+0x50>)
    3984:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    3986:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    3988:	490a      	ldr	r1, [pc, #40]	; (39b4 <usbdc_init+0x54>)
    398a:	2000      	movs	r0, #0
    398c:	4c0a      	ldr	r4, [pc, #40]	; (39b8 <usbdc_init+0x58>)
    398e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    3990:	490a      	ldr	r1, [pc, #40]	; (39bc <usbdc_init+0x5c>)
    3992:	2001      	movs	r0, #1
    3994:	47a0      	blx	r4

	return 0;
    3996:	2000      	movs	r0, #0
}
    3998:	bd70      	pop	{r4, r5, r6, pc}
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	00000355 	.word	0x00000355
    39a0:	00003d7c 	.word	0x00003d7c
    39a4:	000013d9 	.word	0x000013d9
    39a8:	00001085 	.word	0x00001085
    39ac:	20000490 	.word	0x20000490
    39b0:	00003c47 	.word	0x00003c47
    39b4:	000033b5 	.word	0x000033b5
    39b8:	000010e9 	.word	0x000010e9
    39bc:	000034a9 	.word	0x000034a9

000039c0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    39c0:	b510      	push	{r4, lr}
    39c2:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    39c4:	4802      	ldr	r0, [pc, #8]	; (39d0 <usbdc_register_function+0x10>)
    39c6:	3010      	adds	r0, #16
    39c8:	4b02      	ldr	r3, [pc, #8]	; (39d4 <usbdc_register_function+0x14>)
    39ca:	4798      	blx	r3
}
    39cc:	bd10      	pop	{r4, pc}
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	20000490 	.word	0x20000490
    39d4:	00001439 	.word	0x00001439

000039d8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    39d8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    39da:	4b0b      	ldr	r3, [pc, #44]	; (3a08 <usbdc_start+0x30>)
    39dc:	7e9b      	ldrb	r3, [r3, #26]
    39de:	2b00      	cmp	r3, #0
    39e0:	d10c      	bne.n	39fc <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    39e2:	2800      	cmp	r0, #0
    39e4:	d00d      	beq.n	3a02 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    39e6:	4b08      	ldr	r3, [pc, #32]	; (3a08 <usbdc_start+0x30>)
    39e8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    39ea:	6802      	ldr	r2, [r0, #0]
    39ec:	79d2      	ldrb	r2, [r2, #7]
    39ee:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    39f0:	2201      	movs	r2, #1
    39f2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <usbdc_start+0x34>)
    39f6:	4798      	blx	r3
	return ERR_NONE;
    39f8:	2000      	movs	r0, #0
}
    39fa:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    39fc:	2004      	movs	r0, #4
    39fe:	4240      	negs	r0, r0
    3a00:	e7fb      	b.n	39fa <usbdc_start+0x22>
		return ERR_BAD_DATA;
    3a02:	2009      	movs	r0, #9
    3a04:	4240      	negs	r0, r0
    3a06:	e7f8      	b.n	39fa <usbdc_start+0x22>
    3a08:	20000490 	.word	0x20000490
    3a0c:	000010f5 	.word	0x000010f5

00003a10 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3a10:	b510      	push	{r4, lr}
	usb_d_attach();
    3a12:	4b01      	ldr	r3, [pc, #4]	; (3a18 <usbdc_attach+0x8>)
    3a14:	4798      	blx	r3
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	00001101 	.word	0x00001101

00003a1c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    3a1c:	4b01      	ldr	r3, [pc, #4]	; (3a24 <usbdc_get_ctrl_buffer+0x8>)
    3a1e:	6958      	ldr	r0, [r3, #20]
}
    3a20:	4770      	bx	lr
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	20000490 	.word	0x20000490

00003a28 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3a28:	4b02      	ldr	r3, [pc, #8]	; (3a34 <usbdc_get_state+0xc>)
    3a2a:	7e98      	ldrb	r0, [r3, #26]
    3a2c:	06c3      	lsls	r3, r0, #27
    3a2e:	d500      	bpl.n	3a32 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    3a30:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    3a32:	4770      	bx	lr
    3a34:	20000490 	.word	0x20000490

00003a38 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    3a38:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3a3a:	4288      	cmp	r0, r1
    3a3c:	d211      	bcs.n	3a62 <usb_find_desc+0x2a>
	return desc[0];
    3a3e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a40:	2b01      	cmp	r3, #1
    3a42:	d910      	bls.n	3a66 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    3a44:	7844      	ldrb	r4, [r0, #1]
    3a46:	4294      	cmp	r4, r2
    3a48:	d00a      	beq.n	3a60 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3a4a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3a4c:	4281      	cmp	r1, r0
    3a4e:	d906      	bls.n	3a5e <usb_find_desc+0x26>
	return desc[0];
    3a50:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a52:	2b01      	cmp	r3, #1
    3a54:	d909      	bls.n	3a6a <usb_find_desc+0x32>
	return desc[1];
    3a56:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3a58:	4294      	cmp	r4, r2
    3a5a:	d1f6      	bne.n	3a4a <usb_find_desc+0x12>
    3a5c:	e000      	b.n	3a60 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3a5e:	2000      	movs	r0, #0
}
    3a60:	bd10      	pop	{r4, pc}
	return NULL;
    3a62:	2000      	movs	r0, #0
    3a64:	e7fc      	b.n	3a60 <usb_find_desc+0x28>
		_desc_len_check();
    3a66:	2000      	movs	r0, #0
    3a68:	e7fa      	b.n	3a60 <usb_find_desc+0x28>
    3a6a:	2000      	movs	r0, #0
    3a6c:	e7f8      	b.n	3a60 <usb_find_desc+0x28>

00003a6e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3a6e:	4288      	cmp	r0, r1
    3a70:	d215      	bcs.n	3a9e <usb_find_ep_desc+0x30>
	return desc[0];
    3a72:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a74:	2b01      	cmp	r3, #1
    3a76:	d914      	bls.n	3aa2 <usb_find_ep_desc+0x34>
	return desc[1];
    3a78:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3a7a:	2a04      	cmp	r2, #4
    3a7c:	d013      	beq.n	3aa6 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3a7e:	2a05      	cmp	r2, #5
    3a80:	d00c      	beq.n	3a9c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    3a82:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3a84:	4281      	cmp	r1, r0
    3a86:	d908      	bls.n	3a9a <usb_find_ep_desc+0x2c>
	return desc[0];
    3a88:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3a8a:	2b01      	cmp	r3, #1
    3a8c:	d90d      	bls.n	3aaa <usb_find_ep_desc+0x3c>
	return desc[1];
    3a8e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3a90:	2a04      	cmp	r2, #4
    3a92:	d00c      	beq.n	3aae <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3a94:	2a05      	cmp	r2, #5
    3a96:	d1f4      	bne.n	3a82 <usb_find_ep_desc+0x14>
    3a98:	e000      	b.n	3a9c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3a9a:	2000      	movs	r0, #0
}
    3a9c:	4770      	bx	lr
	return NULL;
    3a9e:	2000      	movs	r0, #0
    3aa0:	e7fc      	b.n	3a9c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3aa2:	2000      	movs	r0, #0
    3aa4:	e7fa      	b.n	3a9c <usb_find_ep_desc+0x2e>
	return NULL;
    3aa6:	2000      	movs	r0, #0
    3aa8:	e7f8      	b.n	3a9c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    3aaa:	2000      	movs	r0, #0
    3aac:	e7f6      	b.n	3a9c <usb_find_ep_desc+0x2e>
	return NULL;
    3aae:	2000      	movs	r0, #0
    3ab0:	e7f4      	b.n	3a9c <usb_find_ep_desc+0x2e>
	...

00003ab4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    3ab4:	b570      	push	{r4, r5, r6, lr}
    3ab6:	000c      	movs	r4, r1
    3ab8:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    3aba:	2202      	movs	r2, #2
    3abc:	4b16      	ldr	r3, [pc, #88]	; (3b18 <usb_find_cfg_desc+0x64>)
    3abe:	4798      	blx	r3
	if (!desc) {
    3ac0:	2800      	cmp	r0, #0
    3ac2:	d01d      	beq.n	3b00 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3ac4:	4284      	cmp	r4, r0
    3ac6:	d91c      	bls.n	3b02 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    3ac8:	7803      	ldrb	r3, [r0, #0]
    3aca:	2b01      	cmp	r3, #1
    3acc:	d91b      	bls.n	3b06 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    3ace:	7843      	ldrb	r3, [r0, #1]
    3ad0:	2b02      	cmp	r3, #2
    3ad2:	d11a      	bne.n	3b0a <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    3ad4:	7943      	ldrb	r3, [r0, #5]
    3ad6:	42ab      	cmp	r3, r5
    3ad8:	d012      	beq.n	3b00 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3ada:	78c2      	ldrb	r2, [r0, #3]
    3adc:	0212      	lsls	r2, r2, #8
    3ade:	7883      	ldrb	r3, [r0, #2]
    3ae0:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3ae2:	b29b      	uxth	r3, r3
    3ae4:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    3ae6:	4284      	cmp	r4, r0
    3ae8:	d909      	bls.n	3afe <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3aea:	7803      	ldrb	r3, [r0, #0]
    3aec:	2b01      	cmp	r3, #1
    3aee:	d90e      	bls.n	3b0e <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    3af0:	7843      	ldrb	r3, [r0, #1]
    3af2:	2b02      	cmp	r3, #2
    3af4:	d10d      	bne.n	3b12 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    3af6:	7943      	ldrb	r3, [r0, #5]
    3af8:	42ab      	cmp	r3, r5
    3afa:	d1ee      	bne.n	3ada <usb_find_cfg_desc+0x26>
    3afc:	e000      	b.n	3b00 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3afe:	2000      	movs	r0, #0
}
    3b00:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    3b02:	2000      	movs	r0, #0
    3b04:	e7fc      	b.n	3b00 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3b06:	2000      	movs	r0, #0
    3b08:	e7fa      	b.n	3b00 <usb_find_cfg_desc+0x4c>
	return NULL;
    3b0a:	2000      	movs	r0, #0
    3b0c:	e7f8      	b.n	3b00 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3b0e:	2000      	movs	r0, #0
    3b10:	e7f6      	b.n	3b00 <usb_find_cfg_desc+0x4c>
	return NULL;
    3b12:	2000      	movs	r0, #0
    3b14:	e7f4      	b.n	3b00 <usb_find_cfg_desc+0x4c>
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	00003a39 	.word	0x00003a39

00003b1c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    3b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1e:	000d      	movs	r5, r1
    3b20:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3b22:	4288      	cmp	r0, r1
    3b24:	d212      	bcs.n	3b4c <usb_find_str_desc+0x30>
    3b26:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3b28:	4e0a      	ldr	r6, [pc, #40]	; (3b54 <usb_find_str_desc+0x38>)
    3b2a:	2203      	movs	r2, #3
    3b2c:	0029      	movs	r1, r5
    3b2e:	47b0      	blx	r6
		if (desc) {
    3b30:	2800      	cmp	r0, #0
    3b32:	d00e      	beq.n	3b52 <usb_find_str_desc+0x36>
	return desc[0];
    3b34:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    3b36:	2b01      	cmp	r3, #1
    3b38:	d90a      	bls.n	3b50 <usb_find_str_desc+0x34>
			if (i == str_index) {
    3b3a:	42a7      	cmp	r7, r4
    3b3c:	d009      	beq.n	3b52 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    3b3e:	3401      	adds	r4, #1
    3b40:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    3b42:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    3b44:	4285      	cmp	r5, r0
    3b46:	d8f0      	bhi.n	3b2a <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3b48:	2000      	movs	r0, #0
    3b4a:	e002      	b.n	3b52 <usb_find_str_desc+0x36>
    3b4c:	2000      	movs	r0, #0
    3b4e:	e000      	b.n	3b52 <usb_find_str_desc+0x36>
			_desc_len_check();
    3b50:	2000      	movs	r0, #0
}
    3b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b54:	00003a39 	.word	0x00003a39

00003b58 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3b58:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3b5a:	4806      	ldr	r0, [pc, #24]	; (3b74 <cdc_device_acm_init+0x1c>)
    3b5c:	3040      	adds	r0, #64	; 0x40
    3b5e:	4b06      	ldr	r3, [pc, #24]	; (3b78 <cdc_device_acm_init+0x20>)
    3b60:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3b62:	4b06      	ldr	r3, [pc, #24]	; (3b7c <cdc_device_acm_init+0x24>)
    3b64:	4798      	blx	r3

	usbdc_start(single_desc);
    3b66:	4806      	ldr	r0, [pc, #24]	; (3b80 <cdc_device_acm_init+0x28>)
    3b68:	4b06      	ldr	r3, [pc, #24]	; (3b84 <cdc_device_acm_init+0x2c>)
    3b6a:	4798      	blx	r3
	usbdc_attach();
    3b6c:	4b06      	ldr	r3, [pc, #24]	; (3b88 <cdc_device_acm_init+0x30>)
    3b6e:	4798      	blx	r3
}
    3b70:	bd10      	pop	{r4, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	200004b0 	.word	0x200004b0
    3b78:	00003961 	.word	0x00003961
    3b7c:	000032e5 	.word	0x000032e5
    3b80:	2000000c 	.word	0x2000000c
    3b84:	000039d9 	.word	0x000039d9
    3b88:	00003a11 	.word	0x00003a11

00003b8c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    3b8c:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    3b8e:	4b01      	ldr	r3, [pc, #4]	; (3b94 <usb_init+0x8>)
    3b90:	4798      	blx	r3
}
    3b92:	bd10      	pop	{r4, pc}
    3b94:	00003b59 	.word	0x00003b59

00003b98 <__ffssi2>:
    3b98:	b510      	push	{r4, lr}
    3b9a:	2300      	movs	r3, #0
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d002      	beq.n	3ba6 <__ffssi2+0xe>
    3ba0:	f000 f804 	bl	3bac <__ctzsi2>
    3ba4:	1c43      	adds	r3, r0, #1
    3ba6:	0018      	movs	r0, r3
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	46c0      	nop			; (mov r8, r8)

00003bac <__ctzsi2>:
    3bac:	4241      	negs	r1, r0
    3bae:	4008      	ands	r0, r1
    3bb0:	211c      	movs	r1, #28
    3bb2:	2301      	movs	r3, #1
    3bb4:	041b      	lsls	r3, r3, #16
    3bb6:	4298      	cmp	r0, r3
    3bb8:	d301      	bcc.n	3bbe <__ctzsi2+0x12>
    3bba:	0c00      	lsrs	r0, r0, #16
    3bbc:	3910      	subs	r1, #16
    3bbe:	0a1b      	lsrs	r3, r3, #8
    3bc0:	4298      	cmp	r0, r3
    3bc2:	d301      	bcc.n	3bc8 <__ctzsi2+0x1c>
    3bc4:	0a00      	lsrs	r0, r0, #8
    3bc6:	3908      	subs	r1, #8
    3bc8:	091b      	lsrs	r3, r3, #4
    3bca:	4298      	cmp	r0, r3
    3bcc:	d301      	bcc.n	3bd2 <__ctzsi2+0x26>
    3bce:	0900      	lsrs	r0, r0, #4
    3bd0:	3904      	subs	r1, #4
    3bd2:	a202      	add	r2, pc, #8	; (adr r2, 3bdc <__ctzsi2+0x30>)
    3bd4:	5c10      	ldrb	r0, [r2, r0]
    3bd6:	1a40      	subs	r0, r0, r1
    3bd8:	4770      	bx	lr
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	1d1d1c1b 	.word	0x1d1d1c1b
    3be0:	1e1e1e1e 	.word	0x1e1e1e1e
    3be4:	1f1f1f1f 	.word	0x1f1f1f1f
    3be8:	1f1f1f1f 	.word	0x1f1f1f1f

00003bec <__libc_init_array>:
    3bec:	b570      	push	{r4, r5, r6, lr}
    3bee:	2600      	movs	r6, #0
    3bf0:	4d0c      	ldr	r5, [pc, #48]	; (3c24 <__libc_init_array+0x38>)
    3bf2:	4c0d      	ldr	r4, [pc, #52]	; (3c28 <__libc_init_array+0x3c>)
    3bf4:	1b64      	subs	r4, r4, r5
    3bf6:	10a4      	asrs	r4, r4, #2
    3bf8:	42a6      	cmp	r6, r4
    3bfa:	d109      	bne.n	3c10 <__libc_init_array+0x24>
    3bfc:	2600      	movs	r6, #0
    3bfe:	f000 f8c9 	bl	3d94 <_init>
    3c02:	4d0a      	ldr	r5, [pc, #40]	; (3c2c <__libc_init_array+0x40>)
    3c04:	4c0a      	ldr	r4, [pc, #40]	; (3c30 <__libc_init_array+0x44>)
    3c06:	1b64      	subs	r4, r4, r5
    3c08:	10a4      	asrs	r4, r4, #2
    3c0a:	42a6      	cmp	r6, r4
    3c0c:	d105      	bne.n	3c1a <__libc_init_array+0x2e>
    3c0e:	bd70      	pop	{r4, r5, r6, pc}
    3c10:	00b3      	lsls	r3, r6, #2
    3c12:	58eb      	ldr	r3, [r5, r3]
    3c14:	4798      	blx	r3
    3c16:	3601      	adds	r6, #1
    3c18:	e7ee      	b.n	3bf8 <__libc_init_array+0xc>
    3c1a:	00b3      	lsls	r3, r6, #2
    3c1c:	58eb      	ldr	r3, [r5, r3]
    3c1e:	4798      	blx	r3
    3c20:	3601      	adds	r6, #1
    3c22:	e7f2      	b.n	3c0a <__libc_init_array+0x1e>
    3c24:	00003da0 	.word	0x00003da0
    3c28:	00003da0 	.word	0x00003da0
    3c2c:	00003da0 	.word	0x00003da0
    3c30:	00003da4 	.word	0x00003da4

00003c34 <memcpy>:
    3c34:	2300      	movs	r3, #0
    3c36:	b510      	push	{r4, lr}
    3c38:	429a      	cmp	r2, r3
    3c3a:	d100      	bne.n	3c3e <memcpy+0xa>
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	5ccc      	ldrb	r4, [r1, r3]
    3c40:	54c4      	strb	r4, [r0, r3]
    3c42:	3301      	adds	r3, #1
    3c44:	e7f8      	b.n	3c38 <memcpy+0x4>

00003c46 <memset>:
    3c46:	0003      	movs	r3, r0
    3c48:	1882      	adds	r2, r0, r2
    3c4a:	4293      	cmp	r3, r2
    3c4c:	d100      	bne.n	3c50 <memset+0xa>
    3c4e:	4770      	bx	lr
    3c50:	7019      	strb	r1, [r3, #0]
    3c52:	3301      	adds	r3, #1
    3c54:	e7f9      	b.n	3c4a <memset+0x4>
    3c56:	0000      	movs	r0, r0
    3c58:	682f2e2e 	.word	0x682f2e2e
    3c5c:	732f6c61 	.word	0x732f6c61
    3c60:	682f6372 	.word	0x682f6372
    3c64:	695f6c61 	.word	0x695f6c61
    3c68:	00632e6f 	.word	0x00632e6f
    3c6c:	682f2e2e 	.word	0x682f2e2e
    3c70:	732f6c61 	.word	0x732f6c61
    3c74:	682f6372 	.word	0x682f6372
    3c78:	735f6c61 	.word	0x735f6c61
    3c7c:	6d5f6970 	.word	0x6d5f6970
    3c80:	6e79735f 	.word	0x6e79735f
    3c84:	00632e63 	.word	0x00632e63
    3c88:	682f2e2e 	.word	0x682f2e2e
    3c8c:	732f6c61 	.word	0x732f6c61
    3c90:	682f6372 	.word	0x682f6372
    3c94:	745f6c61 	.word	0x745f6c61
    3c98:	72656d69 	.word	0x72656d69
    3c9c:	0000632e 	.word	0x0000632e
    3ca0:	682f2e2e 	.word	0x682f2e2e
    3ca4:	752f6c61 	.word	0x752f6c61
    3ca8:	736c6974 	.word	0x736c6974
    3cac:	6372732f 	.word	0x6372732f
    3cb0:	6974752f 	.word	0x6974752f
    3cb4:	6c5f736c 	.word	0x6c5f736c
    3cb8:	2e747369 	.word	0x2e747369
    3cbc:	00000063 	.word	0x00000063

00003cc0 <_map>:
    3cc0:	00000001 0000000f 682f2e2e 652f6c70     ........../hpl/e
    3cd0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    3ce0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3cf0:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00003cfc <_tcs>:
    3cfc:	03680001 00000000 00000000 00001770     ..h.........p...
    3d0c:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    3d1c:	63745f6c 0000632e 00002000              l_tc.c... ..

00003d28 <_usb_ep_cfgs>:
    3d28:	2000042c 00000000 00000040 200003ec     ,.. ....@...... 
    3d38:	00000000 00000040 200003ac 00000000     ....@...... ....
    3d48:	00000040 000038f8 000035e0 000038f8     @....8...5...8..
    3d58:	00003612 000038f8 00003536 000038f8     .6...8..65...8..
    3d68:	000038f8 000038f8 0000354a 000038f8     .8...8..J5...8..
    3d78:	00003646 752f2e2e 642f6273 63697665     F6..../usb/devic
    3d88:	73752f65 2e636462 00000063              e/usbdc.c...

00003d94 <_init>:
    3d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d9a:	bc08      	pop	{r3}
    3d9c:	469e      	mov	lr, r3
    3d9e:	4770      	bx	lr

00003da0 <__init_array_start>:
    3da0:	000000b5 	.word	0x000000b5

00003da4 <_fini>:
    3da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3daa:	bc08      	pop	{r3}
    3dac:	469e      	mov	lr, r3
    3dae:	4770      	bx	lr

00003db0 <__fini_array_start>:
    3db0:	0000008d 	.word	0x0000008d
